{
    "events": [
        {
            "args": [
                "BankAccount",
                "number",
                "number",
                "BankAccountLog[]"
            ],
            "argsDesc": [
                "The BankAccount which the logs relate to.",
                "The amount of logs.",
                "The offset of the logs.",
                "The array of BankAccountLogs"
            ],
            "desc": "Invoked when a request for bank account logs is received.",
            "name": "BankAccountLogsReceived"
        },
        {
            "args": [
                "string"
            ],
            "argsDesc": [
                "The command string typed"
            ],
            "desc": "Invoked when a console command is typed",
            "example": "using Console;\nusing Event;\n\nfunction OnConsoleCommand(string command){\n    Console.WriteLine(\"The command was typed: \"..command);\n}\n\nEvent.AddListener(\"ConsoleCommand\", \"input\", \"OnConsoleCommand\");",
            "name": "ConsoleCommand"
        },
        {
            "args": [
                "ButtonDevice",
                "Player"
            ],
            "argsDesc": [
                "The ButtonDevice which was pressed",
                "The Player who pressed the button"
            ],
            "desc": "Invoked when a connected button device is pressed",
            "example": "using Console;\nusing Event;\nusing Player;\nusing Device;\n\nfunction OnButtonPressed(ButtonDevice device, Player player){\n    Console.WriteLine(player.GetName()..\" pressed a button!\");\n}\n\nEvent.AddListener(\"Device_ButtonPressed\", \"buttons\", \"OnButtonPressed\");",
            "name": "Device_ButtonPressed"
        },
        {
            "args": [
                "InputButtonDevice",
                "Player",
                "string"
            ],
            "argsDesc": [
                "The InputButtonDevice which was pressed",
                "The Player who pressed the button",
                "The input from the player"
            ],
            "desc": "Invoked when a connected Input Button device is pressed",
            "example": "using Console;\nusing Event;\nusing Player;\nusing Device;\n\nfunction OnInputButtonPressed(InputButtonDevice button, Player player, string text){\n    Console.WriteLine(button.GetName()..\" was pressed!\");\n    Console.WriteLine(player.GetName()..\" sent: \"..text);\n}\n\nEvent.AddListener(\"Device_InputButtonPressed\", \"input button\", \"OnInputButtonPressed\");",
            "name": "Device_InputButtonPressed"
        },
        {
            "args": [
                "KeypadDevice",
                "Player",
                "bool",
                "number"
            ],
            "argsDesc": [
                "The KeypadDevice which was activated",
                "The Player who activated the Keypad",
                "Whether the passcode was correct or incorrect",
                "The passcode which was entered"
            ],
            "desc": "Invoked when a connected Keypad device is activated",
            "example": "using Console;\nusing Event;\nusing Player;\nusing Util;\nusing Device;\n\nfunction OnKeypadActivated(KeypadDevice keypad, Player player, bool wasCorrect, number keycode){\n    Console.WriteLine(player.GetName()..\" entered the keypad code: \"..Util.ToString(keycode));\n    \n    if(wasCorrect){\n        Console.WriteLine(\"The code was correct!\");\n    }else{\n        Console.WriteLine(\"The code was wrong!\");\n    }\n}\n\nEvent.AddListener(\"Device_KeypadActivated\", \"keypads\", \"OnKeypadActivated\");",
            "name": "Device_KeypadActivated"
        },
        {
            "args": [
                "MetalDetectorDevice",
                "Player",
                "bool",
                "bool"
            ],
            "argsDesc": [
                "The MetalDetectorDevice which was triggered",
                "The Player who triggered the detector",
                "Whether the player is carrying an illegal weapon",
                "Whether the player was police"
            ],
            "desc": "Invoked when a connected Metal Detector is triggered",
            "example": "using Console;\nusing Util;\nusing Event;\nusing Player;\nusing Device;\n\nfunction OnMetalDetectorTriggered(MetalDetectorDevice detector, Player player, bool hasIllegalWeapons, bool isPolice){\n    Console.WriteLine(player.GetName()..\" walked through a metal detector! Police: \"..Util.ToString(isPolice));\n}\n\nEvent.AddListener(\"Device_MetalDetectorTriggered\", \"metal detectors\", \"OnMetalDetectorTriggered\");",
            "name": "Device_MetalDetectorTriggered"
        },
        {
            "args": [
                "MotionDetectorDevice",
                "Player"
            ],
            "argsDesc": [
                "The MotionDetectorDevice which was triggered",
                "The Player who triggered the detector"
            ],
            "desc": "Invoked when a connected Motion Detector is triggered",
            "example": "using Console;\nusing Event;\nusing Player;\nusing Device;\n\nfunction OnMotionDetectorTriggered(MotionDetectorDevice detector, Player player){\n    Console.WriteLine(player.GetName()..\" triggered a motion detector!\");\n}\n\nEvent.AddListener(\"Device_MotionDetectorTriggered\", \"motion detectors\", \"OnMotionDetectorTriggered\");",
            "name": "Device_MotionDetectorTriggered"
        },
        {
            "args": [
                "PaymentButtonDevice",
                "Player",
                "number"
            ],
            "argsDesc": [
                "The PaymentButtonDevice which was pressed",
                "The Player who pressed the button",
                "The amount paid by the player"
            ],
            "desc": "Invoked when a connected Payment Button device is pressed",
            "example": "using Console;\nusing Util;\nusing Event;\nusing Player;\nusing Device;\n\nfunction<bool> OnPaymentButtonPressed(PaymentButtonDevice device, Player player, number amount){\n    Console.WriteLine(player.GetName()..\" has paid \"..Util.ToString(amount)..\"!\");\n\n    // If we return false, the payment would be rejected and no money would be transferred.\n    // This is useful to abort a payment if the product cannot be delivered for some reason.\n    \n    // Accept the payment by returning true.\n    return true;\n}\n\nEvent.AddListener(\"Device_PaymentButtonPressed\", \"payment\", \"OnPaymentButtonPressed\");",
            "name": "Device_PaymentButtonPressed"
        },
        {
            "args": [
                "TargetDevice",
                "Player",
                "string",
                "string"
            ],
            "argsDesc": [
                "The TargetDevice which was hit",
                "The Player who hit the target",
                "Damage inflicted",
                "Weapon used"
            ],
            "desc": "Invoked when a connected Target is hit",
            "example": "using Console;\nusing Util;\nusing Event;\nusing Player;\nusing Device;\n\nfunction OnTargetHit(TargetDevice target, Player player, string damage, string weapon){\n    Console.WriteLine(player.GetName()..\" hit target! with \"..Util.ToString(weapon)..\" with \"..Util.ToString(damage));\n}\n\nEvent.AddListener(\"Device_TargetHit\", \"targets\", \"OnTargetHit\");",
            "name": "Device_TargetHit"
        },
        {
            "args": [
                "Dispenser"
            ],
            "argsDesc": [
                "The Dispenser which was connected."
            ],
            "desc": "Invoked when a Dispenser peripheral is connected to the terminal.",
            "example": "using Console;\nusing Event;\nusing Peripheral;\n\n// Registers an event listener for when dispensers are connected.\n\nfunction OnDispenserConnected(Dispenser dsp){\n    Console.WriteLine(\"A dispenser was connected!\");\n}\n\nEvent.AddListener(\"DispenserConnected\", \"dispensers\", \"OnDispenserConnected\");",
            "name": "DispenserConnected"
        },
        {
            "args": [
                "number",
                "NTM"
            ],
            "argsDesc": [
                "The incoming message's protocol",
                "The NTM message received"
            ],
            "desc": "Invoked when an incoming network message is received",
            "example": "using System;\nusing Console;\nusing Net;\nusing Event;\n\n// This will be ran when a message is received\nfunction OnNetworkMessageReceived(number protocol, NTM message){\n    // We know that the protocol we are using is 6000.\n    // We don't want to read data from other network messages.\n    if(protocol != 6000){\n        return;\n    }\n\n    string sourceAddress = message.GetSourceAddress();\n\n    // We must read the data in the same order it was written.\n    string text = message.ReadString();\n    bool value = message.ReadBool();\n\n    Console.WriteLine(\"Message from [\"..sourceAddress..\"]: \"..text);\n}\n\nEvent.AddListener(\"IncomingNTM\", \"incoming_ntm\", \"OnNetworkMessageReceived\");\n\n// Sending a network message to our own terminal, basically like localhost.\n// If you put the IP of a different terminal here, it would be sent there instead.\nstring myIp = System.GetIP();\n\nNet.Start(6000);\nNet.WriteString(\"Hello!\");\nNet.WriteBool(true);\nNet.SendToAddress(myIp);\n\n// Continue processing events forever.\nwhile(true){\n    Event.Process();\n}",
            "name": "IncomingNTM"
        },
        {
            "args": [
                "Player"
            ],
            "argsDesc": [
                "The Player who started using the terminal"
            ],
            "desc": "Invoked when a player starts using the terminal",
            "example": "using System;\nusing Player;\nusing Event;\nusing Console;\n\nfunction OnPlayerStartedUsing(Player ply){\n    Console.WriteLine(ply.GetName()..\" has started using the terminal.\");\n}\n\nEvent.AddListener(\"PlayerStartedUsing\", \"using\", \"OnPlayerStartedUsing\");",
            "name": "PlayerStartedUsing"
        },
        {
            "args": [
                "Player"
            ],
            "argsDesc": [
                "The Player who stopped using the terminal"
            ],
            "desc": "Invoked when a player stops using the terminal",
            "example": "using System;\nusing Player;\nusing Event;\nusing Console;\n\nfunction OnPlayerStoppedUsing(Player ply){\n    Console.WriteLine(ply.GetName()..\" has stopped using the terminal.\");\n}\n\nEvent.AddListener(\"PlayerStoppedUsing\", \"using\", \"OnPlayerStoppedUsing\");",
            "name": "PlayerStoppedUsing"
        },
        {
            "args": [
                "Process"
            ],
            "argsDesc": [
                "The process which started"
            ],
            "desc": "Invoked when an MNScript process starts.",
            "example": "using System;\nusing Console;\nusing Event;\nusing Util;\n\nfunction OnProcessStarted(Process process){\n    Console.WriteLine(\"Process started: \"..Util.ToString(process.GetProcessId()));\n}\n\nEvent.AddListener(\"ProcessStarted\", \"process start\", \"OnProcessStarted\");",
            "name": "ProcessStarted"
        },
        {
            "args": [
                "Process"
            ],
            "argsDesc": [
                "The process which stopped"
            ],
            "desc": "Invoked when an MNScript process stops.",
            "example": "using System;\nusing Console;\nusing Event;\nusing Util;\n\nfunction OnProcessStopped(Process process){\n    Console.WriteLine(\"Process stopped: \"..Util.ToString(process.GetProcessId()));\n}\n\nEvent.AddListener(\"ProcessStopped\", \"process stop\", \"OnProcessStopped\");",
            "name": "ProcessStopped"
        },
        {
            "args": [
                "Sniffer",
                "Router[]",
                "number[]"
            ],
            "argsDesc": [
                "The sniffer.",
                "The routers found by the sniffer",
                "The distances of the routers from the sniffer"
            ],
            "desc": "Invoked when a sniffer has completed a scan.",
            "example": "using Peripheral;\nusing System;\nusing Event;\nusing Array;\nusing Console;\n\nEvent.AddListener(\"SnifferScanComplete\", \"sniffer\", \"OnSnifferScanComplete\");\n\nSniffer sniffer = Peripheral.GetConnectedSniffer();\n\nif(sniffer.IsValid() == false){\n    // If the sniffer was not connected to the terminal, quit.\n    Application.Exit();\n}\n\n//Begin Scan\nsniffer.Scan();\nConsole.WriteLine(\"Sniffer Scan Started!\");\n\n//Sniff Scan Event Function`\nfunction OnSnifferScanComplete(Sniffer sniffer, Router[] routers, number[] distances) {\n    \n    Console.WriteLine(\"Sniffer Scan Complete!\");\n    \n    number i = 1;\n    number routerCount = Array.Length(routers);\n    \n    while (routerCount >= i) {\n        \n        Router router = routers[i];\n        number distance = distances[i];\n        \n        number deviceCount = router.GetDeviceCount();\n        number pid = router.GetPPID();\n\n        Console.WriteLine(\"Router [\"..pid..\"] found \"..distance..\"m away with \"..deviceCount..\" connected devices\");\n        \n        i = i + 1;            \n    }\n    \n}\n\nwhile (true) {\n    Event.Process();   \n}",
            "name": "SnifferScanComplete"
        },
        {
            "args": [
                "number",
                "number"
            ],
            "argsDesc": [
                "The width of the screen.",
                "The height of the screen."
            ],
            "desc": "Invoked when a Surface UI frame is displayed on a new screen.",
            "name": "Surface_ApplicationScreenChanged"
        },
        {
            "args": [
                "MNGuiButton",
                "Player"
            ],
            "argsDesc": [
                "The MNGuiButton which was pressed",
                "The Player who pressed the button"
            ],
            "desc": "Invoked when a Surface UI button is pressed.",
            "example": "using Console;\nusing Event;\nusing Player;\nusing Surface;\n\n// Create the application UI\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Create a button which prints \"Hello World!\" to the console when pressed\n\nMNGuiButton button = Surface.CreateButton(pnl);\nbutton.SetText(\"Say Hi\");\nbutton.SetTag(\"HiButton\");\nbutton.SetData(\"Hello World!\");\n\n// Make sure to update the UI so the button appears on the screen.\nSurface.Update();\n\n// Make the event for when the button is pressed\n\nfunction OnSurfaceButtonPressed(MNGuiButton button, Player player){\n    if(button.GetTag() == \"HiButton\"){\n        string message = button.GetData();\n\n        Console.WriteLine(\"The button says: \"..message);\n    }\n}\n\nEvent.AddListener(\"Surface_ButtonPressed\", \"surface_buttons\", \"OnSurfaceButtonPressed\");\n\nwhile(true){\n    Event.Process();\n}",
            "name": "Surface_ButtonPressed"
        },
        {
            "args": [
                "MNGuiInputButton",
                "Player",
                "string"
            ],
            "argsDesc": [
                "The MNGuiInputButton which was pressed.",
                "The Player who pressed the button.",
                "The text which was input."
            ],
            "desc": "Invoked when a Surface UI input button is pressed.",
            "example": "using Console;\nusing Event;\nusing Player;\nusing Surface;\n\n// Create the application UI\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Create a button which prints the user input to the console\n\nMNGuiInputButton button = Surface.CreateInputButton(pnl);\nbutton.SetText(\"Input\");\nbutton.SetTag(\"InputButton\");\nbutton.SetTitle(\"Say Something\");\n\n// Make sure to update the UI so the button appears on the screen.\nSurface.Update();\n\n// Make the event for when the button is pressed\n\nfunction OnSurfaceInputButtonPressed(MNGuiInputButton button, Player player, string text){\n    if(button.GetTag() == \"InputButton\"){\n        Console.WriteLine(player.GetName()..\" says: \"..text);\n    }\n}\n\nEvent.AddListener(\"Surface_InputButtonPressed\", \"surface_input_buttons\", \"OnSurfaceInputButtonPressed\");\n\nwhile(true){\n    Event.Process();\n}",
            "name": "Surface_InputButtonPressed"
        },
        {
            "args": [
                "Teleporter"
            ],
            "argsDesc": [
                "The Teleporter which was connected"
            ],
            "desc": "Invoked when a Teleporter peripheral is connected to the terminal",
            "example": "using Console;\nusing Event;\nusing Peripheral;\n\n// Registers an event listener for when teleporters are connected.\n\nfunction OnTeleporterConnected(Teleporter tele){\n    Console.WriteLine(\"A teleporter was connected!\");\n}\n\nEvent.AddListener(\"TeleporterConnected\", \"teleporters\", \"OnTeleporterConnected\");",
            "name": "TeleporterConnected"
        },
        {
            "args": [
                "Turret"
            ],
            "argsDesc": [
                "The Turret which was connected"
            ],
            "desc": "Invoked when a Turret peripheral is connected to the terminal",
            "example": "using Console;\nusing Event;\nusing Peripheral;\nusing Util;\n\n// Registers an event listener for when turrets are connected.\n\nfunction OnTurretConnected(Turret trt){\n    Console.WriteLine(\"A turret was connected!\");\n    Console.WriteLine(\"The turret has \"..Util.ToString(trt.GetAmmo())..\" ammo.\");\n}\n\nEvent.AddListener(\"TurretConnected\", \"turrets\", \"OnTurretConnected\");",
            "name": "TurretConnected"
        },
        {
            "args": [
                "Turret",
                "Player"
            ],
            "argsDesc": [
                "The Turret which attacked the player",
                "The Player who was attacked"
            ],
            "desc": "Invoked when a Turret engages (attacks) a Player.",
            "example": "using Console;\nusing Event;\nusing Peripheral;\n\n// Registers an event listener for when a turret engages a player.\n\nfunction OnTurretEngaged(Turret trt, Player ply){\n    Console.WriteLine(\"A turret has attacked \"..ply.GetName());\n}\n\nEvent.AddListener(\"TurretEngaged\", \"turret_engage\", \"OnTurretEngaged\");",
            "name": "TurretEngaged"
        },
        {
            "args": [
                "Turret",
                "Player"
            ],
            "argsDesc": [
                "The Turret",
                "The friendly player"
            ],
            "desc": "Invoked when a turret changes a players status to friendly",
            "example": "using Console;\nusing Event;\nusing Peripheral;\n\n// Registers an event listener for when a turret registers a friendly player.\n// Friendly players will not be attacked by the turret no matter what.\n\nfunction OnTurretFriendly(Turret trt, Player ply){\n    Console.WriteLine(ply.GetName()..\" is now friendly to the turret.\");\n}\n\nEvent.AddListener(\"TurretFriendly\", \"turret_friend\", \"OnTurretFriendly\");",
            "name": "TurretFriendly"
        },
        {
            "args": [
                "Turret",
                "Player"
            ],
            "argsDesc": [
                "The Turret",
                "The hostile player"
            ],
            "desc": "Invoked when a turret changes a players status to hostile",
            "example": "using Console;\nusing Event;\nusing Peripheral;\n\n// Registers an event listener for when a turret registers a hostile player.\n// Hostile players are NOT KOS!\n// Making a player hostile means the turret will track them when they are close,\n// and prioritize hostile players for shooting at.\n\nfunction OnTurretHostile(Turret trt, Player ply){\n    Console.WriteLine(ply.GetName()..\" is now friendly to the turret.\");\n}\n\nEvent.AddListener(\"TurretHostile\", \"turret_hostile\", \"OnTurretHostile\");",
            "name": "TurretHostile"
        },
        {
            "args": [
                "Turret"
            ],
            "argsDesc": [
                "The Turret"
            ],
            "desc": "Invoked when a turret becomes idle",
            "example": "using Console;\nusing Event;\nusing Peripheral;\n\n// Registers an event listener for when a turret becomes idle.\n\nfunction OnTurretIdle(Turret trt){\n    Console.WriteLine(\"The turret is idle.\");\n}\n\nEvent.AddListener(\"TurretIdle\", \"turret_hostile\", \"OnTurretIdle\");",
            "name": "TurretIdle"
        },
        {
            "args": [
                "Turret",
                "Player"
            ],
            "argsDesc": [
                "The Turret",
                "The player who was spotted"
            ],
            "desc": "Invoked when a turret aquires a new target",
            "example": "using Console;\nusing Event;\nusing Peripheral;\n\n// NOTE: Hostile players are NOT KOS!\n// Making a player hostile means the turret will track them when they are close,\n// and prioritize hostile players for shooting at.\n\n// This registers an event listener for when a turret spots a new player.\n// We can use this event to tell the turret whether this player is hostile or neutral.\n// If we return true, the Turret will make the player neutral.\n// If we return false, the Turret will make the player hostile.\n\nfunction<bool> OnTurretSpottedPlayer(Turret trt, Player ply){\n    Console.WriteLine(ply.GetName()..\" has been spotted by a turret.\");\n\n    if(ply.GetSteamID() == \"STEAM_0:1:34409736\"){\n        // Returning false to make Ventz hostile!\n        return false;\n    }\n\n    // If you return false for everyone the turret will become confused, so avoid this.\n\n    // If it's not Ventz, return true to make the player neutral.\n    return true;\n}\n\nEvent.AddListener(\"TurretSpottedPlayer\", \"turret_hostile\", \"OnTurretSpottedPlayer\");",
            "name": "TurretSpottedPlayer"
        },
        {
            "args": [
                "VCMiner"
            ],
            "argsDesc": [
                "The VCMiner which started."
            ],
            "desc": "Invoked when a connected VCMiner starts mining.",
            "example": "using Console;\nusing Event;\nusing Peripheral;\n\n// Registers an event listener for when a VCMiner starts.\n\nfunction OnVCMinerStarted(VCMiner miner){\n    Console.WriteLine(\"A VCMiner was started!\");\n}\n\nEvent.AddListener(\"VCMinerStarted\", \"vcminer_stopped\", \"OnVCMinerStarted\");",
            "name": "VCMinerStarted"
        },
        {
            "args": [
                "VCMiner"
            ],
            "argsDesc": [
                "The VCMiner which stopped mining."
            ],
            "desc": "Invoked when a connected VCMiner stops mining.",
            "example": "using Console;\nusing Event;\nusing Peripheral;\n\n// Registers an event listener for when a VCMiner stops.\n\nfunction OnVCMinerStopped(VCMiner miner){\n    Console.WriteLine(\"A VCMiner was stopped!\");\n}\n\nEvent.AddListener(\"VCMinerStopped\", \"vcminer_stopped\", \"OnVCMinerStopped\");",
            "name": "VCMinerStopped"
        },
        {
            "args": [
                "VCMiner",
                "string",
                "bool"
            ],
            "argsDesc": [
                "The VCMiner which changed wallet.",
                "The new wallet address",
                "Whether the new wallet is valid or not"
            ],
            "desc": "Invoked when a connected VCMiner's wallet address changes.",
            "example": "using Console;\nusing Event;\nusing Peripheral;\n\n// Registers an event listener for when a VCMiner's wallet changes.\n\nfunction OnVCMinerWalletChanged(VCMiner miner, string newWallet, bool isWalletValid){\n    Console.WriteLine(\"A VCMiner wallet changed to \"..wallet);\n\n    if(isWalletValid){\n        Console.WriteLine(\"The new wallet is valid!\");\n    }else{\n        Console.WriteLine(\"The new wallet is NOT valid!\");\n    }\n}\n\nEvent.AddListener(\"VCMinerWalletChanged\", \"vcminer_stopped\", \"OnVCMinerWalletChanged\");",
            "name": "VCMinerWalletChanged"
        }
    ],
    "libraries": [
        {
            "classes": [],
            "functions": [
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The Url for the icon's image."
                    ],
                    "desc": "Attempts to create a desktop icon for this application.",
                    "example": "using Application;\nusing Console;\nusing System;\n\n// Attempts to create a desktop icon for this application.\n\nStringResult result = Application.CreateDesktopIcon(\"https://i.imgur.com/DVpOgMI.png\");\n\nif(result.GetResult() == true){\n    Console.WriteLine(\"The icon was created.\");\n}else{\n    // If the attempt failed, the reason will be contained in the result's string.\n\n    string reason = result.GetString();\n    Console.WriteLine(\"Failed to create icon: \"..reason);\n}",
                    "name": "CreateDesktopIcon",
                    "returnDesc": "A StringResult representing the success of the operation.",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The error message."
                    ],
                    "desc": "Exits the program and throws an error message.",
                    "name": "Error",
                    "returnType": "Unknown"
                },
                {
                    "args": [],
                    "desc": "Exits the program and stops execution.",
                    "name": "Exit",
                    "returnType": "Unknown"
                },
                {
                    "args": [],
                    "desc": "Gets the directory of the file this program was ran from.",
                    "name": "GetFileDirectory",
                    "returnDesc": "The directory which this program was ran from.",
                    "returnType": "string"
                },
                {
                    "args": [],
                    "desc": "Gets the name of the file this program was ran from.",
                    "name": "GetFileName",
                    "returnDesc": "The name of the file which this program was ran from.",
                    "returnType": "string"
                },
                {
                    "args": [],
                    "desc": "Returns whether the program has admin privilege.",
                    "name": "HasAdminPrivilege",
                    "returnDesc": "True if the program has admin privilege.",
                    "returnType": "bool"
                },
                {
                    "args": [],
                    "desc": "Requests admin privilege be granted to the program. The program is paused until a result is returned.",
                    "example": "using Application;\nusing Console;\nusing System;\n\n// Requests admin privileges from the user.\n\nStringResult result = Application.RequestAdminPrivilege();\n\nif(result.GetResult() == true){\n    Console.WriteLine(\"Admin Privileges granted.\");\n}else{\n    // If the request was denied, the reason will be contained in the result's string.\n\n    string reason = result.GetString();\n    Console.WriteLine(\"Admin Privileges denied: \"..reason);\n}",
                    "name": "RequestAdminPrivilege",
                    "returnDesc": "True if the admin privilege was granted by the user.",
                    "returnType": "StringResult"
                },
                {
                    "args": [],
                    "desc": "Prints a stack trace to the console.",
                    "name": "StackTrace",
                    "returnType": "Unknown"
                }
            ],
            "name": "Application"
        },
        {
            "classes": [],
            "functions": [
                {
                    "args": [
                        "any[]",
                        "any"
                    ],
                    "argsDesc": [
                        "The array to check for the item's existence in",
                        "The item to search for"
                    ],
                    "desc": "Returns whether an item in an array",
                    "example": "// Predefines\nusing Console;\nusing Array;\n\n// EXAMPLE 1 - Illustration of Array.Length\nstring[] sentence = new string[5];\n\nsentence[1] = \"Sometimes\";\nsentence[2] = \"I\";\nsentence[3] = \"dream\";\nsentence[4] = \"about\";\nsentence[5] = \"cheese\"; // CHEEEEEEEESE\n\n//See if array contains the string \"cheese\"\n\nif(Array.Contains(sentence, \"cheese\")){\n    Console.WriteLine(\"Array contains 'cheese'\");   \n} else {\n    Console.WriteLine(\"Array doesn't contains 'cheese'\"); \n}",
                    "name": "Contains",
                    "returnDesc": "True if the array contains the item, false if it does not",
                    "returnType": "bool"
                },
                {
                    "args": [
                        "any[]",
                        "any"
                    ],
                    "argsDesc": [
                        "The array to search for the specified item in",
                        "The item you want to find the index of"
                    ],
                    "desc": "Returns the index (position) of an first instance of an item in an array",
                    "example": "// Predefines\nusing Console;\nusing Array;\n\n// EXAMPLE 1 - Illustration of Array.Length\nstring[] sentence = new string[5];\n\nsentence[1] = \"Sometimes\";\nsentence[2] = \"I\";\nsentence[3] = \"dream\";\nsentence[4] = \"about\";\nsentence[5] = \"cheese\"; // CHEEEEEEEESE\n\n//Find Index of the string \"cheese\"\n\nnumber index = Array.IndexOf(sentence, \"cheese\");\n\n//Print out the index\n\nConsole.WriteLine(index);",
                    "name": "IndexOf",
                    "returnDesc": "The index of the item in the array, or -1 if it isn't present",
                    "returnType": "number"
                },
                {
                    "args": [
                        "any[]"
                    ],
                    "argsDesc": [
                        "The array to get the length of"
                    ],
                    "desc": "Returns the length (size) of the array",
                    "example": "// Predefines\nusing Console;\nusing Array;\n\n// EXAMPLE 1 - Illustration of Array.Length\nstring[] sentence = new string[5];\n\nsentence[1] = \"Sometimes\";\nsentence[2] = \"I\";\nsentence[3] = \"dream\";\nsentence[4] = \"about\";\nsentence[5] = \"cheese\"; // CHEEEEEEEESE\n\nConsole.WriteLine(\"There are \" .. Array.Length(sentence) .. \" words in this sentence!\");\n\n// OUTPUT: \"There are 5 words in this sentence!\"\n\n// EXAMPLE 2 - Application of Array.Length\nnumber[] intervals = [1, 2, 5, 10];\n\n// Calculate the length once. In a loop, every time it's done with an iteration, it recalculates the condition to check if it needs to proceed\n// with the next iteration. Calling Array.Length every time in between iterations can be expensive.\n\nnumber len = Array.Length(intervals);\n\nnumber i = 1;\nwhile(i < len) // Not counting the last index, so we don't error by indexing out of bounds\n{\n    // Calculate the interval\n    number nextIndex = i + 1;\n    number interval = intervals[nextIndex] - intervals[i];\n\n    Console.WriteLine(\"[Index pair \" .. i .. \", \" .. nextIndex  .. \"] Interval: \" .. interval);\n\n    i = i + 1;\n}\n\n// OUTPUTS:\n// [Index pair 1, 2] Interval: 1\n// [Index pair 2, 3] Interval: 3\n// [Index pair 3, 4] Interval: 5\n",
                    "name": "Length",
                    "returnDesc": "The length of the array",
                    "returnType": "number"
                }
            ],
            "name": "Array"
        },
        {
            "classes": [
                {
                    "functions": [
                        {
                            "desc": "Returns the account ID for the account.",
                            "name": "GetAccountID",
                            "returnDesc": "The account ID for the account.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Returns the BankAccountType object of the account.",
                            "name": "GetAccountType",
                            "returnDesc": "The BankAccountType object of the account.",
                            "returnType": "BankAccountType"
                        },
                        {
                            "desc": "Returns the account balance.",
                            "name": "GetBalance",
                            "returnDesc": "The account balance.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Returns the bank which the account belongs to.",
                            "name": "GetBank",
                            "returnDesc": "The bank which the account belongs to.",
                            "returnType": "Business"
                        },
                        {
                            "desc": "Returns the business ID for the bank which the account belongs to.",
                            "name": "GetBankID",
                            "returnDesc": "The business ID for the bank which the account belongs to.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Returns the SteamID who created the account.",
                            "name": "GetIssuedBy",
                            "returnDesc": "The SteamID who created the account.",
                            "returnType": "string"
                        },
                        {
                            "desc": "Returns the account owner SteamID.",
                            "name": "GetOwnerSteamID",
                            "returnDesc": "The account owner SteamID.",
                            "returnType": "string"
                        },
                        {
                            "desc": "Returns whether the terminal (and user) have access to manage this account.",
                            "name": "HasManagementAccess",
                            "returnDesc": "True if the terminal (and user) have access to manage this account.",
                            "returnType": "bool"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The amount to deposit."
                            ],
                            "desc": "Processes a deposit from the user of the terminal's wallet to the bank account.",
                            "name": "ProcessDeposit",
                            "returnDesc": "A StringResult representing the success of the process.",
                            "returnType": "StringResult"
                        },
                        {
                            "args": [
                                "BankAccount",
                                "number"
                            ],
                            "argsDesc": [
                                "The bank account to transfer to.",
                                "The amount to transfer."
                            ],
                            "desc": "Processes a transfer from one bank account to another.",
                            "name": "ProcessTransfer",
                            "returnDesc": "A StringResult representing the success of the process.",
                            "returnType": "StringResult"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The amount to withdraw."
                            ],
                            "desc": "Processes a withdraw from the user of the terminal's wallet to the bank account.",
                            "name": "ProcessWithdraw",
                            "returnDesc": "A StringResult representing the success of the process.",
                            "returnType": "StringResult"
                        }
                    ],
                    "name": "BankAccount"
                },
                {
                    "functions": [
                        {
                            "desc": "Returns the log amount.",
                            "name": "GetAmount",
                            "returnDesc": "The log amount.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Returns the log date.",
                            "name": "GetDate",
                            "returnDesc": "The log date.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Returns the log reason.",
                            "name": "GetReason",
                            "returnDesc": "The log reason.",
                            "returnType": "string"
                        }
                    ],
                    "name": "BankAccountLog"
                },
                {
                    "functions": [
                        {
                            "desc": "Returns the account interest %.",
                            "name": "GetInterest",
                            "returnDesc": "The account interest %.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Returns the account max balance.",
                            "name": "GetMaxBalance",
                            "returnDesc": "The account max balance.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Returns the account type name.",
                            "name": "GetName",
                            "returnDesc": "The account type name.",
                            "returnType": "string"
                        },
                        {
                            "desc": "Returns the account opening fee.",
                            "name": "GetOpeningFee",
                            "returnDesc": "The account opening fee.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Returns the account overraft limit.",
                            "name": "GetOverdraftLimit",
                            "returnDesc": "The account overraft limit.",
                            "returnType": "number"
                        }
                    ],
                    "name": "BankAccountType"
                }
            ],
            "functions": [
                {
                    "args": [
                        "Business",
                        "string"
                    ],
                    "argsDesc": [
                        "The Business object representing the bank.",
                        "The SteamID of the player to search for."
                    ],
                    "desc": "Returns an array of BankAccount objects for all the accounts found. You MUST have access to see the bank accounts holders in the desired bank!",
                    "name": "GetBankAccounts",
                    "returnDesc": "An array of BankAccount objects for all the accounts found.",
                    "returnType": "BankAccount[]"
                },
                {
                    "args": [
                        "Business"
                    ],
                    "argsDesc": [
                        "The Business object representing the bank."
                    ],
                    "desc": "Returns an array of BankAccountType objects for all the accounts found. You MUST have access to see the bank accounts in the desired bank!",
                    "name": "GetBankAccountTypes",
                    "returnDesc": "An array of BankAccountType objects for all the accounts found.",
                    "returnType": "BankAccountType[]"
                },
                {
                    "args": [],
                    "argsDesc": [],
                    "desc": "Returns an array of Business objects for all existing banks.",
                    "name": "GetBanks",
                    "returnDesc": "The Business objects.",
                    "returnType": "Business[]"
                },
                {
                    "args": [
                        "Player"
                    ],
                    "argsDesc": [
                        "The Player"
                    ],
                    "desc": "Returns the Business for a player's primary bank.",
                    "name": "GetPrimaryBank",
                    "returnDesc": "The Business object.",
                    "returnType": "Business"
                },
                {
                    "args": [
                        "Player"
                    ],
                    "argsDesc": [
                        "The Player to use to figure relevant banks."
                    ],
                    "desc": "Returns an array of Business objects for all existing banks sorted by relevance for a player. I.E. primary bank first, banks with accounts second, thens sorted by valuation.",
                    "name": "GetRelevantBanks",
                    "returnDesc": "The Business objects.",
                    "returnType": "Business[]"
                },
                {
                    "args": [
                        "BankAccount",
                        "number",
                        "number"
                    ],
                    "argsDesc": [
                        "The BankAccount.",
                        "The number of logs (Cannot be larger than 20).",
                        "The offset to fetch from. E.G fetch starting at the first log which exists, or offset by x amount."
                    ],
                    "desc": "Requests the account logs for a BankAccount Sorted newest to oldest.",
                    "name": "RequestAccountLogs",
                    "returnDesc": "A StringResult representing the success of the request.",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "BankAccount"
                    ],
                    "desc": "Requests access to manage a bank account. This allows the script to manage transactions and deposits for the account. (CAN ONLY BE USED ON PAYMENT KIOSK TERMINALS)",
                    "name": "RequestAccountManagementAccess",
                    "returnDesc": "A StringResult representing the success of the request.",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "Business"
                    ],
                    "argsDesc": [
                        "The Business object for the new primary bank."
                    ],
                    "desc": "Requests to set the primary bank for the user of the terminal.",
                    "name": "SetPrimaryBank",
                    "returnDesc": "An StringResult representing the success of the operation.",
                    "returnType": "StringResult"
                }
            ],
            "name": "Banking"
        },
        {
            "classes": [],
            "functions": [
                {
                    "args": [
                        "number",
                        "number"
                    ],
                    "argsDesc": [
                        "The first value to compare.",
                        "The second value to compare."
                    ],
                    "desc": "Performs the bitwise AND for the values specified.",
                    "name": "And",
                    "returnDesc": "Result of bitwise AND operation.",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number",
                        "number"
                    ],
                    "argsDesc": [
                        "The bits to be shifted.",
                        "Amounts of bits to shift."
                    ],
                    "desc": "Returns the arithmetically shifted value.",
                    "name": "AShift",
                    "returnDesc": "The value shifted by the specified bits.",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number",
                        "number"
                    ],
                    "argsDesc": [
                        "The value to be manipulated.",
                        "Amounts of bits to shift left by."
                    ],
                    "desc": "Returns the left shifted value.",
                    "name": "LShift",
                    "returnDesc": "The bit value shifted left by the specified bits.",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The value to be inverted."
                    ],
                    "desc": "Returns the value, but with all bits flipped. (0's become 1's, and 1's become 0's).",
                    "name": "Not",
                    "returnDesc": "The inverted bit value.",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number",
                        "number"
                    ],
                    "argsDesc": [
                        "The first value.",
                        "The second value."
                    ],
                    "desc": "Returns the bitwise OR of the values specified.",
                    "name": "Or",
                    "returnDesc": "The bitwise OR result between all numbers.",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number",
                        "number"
                    ],
                    "argsDesc": [
                        "The value to be manipulated.",
                        "Amounts of bits to rotate left by."
                    ],
                    "desc": "Returns the left rotated value.",
                    "name": "Rol",
                    "returnDesc": "Bit value rotated left by the specified bits.",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number",
                        "number"
                    ],
                    "argsDesc": [
                        "The value to be manipulated.",
                        "Amounts of bits to rotate right by."
                    ],
                    "desc": "Returns the right rotated value.",
                    "name": "Ror",
                    "returnDesc": "Bit value rotated right by the specified bits.",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number",
                        "number"
                    ],
                    "argsDesc": [
                        "The value to be manipulated.",
                        "Amounts of bits to shift right by."
                    ],
                    "desc": "Returns the right shifted value.",
                    "name": "RShift",
                    "returnDesc": "The bit value shifted right by the specified bits.",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The value to be byte swapped."
                    ],
                    "desc": "Swaps the byte order.",
                    "name": "Swap",
                    "returnDesc": "The swapped bits.",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The value to be normalized."
                    ],
                    "desc": "Normalizes the specified value and clamps it in the range of a signed 32-bit integer.",
                    "name": "ToBit",
                    "returnDesc": "Normalized Binary Value.",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number",
                        "number"
                    ],
                    "argsDesc": [
                        "The value to be normalized.",
                        "The number of digits."
                    ],
                    "desc": "Returns the hexadecimal representation of the number with the specified digits.",
                    "name": "ToHex",
                    "returnDesc": "Hex String.",
                    "returnType": "string"
                },
                {
                    "args": [
                        "number",
                        "number"
                    ],
                    "argsDesc": [
                        "The first value.",
                        "The second value."
                    ],
                    "desc": "Returns the bitwise XOR of all values specified.",
                    "name": "Xor",
                    "returnDesc": "The bitwise XOR of the provided bits.",
                    "returnType": "number"
                }
            ],
            "name": "Bit"
        },
        {
            "classes": [
                {
                    "functions": [
                        {
                            "desc": "Returns the Banner URL of the business",
                            "name": "GetBannerURL",
                            "returnDesc": "The business Banner URL",
                            "returnType": "string"
                        },
                        {
                            "desc": "Returns the biggest shareholder of the business",
                            "example": "using Console;\nusing Player;\nusing Business;\n\n// Print the name of the biggest shareholder in this company! (Typically the CEO)\nBusiness egg = Business.GetBusiness(\"Egg\");\n\n// Get the player\nstring sid = egg.GetBiggestShareholder();\nPlayer biggestShareholder = Player.GetBySteamID(sid);\n\nstring msg = \"The biggest shareholder is: \";\nif (biggestShareholder.IsValid())\n{\n    // Get their shares aswell!\n    number shares = egg.GetPlayerShares(biggestShareholder);\n    \n    // No need to control the share variable (checking if it's invalid (shares == -1), as the GetBiggestShareholder() checks if he is a\n    // shareholder interanlly. If we get returned a player, it must've been a valid shareholder!\n    msg = msg .. biggestShareholder.GetName() .. \" - \" .. sid .. \" with \" .. shares .. \" shares!\";\n}\nelse\n{\n    msg = msg .. sid;\n}\n\nConsole.WriteLine(msg);\n\n// OUTPUT:\n// The biggset shareholder is: Ventz - STEAM_0:1:34409736 with 1000 shares!\n",
                            "name": "GetBiggestShareholder",
                            "returnDesc": "The steamid of the biggest shareholder in the business",
                            "returnType": "string"
                        },
                        {
                            "desc": "Returns the value of the business",
                            "example": "using Console;\nusing Util;\nusing Business;\n\nBusiness egg = Business.GetBusiness(\"Egg\");\n\n// Show me the business value!\nif (egg.IsValid())\n{\n    Console.WriteLine(\"The business value of Egg is \" .. Util.FormatMoney(egg.GetBusinessValue()));\n}\n\n// OUTPUT:\n// The business value of Egg is $80,000,000\n",
                            "name": "GetBusinessValue",
                            "returnDesc": "How much the business is worth",
                            "returnType": "number"
                        },
                        {
                            "desc": "Returns the CEO of this business",
                            "example": "using Console;\nusing Player;\nusing Business;\n\nBusiness egg = Business.GetBusiness(\"Egg\");\n\n// Is the CEO online?\nstring sid = egg.GetCEO();\nPlayer ceo = Player.GetBySteamID(sid);\n\nif (ceo.IsValid())\n{\n    Console.WriteLine(\"The CEO of Egg (\" .. ceo.GetName() .. \") is online!\");\n}\nelse\n{\n    Console.WriteLine(\"The CEO of Egg is NOT online!\");\n}\n\n// OUTPUT:\n// The CEO of Egg (Ventz) is online!\n",
                            "name": "GetCEO",
                            "returnDesc": "The steamid of the CEO",
                            "returnType": "string"
                        },
                        {
                            "desc": "Returns the CEO of this business's Name",
                            "name": "GetCEOName",
                            "returnDesc": "The name of the CEO",
                            "returnType": "string"
                        },
                        {
                            "args": [
                                "Player"
                            ],
                            "argsDesc": [
                                "The Player to get the join date for"
                            ],
                            "desc": "Returns the time (in system-time seconds) of when the player joined the business",
                            "example": "using Console;\nusing Player;\nusing Business;\nusing Util;\n\n// Get the join date of the CEO\nBusiness egg = Business.GetBusiness(\"Egg\");\n\n// Get player\nstring sid = egg.GetCEO();\nPlayer ceo = Player.GetBySteamID(sid);\n\nif (ceo.IsValid())\n{\n    // Get the date\n    number joined = egg.GetEmployeeJoinDate(ceo);\n    string date = Util.Date(joined, \"%d/%m/%Y\");\n    \n    Console.WriteLine(joined);\n    Console.WriteLine(date);\n}\n\n// OUTPUT:\n// 1556152515\n// 25/04/2019\n",
                            "name": "GetEmployeeJoinDate",
                            "returnDesc": "The amount of time past the server systems unix epoch representing when the player joined the business (See https://wiki.facepunch.com/gmod/os.time for reference). Returns -1 as error fallback",
                            "returnType": "number"
                        },
                        {
                            "args": [
                                "Player"
                            ],
                            "argsDesc": [
                                "The player we want to find the role of"
                            ],
                            "desc": "Returns the role of a player if they have one within the business",
                            "example": "using Console;\nusing Player;\nusing Business;\n\nBusiness egg = Business.GetBusiness(\"Egg\");\n\nPlayer ventz = Player.GetBySteamID(\"STEAM_0:1:34409736\");\nPlayer anders = Player.GetBySteamID(\"STEAM_0:0:50203401\");\n\nConsole.WriteLine(egg.GetEmployeeRole(ventz));\nConsole.WriteLine(egg.GetEmployeeRole(anders));\n\n// OUTPUT:\n// CEO\n// N/A\n",
                            "name": "GetEmployeeRole",
                            "returnDesc": "Their role, N/A otherwise",
                            "returnType": "string"
                        },
                        {
                            "desc": "Returns a list of all players employed with this business (including the CEO)",
                            "example": "using Console;\nusing Array;\nusing Player;\nusing Business;\n\n// Print all the employees of this business!\nBusiness egg = Business.GetBusiness(\"Egg\");\nstring[] employees = egg.GetEmployees();\n\nnumber len = Array.Length(employees);\nnumber i = 1;\n\nwhile (i < len + 1)\n{\n    // Get the player\n    string sid = employees[i];\n    Player ply = Player.GetBySteamID(sid);\n    \n    if (ply.IsValid())\n    {\n        Console.WriteLine(ply.GetName());\n    }\n    \n    i = i + 1;\n}\n\n// OUTPUT:\n// Ventz\n",
                            "name": "GetEmployees",
                            "returnDesc": "The array containing the steamids of all employees",
                            "returnType": "string[]"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The role in the business the player has to be"
                            ],
                            "desc": "Returns a list of employees with a given role",
                            "example": "using Console;\nusing Array;\nusing Player;\nusing Business;\n\n// Get all employees for all the different roles and tell me how many of each of them there are, aswell as the whole list!\nBusiness egg = Business.GetBusiness(\"Egg\");\nstring[] roles = egg.GetRoles();\n\nnumber len = Array.Length(roles);\nnumber i = 1;\n\nwhile (i < len + 1)\n{\n    // Index the role\n    string role = roles[i];\n    \n    // Get all the employees with this role\n    string[] employees = egg.GetEmployeesByRole(role);\n    \n    number amt = Array.Length(employees);\n    number j = 1;\n    \n    Console.WriteLine(\"Employees with the role '\" .. role .. \"' (\" .. amt .. \"):\");\n    \n    if (amt != 0) \n    {\n        while (j < amt + 1)\n        {\n            // Get the player\n            string sid = employees[j];\n            Player ply = Player.GetBySteamID(sid);\n            \n            if (ply.IsValid())\n            {\n                Console.WriteLine(ply.GetName() .. \" - \" .. sid);\n            }\n            else\n            {\n                Console.WriteLine(sid);\n            }\n            \n            j = j + 1;\n        }        \n    }\n    else // Fallback as \"None\" if there aren't any\n    {\n        Console.WriteLine(\"None\");\n    }\n    \n    i = i + 1;\n}\n\n// OUTPUT:\n// Employees with the role 'Recruit' (0):\n// None\n// Employees with the role 'CEO' (1):\n// Ventz - STEAM_0:1:34409736\n",
                            "name": "GetEmployeesByRole",
                            "returnDesc": "The array containing the steamids of all the employees with the specified role",
                            "returnType": "string[]"
                        },
                        {
                            "desc": "Returns the Icon URL of the business",
                            "name": "GetIconURL",
                            "returnDesc": "The business Icon URL",
                            "returnType": "string"
                        },
                        {
                            "desc": "Returns the id of the business",
                            "example": "using Console;\nusing Business;\n\nBusiness vbank = Business.GetBusinessByID(1);\nBusiness blu = Business.GetBusinessByID(2);\n\nConsole.WriteLine(vbank.GetID());\nConsole.WriteLine(blu.GetID());\n\n// OUTPUT:\n// 1\n// 2\n",
                            "name": "GetID",
                            "returnDesc": "The business id",
                            "returnType": "number"
                        },
                        {
                            "desc": "Returns the liabilities of the business. You MUST have access to the treasury in the desired bank!",
                            "example": "    using Console;\n    using Util;\n    using Business;\n    \n    Business egg = Business.GetBusiness(\"Egg\");\n    \n    // Show me the business liabilities!\n    if (egg.IsValid())\n    {\n    Console.WriteLine(\"The business liabilities of Egg is \" .. Util.FormatMoney(egg.GetLiabilitiesValue()));\n    }\n    \n    // OUTPUT:\n    // The business liabilities of Egg is $80,000,000\n    ",
                            "name": "GetLiabilitiesValue",
                            "returnDesc": "How much the business has in liabilities",
                            "returnType": "number"
                        },
                        {
                            "desc": "Returns the name of the business",
                            "example": "using Console;\nusing Business;\n\nBusiness egg = Business.GetBusiness(\"Egg\");\nBusiness hive = Business.GetBusiness(\"Hive\");\n\nConsole.WriteLine(egg.GetName());\nConsole.WriteLine(hive.GetName());\n\n// OUTPUT:\n// Egg\n// Hive\n",
                            "name": "GetName",
                            "returnDesc": "The business name",
                            "returnType": "string"
                        },
                        {
                            "desc": "Returns the parent of the business",
                            "example": "                        using Console;\n                        using Business;\n                        \n                        //Get the subsidiary business\n                        Business egg = Business.GetBusiness(\"Egg\");\n                        \n                        //Get the parent business\n                        Business egg2 = egg.GetParent();\n                        \n                        //Print the name of the parent business\n                        Console.WriteLine(egg2.GetName());\n                    ",
                            "name": "GetParent",
                            "returnDesc": "The parent of the business",
                            "returnType": "Business"
                        },
                        {
                            "args": [
                                "Player"
                            ],
                            "argsDesc": [
                                "The Player to get shares of"
                            ],
                            "desc": "Returns the shares of a given player",
                            "example": "using Console;\nusing Player;\nusing Array;\nusing Business;\n\n// Display all the shareholders in this business, along with their amount of shares!\nBusiness egg = Business.GetBusiness(\"Egg\");\nstring[] shareholders = egg.GetShareholders();\n\nnumber len = Array.Length(shareholders);\nnumber i = 1;\n\nwhile (i < len + 1)\n{\n    // Get our player\n    string sid = shareholders[i];\n    Player ply = Player.GetBySteamID(sid);\n    \n    if (ply.IsValid())\n    {\n        // Get their shares\n        number shares = egg.GetPlayerShares(ply);\n        \n        // Validate the shares. Since we're looping over the shareholders array, it should be almost guaranteed that they do have shares.\n        // It's always good practice to add a failsafe anyway though, just for good measure.\n        \n        if (shares != (0-1)) // Remember, if the above function returns -1, it's because we don't have any shares!\n        {\n            Console.WriteLine(ply.GetName() .. \" - \" .. shares .. \" shares\");\n        }\n    }\n    \n    i = i + 1;\n}\n\n// OUTPUT:\n// Ventz - 1000 shares\n",
                            "name": "GetPlayerShares",
                            "returnDesc": "The player's shares. Returns -1 if the player doesn't have any.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Returns all the roles for the business",
                            "example": "using Console;\nusing Array;\nusing Business;\n\nBusiness egg = Business.GetBusiness(\"Egg\");\nstring[] roles = egg.GetRoles();\n\nnumber len = Array.Length(roles);\nnumber i = 1;\n\nConsole.WriteLine(len);\n\nwhile (i < len + 1)\n{\n    Console.WriteLine(roles[i]);\n    \n    i = i + 1;\n}\n\n// OUTPUT:\n// 2\n// Recruit\n// CEO\n",
                            "name": "GetRoles",
                            "returnDesc": "The array of all the roles in the business",
                            "returnType": "string[]"
                        },
                        {
                            "desc": "Returns the amount of shares that exists",
                            "example": "using Console;\nusing Business;\n\nBusiness egg = Business.GetBusiness(\"Egg\");\n\nConsole.WriteLine(\"Total amount of shares: \" .. egg.GetShareCount());\n\n// OUTPUT:\n// Total amount of shares: 1000\n",
                            "name": "GetShareCount",
                            "returnDesc": "The total amount of shares. Returns -1 as an error fallback",
                            "returnType": "number"
                        },
                        {
                            "desc": "Returns all the shareholders for this businesss",
                            "example": "using Console;\nusing Player;\nusing Array;\nusing Business;\n\n// Display all the shareholders in this business, along with their amount of shares!\nBusiness egg = Business.GetBusiness(\"Egg\");\nstring[] shareholders = egg.GetShareholders();\n\nnumber len = Array.Length(shareholders);\nnumber i = 1;\n\nwhile (i < len + 1)\n{\n    // Get our player\n    string sid = shareholders[i];\n    Player ply = Player.GetBySteamID(sid);\n    \n    if (ply.IsValid())\n    {\n        // Get their shares\n        number shares = egg.GetPlayerShares(ply);\n        \n        // Validate the shares. Since we're looping over the shareholders array, it should be almost guaranteed that they do have shares.\n        // It's always good practice to add a failsafe anyway though, just for good measure.\n        \n        if (shares != -1) // Remember, if the above function returns -1, it's because we don't have any shares!\n        {\n            Console.WriteLine(ply.GetName() .. \" - \" .. shares .. \" shares\");\n        }\n    }\n    \n    i = i + 1;\n}\n\n// OUTPUT:\n// Ventz - 1000 shares\n",
                            "name": "GetShareholders",
                            "returnDesc": "The array containing steamids of the shareholders",
                            "returnType": "string[]"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The amount of shares (Can only be between [0; 1000]. Is clamped internally). Fallbacks as '-1' if something goes wrong (e.g the business is invalid)."
                            ],
                            "desc": "Returns the monetary value of given shares",
                            "example": "using Console;\nusing Util;\nusing Business;\n\n// Figure out how much each share quantity is worth in a customized interval\nBusiness egg = Business.GetBusiness(\"Egg\");\n\nfunction ShareInterval(number interval)\n{\n    number iterations = egg.GetShareCount() / interval;\n    \n    number i = 1;\n    while (i < iterations + 1)\n    {\n        // Calculate our shares\n        number sharesCount = i * interval;\n        number value = egg.GetSharesValue(sharesCount);\n        \n        Console.WriteLine(\"[\" .. sharesCount .. \" shares]: \" .. Util.FormatMoney(value));\n        \n        i = i + 1;\n    }\n}\n\nConsole.WriteLine(\"Series 1 (interval = 100):\");\nShareInterval(100);\nConsole.WriteLine(\"Series 2 (interval = 250):\");\nShareInterval(250);\n\n// OUTPUT:\n// Series 1 (interval = 100):\n// [100 shares]: $8,000,000\n// [200 shares]: $16,000,000\n// [300 shares]: $24,000,000\n// [400 shares]: $32,000,000\n// [500 shares]: $40,000,000\n// [600 shares]: $48,000,000\n// [700 shares]: $56,000,000\n// [800 shares]: $64,000,000\n// [900 shares]: $72,000,000\n// [1000 shares]: $80,000,000\n// Series 2 (interval = 250):\n// [250 shares]: $20,000,000\n// [500 shares]: $40,000,000\n// [750 shares]: $60,000,000\n// [1000 shares]: $80,000,000\n",
                            "name": "GetSharesValue",
                            "returnDesc": "The monetary value of the given amount of shares for this business",
                            "returnType": "number"
                        },
                        {
                            "desc": "Returns the subsidiaries of the business",
                            "example": "                        using Console;\n                        using Business;\n                        using Array;\n                        \n                        //Get the parent business\n                        Business egg = Business.GetBusiness(\"RK Inc\");\n                        \n                        //Get the subsidiary businesses\n                        Business[] eggs = egg.GetSubsidiaries();\n                        \n                        //Print the name of the subsidiaries\n                        number i = 1;\n                        \n                        while(Array.Length(eggs) >= i) {\n                            \n                            Console.WriteLine(eggs[i].GetName());\n                            \n                            i = i + 1;\n                        }\n                    ",
                            "name": "GetSubsidiaries",
                            "returnDesc": "The subsidiaries of the business",
                            "returnType": "Business[]"
                        },
                        {
                            "desc": "Returns the treasury of the business. You MUST have access to the treasury in the desired bank!",
                            "example": "using Console;\nusing Util;\nusing Business;\n\nBusiness egg = Business.GetBusiness(\"Egg\");\n\n// Show me the business treasury!\nif (egg.IsValid())\n{\n    Console.WriteLine(\"The business treasury of Egg is \" .. Util.FormatMoney(egg.GetTreasuryValue()));\n}\n\n// OUTPUT:\n// The business treasury of Egg is $80,000,000\n",
                            "name": "GetTreasuryValue",
                            "returnDesc": "How much the business has in its treasury",
                            "returnType": "number"
                        },
                        {
                            "desc": "Returns the business type of the business",
                            "example": "using Console;\nusing Business;\n\nBusiness egg = Business.GetBusiness(\"Egg\");\nBusiness hive = Business.GetBusiness(\"Hive\");\n\nConsole.WriteLine(egg.GetType());\nConsole.WriteLine(hive.GetType());\n\n// OUTPUT:\n// bank\n// standard\n",
                            "name": "GetType",
                            "returnDesc": "The business type",
                            "returnType": "string"
                        },
                        {
                            "args": [
                                "Player"
                            ],
                            "argsDesc": [
                                "The Player to check"
                            ],
                            "desc": "Returns whether the Player is an employee of a business",
                            "example": "using Console;\nusing Business;\nusing Player;\nusing Array;\n\n// Check if these steamIDs are a part of the Egg business\nstring[] checks = [\"STEAM_0:1:34409736\", \"STEAM_0:0:50203401\", \"STEAM_0:0:4423349\", \"STEAM_0:1:54234771\"];\n\nBusiness business = Business.GetBusiness(\"Egg\");\n\nnumber len = Array.Length(checks);\nnumber i = 1;\n\nwhile (i < len + 1)\n{\n    // Get our player\n    string sid = checks[i];\n    Player ply = Player.GetBySteamID(sid);\n    \n    if (ply.IsValid())\n    {\n        if (business.IsEmployee(ply))\n        {\n            Console.WriteLine(ply.GetName() .. \" is an employee of Egg!\");\n        }\n        else\n        {\n            Console.WriteLine(ply.GetName() .. \" is NOT an employee of Egg!\");\n        }\n    }\n    else\n    {\n        Console.WriteLine(sid .. \" is NOT an employee!\");\n    }\n    \n    i = i + 1;\n}\n\n// OUTPUT:\n// Ventz is an employee of Egg!\n// Void is NOT an employee of Egg!\n// Relman civilgamers.com is NOT an employee of Egg!\n// Hydro is NOT an employee of Egg!\n",
                            "name": "IsEmployee",
                            "returnDesc": "True if the player is an employee of this business",
                            "returnType": "bool"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The role to be validated"
                            ],
                            "desc": "Returns whether the role is valid within the business",
                            "example": "using Console;\nusing Business;\n\nBusiness business = Business.GetBusiness(\"Egg\");\n\nfunction RoleExists(string role)\n{\n    if (business.IsRoleValid(role))\n    {\n        Console.WriteLine(role .. \" is a valid role!\");\n    }\n    else\n    {\n        Console.WriteLine(role .. \" is an invalid role!\");\n    }\n}\n\nRoleExists(\"Banana\");\nRoleExists(\"Nil Bug\");\nRoleExists(\"CEO\");\nRoleExists(\"Cake\");\n\n// OUTPUT:\n// Banana is an invalid role!\n// Nil Bug is an invalid role!\n// CEO is a valid role!\n// Cake is an invalid role!\n",
                            "name": "IsRoleValid",
                            "returnDesc": "True if the role is valid, false otherwise",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Returns whether the business is valid",
                            "example": "using Console;\nusing Business;\n\nBusiness business = Business.GetBusiness(\"CivilGamers\");\n\nif (business.IsValid() == false)\n{\n    Console.WriteLine(\"Invalid business!\");\n}\n\n// OUTPUT:\n// Invalid business!\n",
                            "name": "IsValid",
                            "returnDesc": "True if the business is valid, false otherwise",
                            "returnType": "bool"
                        }
                    ],
                    "name": "Business"
                }
            ],
            "functions": [
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The business name (Case sensitive)"
                    ],
                    "desc": "Returns a data structure containing publicly available data surrounding a business. A business object is dynamic and updates in realtime, along with its referenced business.",
                    "example": "using Console;\nusing Business;\nusing Array;\nusing Player;\n\nBusiness business = Business.GetBusiness(\"Egg\");\nstring[] employees = business.GetEmployees();\n\nnumber len = Array.Length(employees);\nnumber i = 1;\n\n// Print all the names of the employees and their role (if they're online)\nwhile (i < len + 1)\n{\n    string sid = employees[i];\n    Player ply = Player.GetBySteamID(sid);\n    \n    if (ply.IsValid())\n    {\n        // Get their role\n        string role = business.GetEmployeeRole(ply);\n        \n        Console.WriteLine(ply.GetName() .. \": \" .. role);\n    }\n    else\n    {\n        Console.WriteLine(\"Player wasn't online (\" .. sid .. \")!\");\n    }\n    \n    i = i + 1;\n}\n\n// OUTPUT:\n// Ventz: CEO\n// Player wasn't online (STEAM_0:0:50203401)\n",
                    "name": "GetBusiness",
                    "returnDesc": "The business object",
                    "returnType": "Business"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The business id"
                    ],
                    "desc": "Returns a data structure containing publicly available data surrounding a business. A business object is dynamic and updates in realtime, along with its referenced business.",
                    "example": "using Console;\nusing Business;\nusing Array;\nusing Player;\n\nBusiness business = Business.GetBusinessByID(1);\nstring[] employees = business.GetEmployees();\n\nnumber len = Array.Length(employees);\nnumber i = 1;\n\n// Print all the names of the employees and their role (if they're online)\nwhile (i < len + 1)\n{\n    string sid = employees[i];\n    Player ply = Player.GetBySteamID(sid);\n    \n    if (ply.IsValid())\n    {\n        // Get their role\n        string role = business.GetEmployeeRole(ply);\n        \n        Console.WriteLine(ply.GetName() .. \": \" .. role);\n    }\n    else\n    {\n        Console.WriteLine(\"Player wasn't online (\" .. sid .. \")!\");\n    }\n    \n    i = i + 1;\n}\n\n// OUTPUT:\n// Ventz: CEO\n// Player wasn't online (STEAM_0:0:50203401)\n",
                    "name": "GetBusinessByID",
                    "returnDesc": "The business object",
                    "returnType": "Business"
                },
                {
                    "args": [
                        "Player"
                    ],
                    "argsDesc": [
                        "The player"
                    ],
                    "desc": "Returns an array containing all the businesses a player is employed at.",
                    "example": "using Console;\nusing Business;\nusing Array;\nusing Player;\n\nPlayer ply = Player.GetBySteamID(\"STEAM_0:0:64651161\");\n\nBusiness[] businesses = Business.GetEmployedAt(ply);\n\nnumber len = Array.Length(businesses);\nnumber i = 1;\n\n// Print all the names of the businesses a player is employed at\nwhile (i < len + 1)\n{\n    Business business = businesses[i];\n\n    Console.WriteLine(business.GetName());\n\n    i = i + 1;\n}",
                    "name": "GetEmployedAt",
                    "returnDesc": "An array of businesses",
                    "returnType": "Business[]"
                },
                {
                    "args": [
                        "string",
                        "Player"
                    ],
                    "argsDesc": [
                        "The business name (Case sensitive)",
                        "The Player to check"
                    ],
                    "desc": "Returns a given players role within a business",
                    "example": "using Console;\nusing Business;\nusing Player;\n\nPlayer ply = Player.GetBySteamID(\"STEAM_0:1:34409736\");\nstring role = Business.GetRole(\"Egg\", ply);\n\nif (role == \"CEO\")\n{\n    Console.WriteLine(\"The official CEO of Egg: \" .. ply.GetName());\n}\n\n// OUTPUT:\n// The official CEO of Egg: Ventz\n",
                    "name": "GetRole",
                    "returnDesc": "The role of the given player, N/A otherwise",
                    "returnType": "string"
                },
                {
                    "args": [
                        "string",
                        "Player"
                    ],
                    "argsDesc": [
                        "The business name (Case sensitive)",
                        "The Player to check"
                    ],
                    "desc": "Returns whether the Player is an employee of a business",
                    "example": "using Console;\nusing Business;\nusing Player;\n\nPlayer ventz = Player.GetBySteamID(\"STEAM_0:1:34409736\");\n\nif (ventz.IsValid())\n{\n    bool isCeo = Business.IsCEO(\"Egg\", ventz);\n    \n    if (isCeo)\n    {\n        Console.WriteLine(\"Ventz is the CEO!\");\n    }\n    else\n    {\n        Console.WriteLine(\"Ventz is NOT the CEO!\");\n    }\n}\n\n// OUTPUT:\n// Ventz is the CEO!\n",
                    "name": "IsCEO",
                    "returnDesc": "True if the player is the CEO of the business",
                    "returnType": "bool"
                },
                {
                    "args": [
                        "string",
                        "Player"
                    ],
                    "argsDesc": [
                        "The business name (Case sensitive)",
                        "The Player to check"
                    ],
                    "desc": "Returns whether the Player is an employee of a business",
                    "example": "using Console;\nusing Player;\nusing Business;\n\nPlayer ply = Player.GetBySteamID(\"STEAM_0:0:50203401\");\n\nif (Business.IsEmployeeOf(\"Big Bonk\", ply))\n{\n    Console.WriteLine(ply.GetName() .. \" is a member of Big Bonk!\")\n}\n// Business.IsEmployeeOf checks if the player is invalid internally, guaranteeing that we can call ply.GetName() safely above. If we returned false,\n// it may be because our player WASN'T valid. Let's check this before continueing:\nelse\n{\n    if (ply.IsValid()) \n    {\n        Console.WriteLine(ply.GetName() .. \" is NOT a member of Big Bonk!\")\n    }\n    else // We must be invalid :c\n    {\n        Console.WriteLine(\"Player was invalid!\")\n    }\n}\n",
                    "name": "IsEmployeeOf",
                    "returnDesc": "True if the player is an employee of this business",
                    "returnType": "bool"
                }
            ],
            "name": "Business"
        },
        {
            "classes": [],
            "functions": [
                {
                    "args": [],
                    "desc": "Clears the terminal console",
                    "name": "Clear",
                    "returnType": "Unknown"
                },
                {
                    "args": [],
                    "desc": "Gets the current directory of the Maxnet terminal",
                    "example": "using Console;\n                \n// This puts the current directory path in the variable.\n\nstring directoryPath = Console.GetCurrentDirectory();",
                    "name": "GetCurrentDirectory",
                    "returnDesc": "The directory string",
                    "returnType": "string"
                },
                {
                    "args": [],
                    "desc": "Gets the last known text near the carat of the code editor.",
                    "name": "GetTextEditorText",
                    "returnDesc": "The closest 30 lines near the carat of the code editor.",
                    "returnType": "string"
                },
                {
                    "args": [],
                    "desc": "Waits for console input and returns it once received",
                    "example": "using Console;\n                \n// Console.ReadLine pauses the program until a command is typed.\n// When something is typed in console, it will be assigned to the variable.\n// This will also prevent the input from being processed as a command on the terminal.\n\nstring text = Console.ReadLine();",
                    "name": "ReadLine",
                    "returnDesc": "The text entered in the console",
                    "returnType": "string"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The directory string"
                    ],
                    "desc": "Sets the current directory of the Maxnet terminal",
                    "example": "using Console;\n                \n// This sets the directory to \"r/documents\"\n\nbool success = Console.SetCurrentDirectory(\"r/documents\");\n\n// If the directory was not found, this will return false.\n\nif(success){\n    Console.WriteLine(\"The directory was changed successfully!\");\n}else{\n    Console.WriteLine(\"The directory was not found!\");\n}",
                    "name": "SetCurrentDirectory",
                    "returnDesc": "Whether the directory was successfully changed",
                    "returnType": "bool"
                },
                {
                    "args": [
                        "any"
                    ],
                    "argsDesc": [
                        "The text to output"
                    ],
                    "desc": "Writes a line of text to the terminal console",
                    "example": "using Console;\n\n// Prints \"Hello World\" on the terminal console.\n\nConsole.WriteLine(\"Hello World\");",
                    "name": "WriteLine",
                    "returnType": "Unknown"
                }
            ],
            "name": "Console"
        },
        {
            "classes": [
                {
                    "functions": [
                        {
                            "desc": "Gets the buttons key number (See https://wiki.facepunch.com/gmod/Enums/KEY)",
                            "name": "GetKeyNumber",
                            "returnDesc": "The buttons key number",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the name of the device",
                            "name": "GetName",
                            "returnDesc": "The name of the device",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets whether the button is pressed down",
                            "example": "using Device;\n\nButtonDevice device = Device.FindButton(\"MyButton\");\nbool pressed = device.IsPressed(); // True if the button is pressed down!\n                    ",
                            "name": "IsPressed",
                            "returnDesc": "True if the button is pressed down",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Gets whether the button is in toggle mode",
                            "example": "using Device;\n\nButtonDevice device = Device.FindButton(\"MyButton\");\nbool pressed = device.IsToggle(); // True if the button has toggle mode on!\n                    ",
                            "name": "IsToggle",
                            "returnDesc": "True if the button is in toggle mode",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Returns whether the button is valid",
                            "name": "IsValid",
                            "returnDesc": "True if the button is valid",
                            "returnType": "bool"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The key number to set"
                            ],
                            "desc": "Sets the buttons key number (See https://wiki.facepunch.com/gmod/Enums/KEY)",
                            "example": "using Device;\n\nButtonDevice device = Device.FindButton(\"MyButton\");\ndevice.SetNumpadKey(38); // 38 Is 'Numpad 1' keyboard button\n                    ",
                            "name": "SetKeyNumber",
                            "returnType": "Unknown"
                        }
                    ],
                    "name": "ButtonDevice"
                },
                {
                    "functions": [
                        {
                            "desc": "Gets the name of the device",
                            "name": "GetName",
                            "returnDesc": "The name of the device",
                            "returnType": "string"
                        },
                        {
                            "desc": "Returns whether the button is valid",
                            "name": "IsValid",
                            "returnDesc": "True if the button is valid",
                            "returnType": "bool"
                        }
                    ],
                    "name": "InputButtonDevice"
                },
                {
                    "functions": [
                        {
                            "desc": "Gets the Keypads denied numpad key (See https://wiki.facepunch.com/gmod/Enums/KEY)",
                            "name": "GetDeniedNumpadKey",
                            "returnDesc": "The Keypads denied numpad key",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the Keypads granted numpad key (See https://wiki.facepunch.com/gmod/Enums/KEY)",
                            "name": "GetGrantedNumpadKey",
                            "returnDesc": "The Keypads granted numpad key",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the name of the device",
                            "name": "GetName",
                            "returnDesc": "The name of the device",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets the Keypad passcode",
                            "name": "GetPasscode",
                            "returnDesc": "The Keypad passcode",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets whether the Keypad is secure mode",
                            "name": "GetSecureMode",
                            "returnDesc": "True if the Keypad is secure mode",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Returns whether the keypad is valid",
                            "name": "IsValid",
                            "returnDesc": "True if the keypad is valid",
                            "returnType": "bool"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The denied numpad key"
                            ],
                            "desc": "Sets the keypads denied numpad key (See https://wiki.facepunch.com/gmod/Enums/KEY)",
                            "name": "SetDeniedNumpadKey",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The granted numpad key"
                            ],
                            "desc": "Sets the keypads granted numpad key (See https://wiki.facepunch.com/gmod/Enums/KEY)",
                            "name": "SetGrantedNumpadKey",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The passcode to set on the Keypad (0 - 9999)"
                            ],
                            "desc": "Sets the Keypad passcode",
                            "name": "SetPasscode",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "bool"
                            ],
                            "argsDesc": [
                                "The value to set the Keypad secure mode"
                            ],
                            "desc": "Sets whether the Keypad is secure mode",
                            "name": "SetSecureMode",
                            "returnType": "Unknown"
                        }
                    ],
                    "name": "KeypadDevice"
                },
                {
                    "functions": [
                        {
                            "desc": "Gets the name of the device",
                            "name": "GetName",
                            "returnDesc": "The name of the device",
                            "returnType": "string"
                        },
                        {
                            "desc": "Returns whether the device is valid",
                            "name": "IsValid",
                            "returnDesc": "True if the device is valid",
                            "returnType": "bool"
                        }
                    ],
                    "name": "MetalDetectorDevice"
                },
                {
                    "functions": [
                        {
                            "desc": "Gets the name of the device",
                            "name": "GetName",
                            "returnDesc": "The name of the device",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets the range of the motion detector",
                            "example": "using Device;\n\n// Finds a motion detector device with the name \"My Motion Detector\" and gets its range\nMotionDetectorDevice detector = Device.FindMotionDetector(\"My Motion Detector\");\nnumber range = detector.GetRange();",
                            "name": "GetRange",
                            "returnDesc": "The range of the motion detector",
                            "returnType": "number"
                        },
                        {
                            "desc": "Returns whether the device is valid",
                            "name": "IsValid",
                            "returnDesc": "True if the device is valid",
                            "returnType": "bool"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The range to set on the detector (0-400)"
                            ],
                            "desc": "Sets the range of the motion detector",
                            "example": "using Device;\n\n// Finds a motion detector device with the name \"My Motion Detector\" and set its range\nMotionDetectorDevice detector = Device.FindMotionDetector(\"My Motion Detector\");\ndetector.SetRange(300);",
                            "name": "SetRange",
                            "returnType": "Unknown"
                        }
                    ],
                    "name": "MotionDetectorDevice"
                },
                {
                    "functions": [
                        {
                            "desc": "Activates the key on the owner of the device.",
                            "example": "using Device;\n\n// Finds a numpad trigger with the name \"My Numpad Trigger\" and activates the key\nNumpadTriggerDevice device = Device.FindNumpadTrigger(\"My Numpad Trigger\");\ndevice.ActivateKey();\n                    ",
                            "name": "ActivateKey",
                            "returnDesc": "True if the numpad key was activated on the owner",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Gets the trigger's key number (See https://wiki.facepunch.com/gmod/Enums/KEY)",
                            "example": "using Device;\n\n// Finds a numpad trigger with the name \"My Numpad Trigger\" and gets the key\nNumpadTriggerDevice device = Device.FindNumpadTrigger(\"My Numpad Trigger\");\nnumber key = device.GetKeyNumber();\n                    ",
                            "name": "GetKeyNumber",
                            "returnDesc": "The trigger's key number",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the name of the device",
                            "name": "GetName",
                            "returnDesc": "The name of the device",
                            "returnType": "string"
                        },
                        {
                            "desc": "Returns whether the device is valid",
                            "name": "IsValid",
                            "returnDesc": "True if the device is valid",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Releases the key on the owner of the device.",
                            "example": "using Device;\n\n// Finds a numpad trigger with the name \"My Numpad Trigger\" and presses\n// Activating then releasing immediately acts identically to pressing a button which has toggle mode OFF\nNumpadTriggerDevice device = Device.FindNumpadTrigger(\"My Numpad Trigger\");\ndevice.ActivateKey();\ndevice.ReleaseKey();\n                    ",
                            "name": "ReleaseKey",
                            "returnDesc": "True if the numpad key was released on the owner",
                            "returnType": "bool"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The key number to set"
                            ],
                            "desc": "Sets the trigger's key number (See https://wiki.facepunch.com/gmod/Enums/KEY)",
                            "example": "using Device;\n\n// Finds a numpad trigger with the name \"My Numpad Trigger\" and sets the key to 38 (See https://wiki.facepunch.com/gmod/Enums/KEY)\nNumpadTriggerDevice device = Device.FindNumpadTrigger(\"My Numpad Trigger\");\ndevice.SetKeyNumber(38); // 38 Is 'Numpad 1' keyboard button\n                    ",
                            "name": "SetKeyNumber",
                            "returnType": "Unknown"
                        }
                    ],
                    "name": "NumpadTriggerDevice"
                },
                {
                    "functions": [
                        {
                            "desc": "Gets the name of the device",
                            "name": "GetName",
                            "returnDesc": "The name of the device",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets whether the button has payment enabled",
                            "example": "using Device;\n\nPaymentButtonDevice device = Device.FindPaymentButton(\"MyButton\");\nbool paymentEnabled = device.GetPaymentEnabled();\n                    ",
                            "name": "GetPaymentEnabled",
                            "returnDesc": "True if the button has payment enabled",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Gets the price of the Payment Button Device",
                            "example": "using Device;\n\nPaymentButtonDevice device = Device.FindPaymentButton(\"MyButton\");\nnumber price = device.GetPrice();\n                    ",
                            "name": "GetPrice",
                            "returnDesc": "The price on the Payment Button",
                            "returnType": "number"
                        },
                        {
                            "desc": "Returns whether the button is valid",
                            "name": "IsValid",
                            "returnDesc": "True if the button is valid",
                            "returnType": "bool"
                        },
                        {
                            "args": [
                                "bool"
                            ],
                            "argsDesc": [
                                "The payment enabled value to set"
                            ],
                            "desc": "Sets whether the button has payment enabled",
                            "example": "using Device;\n\nPaymentButtonDevice device = Device.FindPaymentButton(\"MyButton\");\ndevice.SetPaymentEnabled(true);\n                    ",
                            "name": "SetPaymentEnabled",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The price to set (1 - 500,000)"
                            ],
                            "desc": "Sets the price of the Payment Button Device",
                            "example": "using Device;\n\nPaymentButtonDevice device = Device.FindPaymentButton(\"MyButton\");\ndevice.SetPrice(20000);\n                    ",
                            "name": "SetPrice",
                            "returnType": "Unknown"
                        }
                    ],
                    "name": "PaymentButtonDevice"
                },
                {
                    "functions": [
                        {
                            "desc": "Gets the name of the device",
                            "name": "GetName",
                            "returnDesc": "The name of the device",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets the sound name",
                            "example": "using Device;\nusing Console;\n\nSoundEmitterDevice emitter = Device.FindSoundEmitter(\"My Sound Emitter\");\nstring soundName = emitter.GetSoundName();\n\nConsole.WriteLine(\"The sound emitter's sound is: \"..soundName);",
                            "name": "GetSoundName",
                            "returnDesc": "The sound name",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets whether the sound emitter is playing a sound",
                            "example": "using Device;\nusing Console;\n\nSoundEmitterDevice emitter = Device.FindSoundEmitter(\"My Sound Emitter\");\nbool isPlaying = emitter.IsPlaying();\n\nif(isPlaying){\n    Console.WriteLine(\"The sound emitter is playing\");\n}else{\n    Console.WriteLine(\"The sound emitter is not playing\");\n}",
                            "name": "IsPlaying",
                            "returnDesc": "True if the sound emitter is playing",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Returns whether the device is valid",
                            "name": "IsValid",
                            "returnDesc": "True if the device is valid",
                            "returnType": "bool"
                        },
                        {
                            "args": [],
                            "desc": "Plays the sound emitter",
                            "example": "using Device;\n\nSoundEmitterDevice emitter = Device.FindSoundEmitter(\"My Sound Emitter\");\nemitter.PlaySound();",
                            "name": "PlaySound",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The sound name to set"
                            ],
                            "desc": "Sets the sound name (See toolgun sound list)",
                            "example": "using Device;\n\nSoundEmitterDevice emitter = Device.FindSoundEmitter(\"My Sound Emitter\");\nemitter.SetSoundName(\"alarm1\");",
                            "name": "SetSoundName",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Stops the sound emitter",
                            "example": "using Device;\nusing System;\n\nSoundEmitterDevice emitter = Device.FindSoundEmitter(\"My Sound Emitter\");\n\n// Plays the sound then stops it after one second\nemitter.PlaySound();\nSystem.Sleep(1);\nemitter.StopSound();",
                            "name": "StopSound",
                            "returnType": "Unknown"
                        }
                    ],
                    "name": "SoundEmitterDevice"
                },
                {
                    "functions": [
                        {
                            "desc": "Gets the name of the device",
                            "name": "GetName",
                            "returnDesc": "The name of the device",
                            "returnType": "string"
                        },
                        {
                            "desc": "Returns whether the device is valid",
                            "name": "IsValid",
                            "returnDesc": "True if the device is valid",
                            "returnType": "bool"
                        }
                    ],
                    "name": "TargetDevice"
                },
                {
                    "functions": [
                        {
                            "desc": "Gets the screen font size",
                            "example": "using Device;\n\n// Finds a text screen device with the name \"My Text Screen\" and gets its font size.\nTextScreenDevice screen = Device.FindTextScreen(\"My Text Screen\");\nnumber fontSize = screen.GetFontSize();",
                            "name": "GetFontSize",
                            "returnDesc": "The screen font size",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the name of the device",
                            "name": "GetName",
                            "returnDesc": "The name of the device",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets the screen text",
                            "example": "using Device;\n\n// Finds a text screen device with the name \"My Text Screen\" and gets its text.\nTextScreenDevice screen = Device.FindTextScreen(\"My Text Screen\");\nstring text = screen.GetText();",
                            "name": "GetText",
                            "returnDesc": "The screen text",
                            "returnType": "string"
                        },
                        {
                            "desc": "Returns whether the device is valid",
                            "name": "IsValid",
                            "returnDesc": "True if the device is valid",
                            "returnType": "bool"
                        },
                        {
                            "args": [
                                "number",
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The red value (0-255)",
                                "The green value (0-255)",
                                "The blue value (0-255)"
                            ],
                            "desc": "Sets the screen background color",
                            "example": "using Device;\n\n// Finds a text screen device with the name \"My Text Screen\" and set its background to a nice blue color.\nTextScreenDevice screen = Device.FindTextScreen(\"My Text Screen\");\nscreen.SetBackgroundColor(100, 100, 200);",
                            "name": "SetBackgroundColor",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The size of the font, between 1 - 100"
                            ],
                            "desc": "Sets the screen font size",
                            "example": "using Device;\n\n// Finds a text screen device with the name \"My Text Screen\" and set its font size to 40.\nTextScreenDevice screen = Device.FindTextScreen(\"My Text Screen\");\nscreen.SetFontSize(40);",
                            "name": "SetFontSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The text to set on the screen"
                            ],
                            "desc": "Sets the screen text",
                            "example": "using Device;\n\n// Finds a text screen device with the name \"My Text Screen\" and set its text to \"Cool text!\".\nTextScreenDevice screen = Device.FindTextScreen(\"My Text Screen\");\nscreen.SetText(\"Cool text!\");",
                            "name": "SetText",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The red value (0-255)",
                                "The green value (0-255)",
                                "The blue value (0-255)"
                            ],
                            "desc": "Sets the screen text color",
                            "example": "using Device;\n\n// Finds a text screen device with the name \"My Text Screen\" and set its text to red.\nTextScreenDevice screen = Device.FindTextScreen(\"My Text Screen\");\nscreen.SetTextColor(255, 0, 0);",
                            "name": "SetTextColor",
                            "returnType": "Unknown"
                        }
                    ],
                    "name": "TextScreenDevice"
                }
            ],
            "functions": [
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The device name to search for"
                    ],
                    "desc": "Finds a connected Button Devices",
                    "example": "using Device;\n\n// Finds a Button device with the name \"My Button\"\nButtonDevice button = Device.FindButton(\"My Button\");",
                    "name": "FindButton",
                    "returnDesc": "The found device",
                    "returnType": "ButtonDevice"
                },
                {
                    "args": [],
                    "argsDesc": [],
                    "desc": "Finds all connected Button Devices",
                    "example": "using Device;\n\n// Finds all Button devices\nButtonDevice[] buttons = Device.FindButtons();",
                    "name": "FindButtons",
                    "returnDesc": "The found device",
                    "returnType": "ButtonDevice[]"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The device name to search for"
                    ],
                    "desc": "Finds a connected Input Button Device",
                    "example": "using Device;\n\n// Finds an Input Button device with the name \"My Input Button\"\nInputButtonDevice button = Device.FindInputButton(\"My Input Button\");",
                    "name": "FindInputButton",
                    "returnDesc": "The found device",
                    "returnType": "InputButtonDevice"
                },
                {
                    "args": [],
                    "argsDesc": [],
                    "desc": "Finds all connected InputButton Devices",
                    "example": "using Device;\n\n// Finds all InputButton devices\nInputButtonDevice[] inputbuttons = Device.FindInputButtons();",
                    "name": "FindInputButtons",
                    "returnDesc": "The found device",
                    "returnType": "InputButtonDevice[]"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The device name to search for"
                    ],
                    "desc": "Finds a connected Keypad Device",
                    "name": "FindKeypad",
                    "returnDesc": "The found device",
                    "returnType": "KeypadDevice"
                },
                {
                    "args": [],
                    "argsDesc": [],
                    "desc": "Finds all connected Keypad Devices",
                    "example": "using Device;\n\n// Finds all Keypad devices\nKeypadDevice[] keypads = Device.FindKeypads();",
                    "name": "FindKeypads",
                    "returnDesc": "The found device",
                    "returnType": "KeypadDevice[]"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The device name to search for"
                    ],
                    "desc": "Finds a connected Metal Detector Device",
                    "example": "using Device;\n\n// Finds a metal detector device with the name \"My Metal Detector\"\nMetalDetectorDevice detector = Device.FindMetalDetector(\"My Metal Detector\");",
                    "name": "FindMetalDetector",
                    "returnDesc": "The found device",
                    "returnType": "MetalDetectorDevice"
                },
                {
                    "args": [],
                    "argsDesc": [],
                    "desc": "Finds all connected MetalDetector Devices",
                    "example": "using Device;\n\n// Finds all MetalDetector devices\nMetalDetectorDevice[] metaldetectors = Device.FindMetalDetectors();",
                    "name": "FindMetalDetectors",
                    "returnDesc": "The found device",
                    "returnType": "MetalDetectorDevice[]"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The device name to search for"
                    ],
                    "desc": "Finds a connected Motion Detector Device",
                    "example": "using Device;\n\n// Finds a motion detector device with the name \"My Motion Detector\" and set its range\nMotionDetectorDevice detector = Device.FindMotionDetector(\"My Motion Detector\");\ndetector.SetRange(300);",
                    "name": "FindMotionDetector",
                    "returnDesc": "The found device",
                    "returnType": "MotionDetectorDevice"
                },
                {
                    "args": [],
                    "argsDesc": [],
                    "desc": "Finds all connected MotionDetector Devices",
                    "example": "using Device;\n\n// Finds all MotionDetector devices\nMotionDetectorDevice[] motiondetectors = Device.FindMotionDetectors();",
                    "name": "FindMotionDetectors",
                    "returnDesc": "The found device",
                    "returnType": "MotionDetectorDevice[]"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The device name to search for"
                    ],
                    "desc": "Finds a connected Numpad Trigger Device",
                    "example": "using Device;\n\n// Finds a numpad trigger device with the name \"My Numpad Trigger\" and set its key.\nNumpadTriggerDevice device = Device.FindNumpadTrigger(\"My Numpad Trigger\");\ndevice.SetKeyNumber(38);",
                    "name": "FindNumpadTrigger",
                    "returnDesc": "The found device",
                    "returnType": "NumpadTriggerDevice"
                },
                {
                    "args": [],
                    "argsDesc": [],
                    "desc": "Finds all connected NumpadTrigger Devices",
                    "example": "using Device;\n\n// Finds all NumpadTrigger devices\nNumpadTriggerDevice[] numpadtriggers = Device.FindNumpadTriggers();",
                    "name": "FindNumpadTriggers",
                    "returnDesc": "The found device",
                    "returnType": "NumpadTriggerDevice[]"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The device name to search for"
                    ],
                    "desc": "Finds a connected Payment Button Device",
                    "example": "using Device;\n\n// Finds a payment button device with the name \"My Payment Button\" and sets its price.\nPaymentButtonDevice button = Device.FindPaymentButton(\"My Numpad Trigger\");\nnumber price = button.SetPrice(40000);",
                    "name": "FindPaymentButton",
                    "returnDesc": "The found device",
                    "returnType": "PaymentButtonDevice"
                },
                {
                    "args": [],
                    "argsDesc": [],
                    "desc": "Finds all connected PaymentButton Devices",
                    "example": "using Device;\n\n// Finds all PaymentButton devices\nPaymentButtonDevice[] paymentbuttons = Device.FindPaymentButtons();",
                    "name": "FindPaymentButtons",
                    "returnDesc": "The found device",
                    "returnType": "PaymentButtonDevice[]"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The device name to search for"
                    ],
                    "desc": "Finds a connected Sound Emitter Device",
                    "example": "using Device;\n\n// Finds a sound emitter device with the name \"My Sound Emitter\" and plays the sound on it.\nSoundEmitterDevice emitter = Device.FindSoundEmitter(\"My Sound Emitter\");\nemitter.PlaySound();",
                    "name": "FindSoundEmitter",
                    "returnDesc": "The found device",
                    "returnType": "SoundEmitterDevice"
                },
                {
                    "args": [],
                    "argsDesc": [],
                    "desc": "Finds all connected SoundEmitter Devices",
                    "example": "using Device;\n\n// Finds all SoundEmitter devices\nSoundEmitterDevice[] soundemitters = Device.FindSoundEmitters();",
                    "name": "FindSoundEmitters",
                    "returnDesc": "The found device",
                    "returnType": "SoundEmitterDevice[]"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The device name to search for"
                    ],
                    "desc": "Finds a connected Target Device",
                    "example": "using Device;\n\n// Finds a target device with the name \"My Target\"\nTargetDevice target = Device.FindTarget(\"My Target\");",
                    "name": "FindTarget",
                    "returnDesc": "The found device",
                    "returnType": "TargetDevice"
                },
                {
                    "args": [],
                    "argsDesc": [],
                    "desc": "Finds all connected Target Devices",
                    "example": "using Device;\n\n// Finds all Target devices\nTargetDevice[] targets = Device.FindTargets();",
                    "name": "FindTargets",
                    "returnDesc": "The found device",
                    "returnType": "TargetDevice[]"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The device name to search for"
                    ],
                    "desc": "Finds a connected Text Screen Device",
                    "example": "using Device;\n\n// Finds a text screen device with the name \"My Text Screen\" and set its key.\nTextScreenDevice screen = Device.FindTextScreen(\"My Text Screen\");\nscreen.SetText(\"Cool text!\");",
                    "name": "FindTextScreen",
                    "returnDesc": "The found device",
                    "returnType": "TextScreenDevice"
                },
                {
                    "args": [],
                    "argsDesc": [],
                    "desc": "Finds all connected TextScreen Devices",
                    "example": "using Device;\n\n// Finds all TextScreen devices\nTextScreenDevice[] textscreens = Device.FindTextScreens();",
                    "name": "FindTextScreens",
                    "returnDesc": "The found device",
                    "returnType": "TextScreenDevice[]"
                },
                {
                    "args": [],
                    "desc": "Gets the number of devices connected.",
                    "example": "using Device;\nusing Console;\n\nnumber deviceCount = Device.GetDeviceCount();\nConsole.WriteLine(\"There are \"..deviceCount..\" devices connected.\");",
                    "name": "GetDeviceCount",
                    "returnType": "number"
                }
            ],
            "name": "Device"
        },
        {
            "classes": [
                {
                    "functions": [
                        {
                            "args": [
                                "string",
                                "string",
                                "bool"
                            ],
                            "argsDesc": [
                                "The name of the field.",
                                "The content of the field.",
                                "Whether the field is embed. (Placed on the same line alignment)"
                            ],
                            "desc": "Sets the title for the Embed.",
                            "name": "AddField",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The Discord channel Webhook token."
                            ],
                            "desc": "Posts the embed to the Discord bot.",
                            "example": "using System;\nusing Discord;\n\n// Example webhook, find your own Webhook from your discord channel which you are admin of and replace it with that.\nstring webhook = \"32094820394823489/5ASKdaxdfjk2bLKLDjlaj3sdlJDAS3dDjsadas43KJHLSAddDnkjASDkhlgijods243LVOwqQdjsakdkAFHkjfh78AJmL\";\n\n// Creates a DiscordEmbed, adds some fields and posts it to your webhook\nDiscordEmbed embed = new DiscordEmbed();\nembed.SetTitle(\"My Webhook\");\nembed.AddField(\"First Field\", \"First Content\", true);\nembed.AddField(\"Second Field\", \"Second Content\", true);\nembed.AddField(\"Last Field\", \"Last Content\", false);\nembed.Post(webhook);",
                            "name": "Post",
                            "returnType": "StringResult"
                        },
                        {
                            "args": [],
                            "argsDesc": [],
                            "desc": "Posts the embed to the CG Discord MNScript channel. (Can only be used from Maxnet Servers)",
                            "name": "PostCG",
                            "returnType": "StringResult"
                        },
                        {
                            "args": [
                                "Secret"
                            ],
                            "argsDesc": [
                                "The Secret containing the discord Webhook."
                            ],
                            "desc": "Posts the embed to the Discord bot using a Secret.",
                            "example": "using System;\nusing Discord;\nusing Secret;\n// You need to make sure the secret is set beforehand with 'secrets add discord-webhook <YOUR_KEY_HERE>'\n// Your webhook shoud look something like \"32094820394823489/5ASKdaxdfjk2bLKLDjlaj3sdlJDAS3dDjsadas43KJHLSAddDnkjASDkhlgijods243LVOwqQdjsakdkAFHkjfh78AJmL\"\nSecret secret = Secrets.GetSecret(\"discord-webhook\");\n\n// Creates a DiscordEmbed, adds some fields and posts it to your webhook\nDiscordEmbed embed = new DiscordEmbed();\nembed.SetTitle(\"My Webhook\");\nembed.AddField(\"First Field\", \"First Content\", true);\nembed.AddField(\"Second Field\", \"Second Content\", true);\nembed.AddField(\"Last Field\", \"Last Content\", false);\nembed.PostWithSecrets(secret);",
                            "name": "PostWithSecret",
                            "returnType": "StringResult"
                        },
                        {
                            "args": [
                                "Color"
                            ],
                            "argsDesc": [
                                "The Color for the Embed."
                            ],
                            "desc": "Sets the color for the Embed.",
                            "name": "SetColor",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "bool"
                            ],
                            "argsDesc": [
                                "Whether to add a timestamp to the embed."
                            ],
                            "desc": "Sets whether to put a Timestamp for the Embed.",
                            "name": "SetTimestamp",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The title for the Embed."
                            ],
                            "desc": "Sets the title for the Embed.",
                            "name": "SetTitle",
                            "returnType": "Unknown"
                        }
                    ],
                    "name": "DiscordEmbed"
                }
            ],
            "functions": [],
            "name": "Discord"
        },
        {
            "classes": [
                {
                    "functions": [
                        {
                            "args": [],
                            "desc": "Fetches the domain records registered for the domain. This is slow.",
                            "name": "FetchRecords",
                            "returnDesc": "The domain records.",
                            "returnType": "DomainRecord[]"
                        },
                        {
                            "desc": "Gets the description set for the domain.",
                            "name": "GetDescription",
                            "returnDesc": "The domain description.",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets the name of the domain.",
                            "name": "GetName",
                            "returnDesc": "The domain name.",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets the SteamID64 of the domain owner.",
                            "name": "GetOwnerID",
                            "returnDesc": "The domain owner SteamID64.",
                            "returnType": "string"
                        }
                    ],
                    "name": "Domain"
                },
                {
                    "functions": [
                        {
                            "desc": "Gets the domain record id.",
                            "name": "GetID",
                            "returnDesc": "The domain record id.",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets the domain record name.",
                            "name": "GetName",
                            "returnDesc": "The domain record name.",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets the domain record ttl.",
                            "name": "GetTTL",
                            "returnDesc": "The domain record ttl.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the domain record type.",
                            "name": "GetType",
                            "returnDesc": "The domain record type.",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets the domain record value.",
                            "name": "GetValue",
                            "returnDesc": "The domain record value.",
                            "returnType": "string"
                        }
                    ],
                    "name": "DomainRecord"
                }
            ],
            "functions": [
                {
                    "args": [
                        "Secret",
                        "string"
                    ],
                    "argsDesc": [
                        "Your secret domain key ( see https://portal.civilnetworks.net/maxnet/domains )",
                        "The domain URL. ( E.G mn.mydomain.com )"
                    ],
                    "desc": "Binds the terminals IP to the domain by creating an IP record.\nSee https://portal.civilnetworks.net/maxnet/domains for more information",
                    "example": "using Console;\nusing System;\nusing Util;\nusing Secrets;\nusing DNS;\n\n// Binds the current terminals IP to the domain\n// You must obtain a domain key from the DNS service ( https://portal.civilnetworks.net/maxnet/domains )\n\nSecret domainKeySecret = Secrets.GetSecret(\"my secret domain key\");\nstring url = \"mn.mydomain.com\";\n\nStringResult result = DNS.BindDomainToIP(domainKeySecret, url);\n\nif (result.GetResult()) {\n    Console.WriteLine(\"Domain binded!\");\n} else {\n    Console.WriteLine(\"Error: \"..result.GetString());\n}",
                    "name": "BindDomainToIP",
                    "returnDesc": "A StringResult detailing the success or failure of the operation",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "Secret",
                        "string",
                        "string",
                        "string",
                        "string",
                        "number"
                    ],
                    "argsDesc": [
                        "Your secret domain key ( see https://portal.civilnetworks.net/maxnet/domains )",
                        "The domain name.",
                        "The record name ( Leave blank to use the root domain name )",
                        "The record type ( IP, TXT, etc.. )",
                        "The record value",
                        "The record TTL ( Recommend 300 )"
                    ],
                    "desc": "Creates or updates a record on a domain.\nSee https://portal.civilnetworks.net/maxnet/domains for more information",
                    "example": "using Console;\nusing System;\nusing Util;\nusing Secrets;\nusing DNS;\n\n// Creates or updates a domain record\n// You must obtain a domain key from the DNS service ( https://portal.civilnetworks.net/maxnet/domains )\n\nSecret domainKeySecret = Secrets.GetSecret(\"my secret domain key\");\nstring domainName = \"yourdomain.com\";\nstring recordName = \"www\";\nstring recordType = \"TXT\";\nstring recordValue = \"My domain value\";\n\nStringResult result = DNS.CreateRecord(domainKeySecret, domainName, recordName, recordType, recordValue, 300);\n\nif (result.GetResult()) {\n    Console.WriteLine(\"Domain record updated successfully!\");\n} else {\n    Console.WriteLine(\"Error: \"..result.GetString());\n}",
                    "name": "CreateRecord",
                    "returnDesc": "A StringResult detailing the success or failure of the operation",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "Secret",
                        "string"
                    ],
                    "argsDesc": [
                        "Your secret domain key ( see https://portal.civilnetworks.net/maxnet/domains )",
                        "The record id."
                    ],
                    "desc": "Deletes a record on a domain.\nSee https://portal.civilnetworks.net/maxnet/domains for more information",
                    "example": "using Console;\nusing System;\nusing Util;\nusing Secrets;\nusing DNS;\n\n// Deletes the IP record on the provided domain\n// You must obtain a domain key from the DNS service ( https://portal.civilnetworks.net/maxnet/domains )\nfunction DeleteDomainIPRecord(string domainKey, string domainName) {\n    DomainRecord ipRecord = DNS.LookupRecord(domainName, \"IP\");\n    \n    if (Util.IsNull(ipRecord)) {\n        Console.WriteLine(\"Record does not exist\");\n        return;\n    }\n    \n    Console.WriteLine(\"Deleting record...\");\n    \n    // Delete the record\n    string recordID = ipRecord.GetID();\n    StringResult result = DNS.DeleteRecord(domainKey, recordID);\n    \n    if (result.GetResult()) {\n        Console.WriteLine(\"Domain record deleted!\");\n    } else {\n        Console.WriteLine(\"Error: \"..result.GetString());\n    }\n}\n\nSecret domainKeySecret = Secrets.GetSecret(\"my secret domain key\");\nstring domainName = \"example.com\";\nDeleteDomainIPRecord(domainKeySecret, domainName);",
                    "name": "DeleteRecord",
                    "returnDesc": "A StringResult detailing the success or failure of the operation",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The domain name to lookup."
                    ],
                    "desc": "Looks up a domain by its name. ( E.G mnscript.com )\nThis operation is slow.",
                    "example": "using Console;\nusing Util;\nusing DNS;\n\n// Looks up a domain record, then displays its information.\n// This operation must send an API request to fetch the domain information, so can be slow.\n\nstring domainName = \"mnscript.com\";\nDomain domain = DNS.LookupDomain(domainName);\n\nif (Util.IsNull(domain)) {\n    Console.WriteLine(\"Domain does not exist: \"..domainName);\n} else {\n    Console.WriteLine(\"Domain Name: \"..domain.GetName());\n    Console.WriteLine(\"Domain Owner: \"..domain.GetOwnerID());\n    Console.WriteLine(\"Description: \"..domain.GetDescription());\n}",
                    "name": "LookupDomain",
                    "returnDesc": "The domain, or null if not found",
                    "returnType": "Domain"
                },
                {
                    "args": [
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The domain name to lookup.",
                        "The type of record ( IP, TXT, etc.. )"
                    ],
                    "desc": "Retrieves a domain record from a domain.\nSee https://portal.civilnetworks.net/maxnet/domains for more information",
                    "example": "using Console;\nusing System;\nusing Util;\nusing DNS;\n\n// Looks up a domain record on a domain, then displays its value.\n// This uses the DNS cache so you will need to wait a few minutes after changing your domain records.\n\nstring domainName = \"mn.mnscript.com\";\nstring recordType = \"TXT\";\n\nDomainRecord record = DNS.LookupRecord(domainName, recordType);\n\nif (Util.IsNull(record)) {\n    Console.WriteLine(\"Domain record not found\");\n} else {\n    Console.WriteLine(\"Domain record value: \"..record.GetValue());\n    Console.WriteLine(\"Domain record name: \"..record.GetName());\n    Console.WriteLine(\"Domain record type: \"..record.GetType());\n    Console.WriteLine(\"Domain record TTL: \"..record.GetTTL());\n}",
                    "name": "LookupRecord",
                    "returnDesc": "The domain record, or null if not found",
                    "returnType": "DomainRecord"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The domain name to lookup."
                    ],
                    "desc": "Resolves an IP from a domain name.\nSee https://portal.civilnetworks.net/maxnet/domains for more information",
                    "example": "using Console;\nusing System;\nusing DNS;\n\n// Looks up an IP from a domain name, then displays it.\n// This uses the DNS cache so you will need to wait a few minutes after changing your domain records.\n\nstring domainName = \"mn.mnscript.com\";\nStringResult result = DNS.ResolveDomain(domainName);\n\nif (result.GetResult()) {\n    Console.WriteLine(\"Domain IP: \"..result.GetString());\n} else {\n    Console.WriteLine(\"Domain resolve failed: \"..result.GetString());\n}",
                    "name": "ResolveDomain",
                    "returnDesc": "A StringResult containing either the resolved IP, or a reason for failure",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "Secret",
                        "string"
                    ],
                    "argsDesc": [
                        "Your secret domain key ( see https://portal.civilnetworks.net/maxnet/domains )",
                        "The domain URL. ( E.G mn.mydomain.com )"
                    ],
                    "desc": "Unbinds the terminals IP from the domain by removing an IP record matching the terminals IP.\nSee https://portal.civilnetworks.net/maxnet/domains for more information",
                    "example": "using Console;\nusing System;\nusing Util;\nusing Secrets;\nusing DNS;\n\n// Unbinds the current terminals IP from the domain\n// You must obtain a domain key from the DNS service ( https://portal.civilnetworks.net/maxnet/domains )\n\nSecret domainKeySecret = Secrets.GetSecret(\"my secret domain key\");\nstring url = \"mn.mydomain.com\";\n\nStringResult result = DNS.UnbindDomainToIP(domainKeySecret, url);\n\nif (result.GetResult()) {\n    Console.WriteLine(\"Domain unbinded!\");\n} else {\n    Console.WriteLine(\"Error: \"..result.GetString());\n}",
                    "name": "UnbindDomainToIP",
                    "returnDesc": "A StringResult detailing the success or failure of the operation",
                    "returnType": "StringResult"
                }
            ],
            "name": "DNS"
        },
        {
            "classes": [],
            "functions": [
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The Base64 string to convert."
                    ],
                    "desc": "Decodes a Base64 string back to characters.",
                    "example": "using Encoding;\nusing System;\nusing Console;\n\n// Converts \"SGVsbG8gV29ybGQh\" back to characters.\n// \"SGVsbG8gV29ybGQh\" is Base64 for \"Hello World!\"\n\nStringResult base64 = Encoding.Base64Decode(\"SGVsbG8gV29ybGQh\");\n\nif (base64.GetResult()) {\n    // If the conversion was successful, the result will be in GetString.\n    Console.WriteLine(\"Characters: \"..base64.GetString());\n} else {\n    // If the conversion failed, the error reason will be in GetString.\n    Console.WriteLine(\"Error: \"..base64.GetString());\n}",
                    "name": "Base64Decode",
                    "returnDesc": "The characters.",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The string to convert."
                    ],
                    "desc": "Encodes a string to a Base64 representation.",
                    "example": "using Encoding;\nusing System;\nusing Console;\n\n// Converts \"Hello World!\" to Base64\n\nStringResult base64 = Encoding.Base64Encode(\"Hello World!\");\n\nif (base64.GetResult()) {\n    // If the conversion was successful, the result will be in GetString.\n    Console.WriteLine(\"Base64: \"..base64.GetString());\n} else {\n    // If the conversion failed, the error reason will be in GetString.\n    Console.WriteLine(\"Error: \"..base64.GetString());\n}",
                    "name": "Base64Encode",
                    "returnDesc": "The Base64 representation.",
                    "returnType": "StringResult"
                }
            ],
            "name": "Encoding"
        },
        {
            "classes": [],
            "functions": [
                {
                    "args": [
                        "string",
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The event name (See events documentation)",
                        "Unique identifier for the callback",
                        "The name of a global function to be executed when this event happens"
                    ],
                    "desc": "Registers a callback for an event",
                    "example": "using Event;\n\n// Links the function OnConsoleCommand to the \"ConsoleCommand\" event.\n// This means when the \"ConsoleCommand\" event happens, OnConsoleCommand will run.\n\nfunction OnConsoleCommand(string text){\n\n}\n\n// The first parameter is the name of the event: \"ConsoleCommand\"\n// The second parameter is a unique name which I want to call this event: \"commands\"\n// The third parameter is the name of the function to run when the event happens: \"OnConsoleCommand\"\n\nEvent.AddListener(\"ConsoleCommand\", \"commands\", \"OnConsoleCommand\");",
                    "name": "AddListener",
                    "returnType": "Unknown"
                },
                {
                    "args": [],
                    "desc": "Clears the queue of pending events.",
                    "example": "using Event;\n\n// This is useful to mitigate DDoS attempts to your script.\n// If someone is spamming net messages to your program, you can detect this\n// by counting the pending events, and clear the events.\n\nnumber pendingEvents = Event.GetPendingEventCount();\n\nif(pendingEvents > 50){\n    // This is quite a lot of events, and might be caused by someone spamming net messages to us.\n    Event.ClearEvents();\n}",
                    "name": "ClearEvents",
                    "returnType": "Unknown"
                },
                {
                    "args": [],
                    "desc": "Gets the number of pending events.",
                    "example": "using Event;\n\n// This is useful to mitigate DDoS attempts to your script.\n// If someone is spamming net messages to your program, you can detect this\n// by counting the pending events, and clear the events.\n\nnumber pendingEvents = Event.GetPendingEventCount();\n\nif(pendingEvents > 50){\n    // This is quite a lot of events, and might be caused by someone spamming net messages to us.\n    Event.ClearEvents();\n}",
                    "name": "GetPendingEventCount",
                    "returnType": "number"
                },
                {
                    "args": [],
                    "desc": "Processes all pending events",
                    "example": "using Event;\n\n// To make event listeners happen, you must call Event.Process.\n// This tells the program to process all of the events which have happened.\n\n// The most common way to implement this is to put an infinite\n// loop at the bottom of a program which constantly processes events.\n\nwhile(true){\n    Event.Process();\n}",
                    "name": "Process",
                    "returnType": "Unknown"
                },
                {
                    "args": [
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The event name (See events documentation)",
                        "Unique identifier for the callback to remove"
                    ],
                    "desc": "Removes a callback for an event",
                    "example": "using Event;\n\n// Removes the \"commands\" listener from the \"ConsoleCommand\" event.\n// This means the function will not be called anymore when the event happens.\n// If this makes no sense, look at the Event.AddListener example first.\n\nEvent.RemoveListener(\"ConsoleCommand\", \"commands\");",
                    "name": "RemoveListener",
                    "returnDesc": "The number of event callbacks which were removed",
                    "returnType": "number"
                }
            ],
            "name": "Event"
        },
        {
            "classes": [],
            "functions": [
                {
                    "args": [
                        "string",
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The directory to place the file.",
                        "The file name to append."
                    ],
                    "desc": "Appends a string onto a file.",
                    "example": "using File;\nusing Console;\nusing System;\n\n// Appends the text \"\\n My text hello!\" in to \"my_file.txt\" in \"r/documents\".\n\nStringResult result = File.Append(\"r/documents\", \"my_file.txt\", \"\\n My text hello!\");\n\nif(result.GetResult()){\n    Console.WriteLine(\"The file was successfully appended!\");\n}else{\n    // If the file could not be appended, the result string contains the reason.\n    Console.WriteLine(\"Error: \"..result.GetString());\n}",
                    "name": "Append",
                    "returnDesc": "A StringResult representing the success/failure of the operation.",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The directory to create the directory.",
                        "The directory name to create."
                    ],
                    "desc": "Created a directory.",
                    "example": "using File;\nusing Console;\nusing System;\nusing Application;\n\n// Requests Admin Permission \nApplication.RequestAdminPrivilege();\n\n// Creates the directory \"Files\" in \"r/documents\".\n\nStringResult result = File.CreateDir(\"r/documents\", \"Files\");\n\nif(result.GetResult()){\n    Console.WriteLine(\"The directory was successfully created!\");\n}else{\n    // If the directory could not be written, the result string contains the reason.\n    Console.WriteLine(\"Error: \"..result.GetString());\n}",
                    "name": "CreateDir",
                    "returnDesc": "A StringResult representing the success/failure of the operation.",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The directory to search.",
                        "The file to delete."
                    ],
                    "desc": "Deletes a file in a directory.",
                    "example": "using File;\nusing Console;\nusing System;\n\n// Deletes \"bf_password.exe\" in \"r/programs\".\n\nStringResult result = File.Delete(\"r/programs\", \"bf_password.exe\");\n\nif(result.GetResult()){\n    Console.WriteLine(\"The file was deleted!\");\n}else{\n    // If the file could not be deleted, the result string contains the reason.\n    Console.WriteLine(\"Error: \"..result.GetString());\n}",
                    "name": "Delete",
                    "returnDesc": "A StringResult representing the success/failure of the operation.",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The directory to search."
                    ],
                    "desc": "Returns whether the directory exists.",
                    "example": "using File;\nusing Console;\n\n// Finds whether \"r/documents\" exists.\n\nif(File.DirectoryExists(\"r/documents\")){\n    Console.WriteLine(\"Directory exists!\");\n}else{\n    Console.WriteLine(\"Directory does not exists!\");\n}",
                    "name": "DirectoryExists",
                    "returnDesc": "True if directory exists.",
                    "returnType": "bool"
                },
                {
                    "args": [
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The directory to search.",
                        "The file to look for."
                    ],
                    "desc": "Returns whether the file exists in the directory.",
                    "example": "using File;\nusing Console;\n\n// Finds whether \"bf_password.exe\" exists in \"r/programs\".\n\nif(File.Exists(\"r/programs\", \"bf_password.exe\")){\n    Console.WriteLine(\"The file exists!\");\n}else{\n    Console.WriteLine(\"The file does not exists!\");\n}",
                    "name": "Exists",
                    "returnDesc": "True if file exists in the directory.",
                    "returnType": "bool"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The directory to search."
                    ],
                    "desc": "Returns an array of files in the given directory.",
                    "example": "using File;\nusing Console;\nusing Array;\nusing Util;\n\n// Finds the files in \"r/documents\" and prints them to console.\n\nstring[] files = File.FindFiles(\"r/documents\");\nnumber numFiles = Array.Length(files);\nnumber fileIndex = 1;\n\nConsole.WriteLine(\"Found \"..Util.ToString(numFiles)..\" files!\");\n\nwhile(fileIndex <= numFiles){\n    Console.WriteLine(\"File: \"..files[fileIndex]);\n    fileIndex = fileIndex + 1;\n}",
                    "name": "FindFiles",
                    "returnDesc": "An array of files found in the directory.",
                    "returnType": "string[]"
                },
                {
                    "args": [
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The directory to search.",
                        "The extension to filter."
                    ],
                    "desc": "Returns an array of files in the given directory with a certain extension.",
                    "example": "using File;\nusing Console;\nusing Array;\nusing Util;\n\n// Finds the .txt files in \"r/documents\" and prints them to console.\n\nstring[] files = File.FindFiles(\"r/documents\", \"txt\");\nnumber numFiles = Array.Length(files);\nnumber fileIndex = 1;\n\nConsole.WriteLine(\"Found \"..Util.ToString(numFiles)..\" files!\");\n\nwhile(fileIndex <= numFiles){\n    Console.WriteLine(\"File: \"..files[fileIndex]);\n    fileIndex = fileIndex + 1;\n}",
                    "name": "FindFilesWithExt",
                    "returnDesc": "An array of files found in the directory.",
                    "returnType": "string[]"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The directory to search."
                    ],
                    "desc": "Returns an array of folders in the given directory.",
                    "example": "using File;\nusing Console;\nusing Array;\nusing Util;\n\n// Finds the folders in \"r\" and prints them to console.\n\nstring[] folders = File.FindFolders(\"r\");\nnumber numFolders = Array.Length(folders);\nnumber folderIndex = 1;\n\nConsole.WriteLine(\"Found \"..Util.ToString(numFolders)..\" folders!\");\n\nwhile(folderIndex <= numFolders){\n    Console.WriteLine(\"File: \"..folders[folderIndex]);\n    folderIndex = folderIndex + 1;\n}",
                    "name": "FindFolders",
                    "returnDesc": "An array of folders found in the directory.",
                    "returnType": "string[]"
                },
                {
                    "args": [],
                    "desc": "Returns the capacity of the disk in bytes.",
                    "name": "GetDiskCapacity",
                    "returnDesc": "The capacity of the disk in bytes.",
                    "returnType": "number"
                },
                {
                    "args": [],
                    "desc": "Returns the used capacity of the disk in bytes.",
                    "name": "GetUsedCapacity",
                    "returnDesc": "The used capacity of the disk in bytes.",
                    "returnType": "number"
                },
                {
                    "args": [
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The directory to search.",
                        "The file to read."
                    ],
                    "desc": "Reads the contents of a file.",
                    "example": "using File;\nusing Console;\nusing System;\n\n// Reads \"my_file.txt\" in \"r/documents\".\n\nStringResult result = File.Read(\"r/documents\", \"my_file.txt\");\n\nif(result.GetResult()){\n    // If the file was read, the contents will be contained in the result's string.\n    string fileContents = result.GetString();\n}else{\n    // If the file could not be read, the result string contains the reason.\n    Console.WriteLine(\"Error: \"..result.GetString());\n}",
                    "name": "Read",
                    "returnDesc": "A StringResult representing the success/failure of the operation.",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The directory to search.",
                        "The directory to delete."
                    ],
                    "desc": "Deletes a directory.",
                    "example": "using File;\nusing Console;\nusing System;\nusing Application;\n\n// Requests Admin Permission \nApplication.RequestAdminPrivilege();\n\n// Deletes \"Files\" in \"r/programs\".\n\nStringResult result = File.RemoveDir(\"r/programs\", \"Files\");\n\nif(result.GetResult()){\n    Console.WriteLine(\"The directory was deleted!\");\n}else{\n    // If the directory could not be deleted, the result string contains the reason.\n    Console.WriteLine(\"Error: \"..result.GetString());\n}",
                    "name": "RemoveDir",
                    "returnDesc": "A StringResult representing the success/failure of the operation.",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The directory to search.",
                        "The file to look for."
                    ],
                    "desc": "Returns the size of the file in bytes.",
                    "name": "Size",
                    "returnDesc": "The size of the file in bytes.",
                    "returnType": "number"
                },
                {
                    "args": [
                        "string",
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The directory to place the file.",
                        "The file name to write."
                    ],
                    "desc": "Writes / overrides a file.",
                    "example": "using File;\nusing Console;\nusing System;\n\n// Writes the text \"My text hello!\" in to \"my_file.txt\" in \"r/documents\".\n\nStringResult result = File.Write(\"r/documents\", \"my_file.txt\", \"My text hello!\");\n\nif(result.GetResult()){\n    Console.WriteLine(\"The file was successfully written!\");\n}else{\n    // If the file could not be written, the result string contains the reason.\n    Console.WriteLine(\"Error: \"..result.GetString());\n}",
                    "name": "Write",
                    "returnDesc": "A StringResult representing the success/failure of the operation.",
                    "returnType": "StringResult"
                }
            ],
            "name": "File"
        },
        {
            "classes": [
                {
                    "functions": [
                        {
                            "args": [],
                            "argsDesc": [],
                            "desc": "Return the list of allowed IPs.",
                            "example": "using System;\nusing Console;\nusing Firewall;\nusing Application;\nusing Array;\n\n//Request Admin Perms\nApplication.RequestAdminPrivilege();\n\nFirewallRules rules = Firewall.GetFirewallRules();\n\n//Print Out Allowed IPs\nstring[] allowed = rules.GetAllowed();\n\nnumber aI = 1;\n\nConsole.WriteLine(\"Allowed:\");\n\nwhile ( Array.Length(allowed) >= aI  ) {\n    \n    Console.WriteLine(allowed[aI]);\n    \n    aI = aI + 1;\n    \n}",
                            "name": "GetAllowed",
                            "returnDesc": "A string array containing IPs.",
                            "returnType": "string[]"
                        },
                        {
                            "args": [],
                            "argsDesc": [],
                            "desc": "Return the list of block IPs.",
                            "example": "using System;\nusing Console;\nusing Firewall;\nusing Application;\nusing Array;\n\n//Request Admin Perms\nApplication.RequestAdminPrivilege();\n\nFirewallRules rules = Firewall.GetFirewallRules();\n\n//Print Out Blocked IPs\nstring[] blocked = rules.GetBlocked();\n\nnumber bI = 1;\n\nConsole.WriteLine(\"Blocked:\");\n\nwhile ( Array.Length(blocked) >= bI  ) {\n    \n    Console.WriteLine(blocked[bI]);\n    \n    bI = bI + 1;\n    \n}",
                            "name": "GetBlocked",
                            "returnDesc": "A string array containing IPs.",
                            "returnType": "string[]"
                        }
                    ],
                    "name": "FirewallRules"
                }
            ],
            "functions": [
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The IP address"
                    ],
                    "desc": "Allows an IP to communicate with your terminal.",
                    "example": "using System;\nusing Console;\nusing Firewall;\nusing Application;\n\n//Request Admin Perms\nApplication.RequestAdminPrivilege();\n\nstring IP = \"1.1.1.1\";\n\nStringResult allow = Firewall.Allow(IP);\n\nif ( allow.GetResult() ) {\n    Console.WriteLine(\"Allowed connections from \"..IP);\n} else {\n    Console.WriteLine(\"Error: \"..allow.GetString());    \n}\n                ",
                    "name": "Allow",
                    "returnDesc": "StringResult representing the success or failure of this operation",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The IP address"
                    ],
                    "desc": "Blocks an IP from communicating with your terminal.",
                    "example": "using System;\nusing Console;\nusing Firewall;\nusing Application;\n\n//Request Admin Perms\nApplication.RequestAdminPrivilege();\n\nstring IP = \"1.1.1.1\";\n\nStringResult block = Firewall.Block(IP);\n\nif ( block.GetResult() ) {\n    Console.WriteLine(\"Blocked connections from \"..IP);\n} else {\n    Console.WriteLine(\"Error: \"..block.GetString());    \n}\n                ",
                    "name": "Block",
                    "returnDesc": "StringResult representing the success or failure of this operation",
                    "returnType": "StringResult"
                },
                {
                    "args": [],
                    "argsDesc": [],
                    "desc": "Disabled the firewall your terminal.",
                    "example": "using System;\nusing Console;\nusing Firewall;\nusing Application;\n\n//Request Admin Perms\nApplication.RequestAdminPrivilege();\n\nStringResult disable = Firewall.Disable();\n\nif ( disable.GetResult() ) {\n    Console.WriteLine(\"Firewall Disabled\");\n} else {\n    Console.WriteLine(\"Error: \"..disable.GetString());    \n}\n                ",
                    "name": "Disable",
                    "returnDesc": "StringResult representing the success or failure of this operation",
                    "returnType": "StringResult"
                },
                {
                    "args": [],
                    "argsDesc": [],
                    "desc": "Enables the firewall your terminal.",
                    "example": "using System;\nusing Console;\nusing Firewall;\nusing Application;\n\n//Request Admin Perms\nApplication.RequestAdminPrivilege();\n\nStringResult enable = Firewall.Enable();\n\nif ( enable.GetResult() ) {\n    Console.WriteLine(\"Firewall Enabled\");\n} else {\n    Console.WriteLine(\"Error: \"..enable.GetString());    \n}\n                ",
                    "name": "Enable",
                    "returnDesc": "StringResult representing the success or failure of this operation",
                    "returnType": "StringResult"
                },
                {
                    "args": [],
                    "argsDesc": [],
                    "desc": "Return the firewall rules of the terminal.",
                    "example": "using System;\nusing Console;\nusing Firewall;\nusing Application;\nusing Array;\n\n//Request Admin Perms\nApplication.RequestAdminPrivilege();\n\nFirewallRules rules = Firewall.GetFirewallRules();\n                ",
                    "name": "GetFirewallRules",
                    "returnDesc": "FirewallRules class containing the firewall rules of the terminal.",
                    "returnType": "FirewallRules"
                }
            ],
            "name": "Firewall"
        },
        {
            "classes": [],
            "functions": [
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The number"
                    ],
                    "desc": "Returns the absolute value of the specified number",
                    "name": "Abs",
                    "returnDesc": "The absolute value of the number specified",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The cosine value in the range of -1 to 1"
                    ],
                    "desc": "Returns the angle whose cosine is the given number",
                    "name": "Acos",
                    "returnDesc": "The angle in radians associated with the given cosine",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The sine value in the range of -1 to 1"
                    ],
                    "desc": "Returns the angle whose sine is the given number",
                    "name": "Asin",
                    "returnDesc": "The angle in radians associated with the given sine",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The tangent"
                    ],
                    "desc": "Returns the angle whos tangent is the given number",
                    "name": "Atan",
                    "returnDesc": "The angle in radians associated with the given tangent",
                    "returnType": "number"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The binary string"
                    ],
                    "desc": "Converts a binary string to a number.",
                    "name": "BinToInt",
                    "returnDesc": "The converted number.",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The number to round up"
                    ],
                    "desc": "Returns the number provided, but rounded up to the nearest whole number",
                    "name": "Ceil",
                    "returnDesc": "The nearest integer which is greater than or equal to the number provided",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The angle in radians"
                    ],
                    "desc": "Returns the cosine of the specified angle",
                    "name": "Cos",
                    "returnDesc": "The cosine of the specified angle",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The number of degrees to convert"
                    ],
                    "desc": "Converts the number of degrees provided into radians",
                    "name": "DegToRad",
                    "returnDesc": "The degrees provided in radians",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The number to round up"
                    ],
                    "desc": "Returns the number provided, but rounded down to the nearest whole number",
                    "name": "Floor",
                    "returnDesc": "The nearest integer which is smaller than or equal to the number provided",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The number to convert."
                    ],
                    "desc": "Converts a number to a binary string.",
                    "name": "IntToBin",
                    "returnDesc": "The binary string.",
                    "returnType": "string"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The value to get the base from exponent from."
                    ],
                    "desc": "return the natural logarithm of x (to base e).",
                    "name": "Log",
                    "returnDesc": "Logarithm of x to the given base",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number",
                        "number"
                    ],
                    "argsDesc": [
                        "The first number",
                        "The second number"
                    ],
                    "desc": "Returns the largest of the two values provided",
                    "name": "Max",
                    "returnDesc": "The larger of the two values provided",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number",
                        "number"
                    ],
                    "argsDesc": [
                        "The first number",
                        "The second number"
                    ],
                    "desc": "Returns the smallest of the two values provided",
                    "name": "Min",
                    "returnDesc": "The smaller of the two values provided",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The number of degrees to convert"
                    ],
                    "desc": "Converts the number of radians provided into degrees",
                    "name": "RadToDeg",
                    "returnDesc": "The degrees provided in radians",
                    "returnType": "number"
                },
                {
                    "args": [],
                    "desc": "Generates a random number between 0-1",
                    "name": "Random",
                    "returnDesc": "A random number between 0-1",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number",
                        "number"
                    ],
                    "argsDesc": [
                        "The lower random range.",
                        "The upper random range."
                    ],
                    "desc": "Generates a random number inside the range (Inclusive).",
                    "name": "RandomRange",
                    "returnDesc": "A random number inside the range (Inclusive).",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The number to round"
                    ],
                    "desc": "Returns the number provided, but rounded to the nearest integer",
                    "name": "Round",
                    "returnDesc": "The integer closest to the number provided",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number",
                        "number"
                    ],
                    "argsDesc": [
                        "The number to round",
                        "The number of decimal places to round to."
                    ],
                    "desc": "Returns the number provided to the number of decimal places provided",
                    "name": "RoundTo",
                    "returnDesc": "The integer closest to the number provided",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The angle in radians"
                    ],
                    "desc": "Returns the sine of the specified angle",
                    "name": "Sin",
                    "returnDesc": "The sine of the specified angle",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The number of calculate the square root of"
                    ],
                    "desc": "Calculates the square root of the number provided",
                    "name": "Sqrt",
                    "returnDesc": "The square root of the number provided",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The angle in radians"
                    ],
                    "desc": "Returns the tangent of the specified angle",
                    "name": "Tan",
                    "returnDesc": "The tangent of the specified angle",
                    "returnType": "number"
                }
            ],
            "name": "Math"
        },
        {
            "classes": [
                {
                    "functions": [
                        {
                            "desc": "Gets the NTP for this message.",
                            "name": "GetProtocol",
                            "returnDesc": "The NTP.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the source address for this message.",
                            "name": "GetSourceAddress",
                            "returnDesc": "The source address.",
                            "returnType": "string"
                        },
                        {
                            "args": [],
                            "desc": "Reads the next value as bool from the NTM",
                            "name": "ReadBool",
                            "returnDesc": "The number read",
                            "returnType": "bool"
                        },
                        {
                            "args": [],
                            "desc": "Reads the next value as number from the NTM",
                            "name": "ReadNumber",
                            "returnDesc": "The number read (-1 if failed)",
                            "returnType": "number"
                        },
                        {
                            "args": [],
                            "desc": "Reads the next value as string from the NTM",
                            "name": "ReadString",
                            "returnDesc": "The number read (\"nil\" if failed)",
                            "returnType": "string"
                        }
                    ],
                    "name": "NTM"
                }
            ],
            "functions": [
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The IP address to send the message to"
                    ],
                    "desc": "Sends the active Network Transfer Message (NTM)",
                    "example": "using Net;\nusing System;\n\n// Starts a network message with the protocol 6000 and sends it to an IP address.\n\nnumber myProtocol = 6000;\n\nNet.Start(myProtocol);\nNet.SendToAddress(\"192.168.1.254\");",
                    "name": "SendToAddress",
                    "returnDesc": "StringResult representing the success or failure of this operation",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The Network Transfer Protocol (NTP)"
                    ],
                    "desc": "Starts a Network Transfer Message (NTM)",
                    "example": "using Net;\nusing System;\n\n// Starts a network message with the protocol 6000 and sends it to an IP address.\n// It is recommended to use protocols of 1000 or above, to avoid using reserved Maxnet protocols.\n\nnumber myProtocol = 6000;\n\nNet.Start(myProtocol);\nNet.SendToAddress(\"192.168.1.254\");",
                    "name": "Start",
                    "returnDesc": "True if the message was started",
                    "returnType": "bool"
                },
                {
                    "args": [
                        "bool"
                    ],
                    "argsDesc": [
                        "The bool to write to the message"
                    ],
                    "desc": "Writes a bool to the current Network Transfer Message (NTM)",
                    "example": "using Net;\nusing System;\n\n// Starts a network message with the protocol 6000, writes the bool true, and sends it to an IP address.\n\nnumber myProtocol = 6000;\n\nNet.Start(myProtocol);\nNet.WriteBool(true);\nNet.SendToAddress(\"192.168.1.254\");",
                    "name": "WriteBool",
                    "returnDesc": "True if the data was written",
                    "returnType": "bool"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The number to write to the message"
                    ],
                    "desc": "Writes a number to the current Network Transfer Message (NTM)",
                    "example": "using Net;\nusing System;\n\n// Starts a network message with the protocol 6000, writes the number 10, and sends it to an IP address.\n\nnumber myProtocol = 6000;\n\nNet.Start(myProtocol);\nNet.WriteNumber(10);\nNet.SendToAddress(\"192.168.1.254\");",
                    "name": "WriteNumber",
                    "returnDesc": "True if the data was written",
                    "returnType": "bool"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The string to write to the message"
                    ],
                    "desc": "Writes a string to the current Network Transfer Message (NTM)",
                    "example": "using Net;\nusing System;\n\n// Starts a network message with the protocol 6000, writes the string \"hello\", and sends it to an IP address.\n\nnumber myProtocol = 6000;\n\nNet.Start(myProtocol);\nNet.WriteString(\"hello\");\nNet.SendToAddress(\"192.168.1.254\");",
                    "name": "WriteString",
                    "returnDesc": "True if the data was written",
                    "returnType": "bool"
                }
            ],
            "name": "Net"
        },
        {
            "classes": [
                {
                    "functions": [
                        {
                            "desc": "Gets the org description",
                            "example": "using Org;\nusing Console;\nusing Player;\nusing System;\n\n// Finds the org of the player using the computer and shows the description.\n\nPlayer user = System.GetUser();\nOrg org = Org.GetOrg(user);\n\nif(org.IsValid()){\n    // The org is valid, which means it exists.\n\n    string desc = org.GetDescription();\n    Console.WriteLine(\"The org description is: \"..desc);\n}",
                            "name": "GetDescription",
                            "returnDesc": "The org description",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets an array of SteamID's in the org",
                            "example": "using System;\nusing Org;\nusing Array;\nusing Console;\nusing Player;\nusing Util;\n\n// Prints the org members (name or steamid) of the player using the terminal.\n\nPlayer user = System.GetUser();\nOrg org = Org.GetOrg(user);\n\nif(org.IsValid()){\n    // If the org is valid, it means it exists.\n\n    Console.WriteLine(\"Org name: \"..org.GetName());\n    Console.WriteLine(\"Member count: \"..Util.ToString(numMembers));\n\n    string[] members = org.GetMembers();\n    number numMembers = Array.Length(members);\n    number memberIndex = 1;\n\n    while(memberIndex <= numMembers){\n        // For each member, get their SteamID from the array, and look for an online player.\n        string steamid = members[memberIndex];\n        Player ply = Player.GetBySteamID(steamid);\n\n        string name = steamid;\n\n        if(ply.IsValid()){\n            // If the player is valid, then they are online, so we can get their name.\n            name = ply.GetName();\n        }\n\n        Console.WriteLine(\"Member: \"..name);\n\n        // Add 1 to the member index to move on to the next member.\n        memberIndex = memberIndex + 1;\n    }\n}",
                            "name": "GetMembers",
                            "returnDesc": "An array of SteamID's in the org",
                            "returnType": "string[]"
                        },
                        {
                            "desc": "Gets the org name",
                            "example": "using Org;\nusing Console;\nusing Player;\nusing System;\n\n// Finds the org of the player using the computer and shows the name.\n\nPlayer user = System.GetUser();\nOrg org = Org.GetOrg(user);\n\nif(org.IsValid()){\n    // The org is valid, which means it exists.\n\n    string name = org.GetName();\n    Console.WriteLine(\"The org name is: \"..name);\n}",
                            "name": "GetName",
                            "returnDesc": "The org name",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets the org owner SteamID",
                            "example": "using Org;\nusing Console;\nusing Player;\nusing System;\n\n// Finds the org of the player using the computer and shows the owner's SteamID.\n\nPlayer user = System.GetUser();\nOrg org = Org.GetOrg(user);\n\nif(org.IsValid()){\n    // The org is valid, which means it exists.\n\n    string steamid = org.GetOwnerSteamID();\n    Console.WriteLine(\"The org owner's SteamID is: \"..steamid);\n}",
                            "name": "GetOwnerSteamID",
                            "returnDesc": "The org owner SteamID",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets the org type",
                            "example": "using Org;\nusing Console;\nusing Player;\nusing System;\n\n// Finds the org of the player using the computer and shows the type.\n\nPlayer user = System.GetUser();\nOrg org = Org.GetOrg(user);\n\nif(org.IsValid()){\n    // The org is valid, which means it exists.\n\n    string orgType = org.GetType();\n    Console.WriteLine(\"The org type is: \"..orgType);\n}",
                            "name": "GetType",
                            "returnDesc": "The org type",
                            "returnType": "string"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The org name to check ally status."
                            ],
                            "desc": "Gets whether the org is allied with the given org name.",
                            "name": "IsAllied",
                            "returnDesc": "True if the org name is allied.",
                            "returnType": "bool"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The SteamID to check."
                            ],
                            "desc": "Gets whether the SteamID is in the org",
                            "name": "IsMember",
                            "returnDesc": "True if the SteamID is in the org",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Returns whether the org is valid",
                            "example": "using Org;\nusing Console;\nusing Player;\nusing System;\n\n// Finds the org of the player using the computer and checks if it exists.\n\nPlayer user = System.GetUser();\nOrg org = Org.GetOrg(user);\n\nif(org.IsValid()){\n    // The org is valid, which means it exists.\n\n    Console.WriteLine(\"The org exists!\");\n}",
                            "name": "IsValid",
                            "returnDesc": "True if the org is valid",
                            "returnType": "bool"
                        }
                    ],
                    "name": "Org"
                }
            ],
            "functions": [
                {
                    "args": [
                        "Player"
                    ],
                    "desc": "Gets the organization of the Player",
                    "name": "GetOrg",
                    "returnDesc": "The organization name",
                    "returnType": "Org"
                },
                {
                    "args": [
                        "Player"
                    ],
                    "desc": "Gets the organization name of the Player",
                    "name": "GetOrgName",
                    "returnDesc": "The organization name",
                    "returnType": "string"
                }
            ],
            "name": "Orgs"
        },
        {
            "classes": [],
            "functions": [
                {
                    "args": [
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The Micro Transaction Authorization Token (See Payment.RequestMicroTransaction)",
                        "The SteamID of the player to send the money to."
                    ],
                    "desc": "Attempts to process the full amount of a Micro Transaction.",
                    "name": "ProcessMicroTransaction",
                    "returnDesc": "A StringResult representing the success of the payment.",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "string",
                        "string",
                        "number"
                    ],
                    "argsDesc": [
                        "The Micro Transaction Authorization Token (See Payment.RequestMicroTransaction)",
                        "The SteamID of the player to send the money to.",
                        "The amount to process."
                    ],
                    "desc": "Attempts to process a portion of a Micro Transaction.",
                    "name": "ProcessMicroTransactionPortion",
                    "returnDesc": "A StringResult representing the success of the payment.",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The Micro Transaction Authorization Token (See Payment.RequestVTCMicroTransaction)",
                        "The SteamID of the player to send the VTC to."
                    ],
                    "desc": "Attempts to process the full amount of a Micro Transaction.",
                    "name": "ProcessVTCMicroTransaction",
                    "returnDesc": "A StringResult representing the success of the payment.",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "string",
                        "string",
                        "number"
                    ],
                    "argsDesc": [
                        "The Micro Transaction Authorization Token (See Payment.RequestVTCMicroTransaction)",
                        "The SteamID of the player to send the VTC to.",
                        "The amount of VTC to process."
                    ],
                    "desc": "Attempts to process a portion of a VTC Micro Transaction.",
                    "name": "ProcessVTCMicroTransactionPortion",
                    "returnDesc": "A StringResult representing the success of the payment.",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The amount to authorize."
                    ],
                    "desc": "Requests authorization for a Micro Transaction from the terminal user's primary bank account.",
                    "name": "RequestMicroTransaction",
                    "returnDesc": "A StringResult. If successful, the String will be the transaction authorization token, otherwise it is the error.",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The amount to authorize."
                    ],
                    "desc": "Requests authorization for a VTC Micro Transaction from the terminal user's wallet.",
                    "name": "RequestVTCMicroTransaction",
                    "returnDesc": "A StringResult. If successful, the String will be the transaction authorization token, otherwise it is the error.",
                    "returnType": "StringResult"
                }
            ],
            "name": "Payment"
        },
        {
            "classes": [
                {
                    "functions": [
                        {
                            "args": [
                                "string",
                                "number"
                            ],
                            "argsDesc": [
                                "The name of the item.",
                                "The amount to dispense."
                            ],
                            "desc": "Dispenses an item.",
                            "example": "using Peripheral;\nusing Console;\nusing Application;\nusing Util;\nusing Array;\nusing System;\n\nDispenser dispenser = Peripheral.GetConnectedDispenser();\n\nif(dispenser.IsValid() == false){\n    // If the dispenser was not found, quit.\n    Application.Exit();\n}\n\n// Attempts to dispense one glock.\n// To find the item name of a weapon, right click copy the weapon in Q menu Weapons Tab.\nStringResult result = dispenser.DispenseItem(\"vguns_glockp80\", 1);\n\nif(result.GetResult()){\n    Console.WriteLine(\"The item was dispensed!\");\n}else{\n    // If the item could not be dispensed, the result's string will contain the error reason.\n    Console.WriteLine(\"The item failed to dispense: \"..result.GetString());\n}",
                            "name": "DispenseItem",
                            "returnDesc": "A StringResult representing the success of the operation.",
                            "returnType": "StringResult"
                        },
                        {
                            "args": [
                                "string",
                                "bool"
                            ],
                            "argsDesc": [
                                "The item name.",
                                "Whether to display the item's amount."
                            ],
                            "desc": "Displays the item on the dispenser screen.",
                            "example": "using Peripheral;\nusing Console;\nusing Application;\nusing Util;\nusing Array;\n\nDispenser dispenser = Peripheral.GetConnectedDispenser();\n\nif(dispenser.IsValid() == false){\n    // If the dispenser was not found, quit.\n    Application.Exit();\n}\n\n// Tells the dispenser to display glocks with the stock amount visible.\n// To find the item name of a weapon, right click copy the weapon in Q menu Weapons Tab.\ndispenser.DisplayItem(\"vguns_glockp80\", true);",
                            "name": "DisplayItem",
                            "returnType": "Unknown"
                        },
                        {
                            "desc": "Gets contents of the dispenser.",
                            "example": "using Peripheral;\nusing Console;\nusing Application;\nusing Util;\nusing Array;\n\nDispenser dispenser = Peripheral.GetConnectedDispenser();\n\nif(dispenser.IsValid() == false){\n    // If the dispenser was not found, quit.\n    Application.Exit();\n}\n\n// Searches for items in the dispenser.\nDispenserItem[] items = dispenser.GetContents();\n\nnumber numItems = Array.Length(items);\nConsole.WriteLine(\"\");\nConsole.WriteLine(\"Dispenser unique items: \"..Util.ToString(numItems));\n\n// Print each item in the console\nnumber i = 1;\nwhile(i <= numItems){\n    DispenserItem item = items[i];\n\n    Console.WriteLine(\"Item: \"..item.GetName()..\" Amount: \"..Util.ToString(item.GetAmount()));\n\n    i = i + 1;\n}",
                            "name": "GetContents",
                            "returnDesc": "An array of DispenserItem.",
                            "returnType": "DispenserItem[]"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The name of the item to look for."
                            ],
                            "desc": "Finds a DispenserItem of the given name.",
                            "example": "using Peripheral;\nusing Console;\nusing Application;\nusing Util;\n\nDispenser dispenser = Peripheral.GetConnectedDispenser();\n\nif(dispenser.IsValid() == false){\n    // If the dispenser was not found, quit.\n    Application.Exit();\n}\n\n// Searches for glocks in the dispenser.\n// To find the item name of a weapon, right click copy the weapon in Q menu Weapons Tab.\nDispenserItem glocks = dispenser.GetItem(\"vguns_glockp80\");\nnumber numberOfGlocks = glocks.GetAmount();\n\nConsole.WriteLine(\"The dispenser has \"..Util.ToString(numberOfGlocks)..\" Glocks\");",
                            "name": "GetItem",
                            "returnDesc": "DispenserItem which was found. Use DispenserItem.GetAmount to know if there are any in storage.",
                            "returnType": "DispenserItem"
                        },
                        {
                            "desc": "Gets the Player who owns this dispenser.",
                            "example": "using Peripheral;\nusing Console;\nusing Application;\nusing Player;\n\nDispenser dispenser = Peripheral.GetConnectedDispenser();\n\nif(dispenser.IsValid() == false){\n    // If the dispenser was not found, quit.\n    Application.Exit();\n}\n\n// Prints the name of the dispenser's owner in console.\nPlayer owner = dispenser.GetOwner();\n\nConsole.WriteLine(\"The dispenser is owned by \"..owner.GetName());",
                            "name": "GetOwner",
                            "returnDesc": "The Player who owns this dispenser.",
                            "returnType": "Player"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The name of the item to look for."
                            ],
                            "desc": "Gets whether the dispenser contains a certain item.",
                            "example": "using Peripheral;\nusing Console;\nusing Application;\n\nDispenser dispenser = Peripheral.GetConnectedDispenser();\n\nif(dispenser.IsValid() == false){\n    // If the dispenser was not found, quit.\n    Application.Exit();\n}\n\n// Searches for glocks in the dispenser.\n// To find the item name of a weapon, right click copy the weapon in Q menu Weapons Tab.\nbool hasGlocks = dispenser.HasItem(\"vguns_glockp80\");\n\nif(hasGlocks){\n    Console.WriteLine(\"The dispenser has 1 or more glocks!\");\n}else{\n    Console.WriteLine(\"The dispenser has no glocks!\");\n}",
                            "name": "HasItem",
                            "returnDesc": "True if the dispenser contains the item.",
                            "returnType": "bool"
                        },
                        {
                            "args": [],
                            "desc": "Removes all items being displayed from the dispenser screen.",
                            "example": "using Peripheral;\nusing Console;\nusing Application;\nusing Util;\nusing Array;\n\nDispenser dispenser = Peripheral.GetConnectedDispenser();\n\nif(dispenser.IsValid() == false){\n    // If the dispenser was not found, quit.\n    Application.Exit();\n}\n\n// Tells the dispenser to stop displaying all items.\ndispenser.HideAllItems();",
                            "name": "HideAllItems",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The item name."
                            ],
                            "desc": "Stops displaying the item on the dispenser screen.",
                            "example": "using Peripheral;\nusing Console;\nusing Application;\nusing Util;\nusing Array;\n\nDispenser dispenser = Peripheral.GetConnectedDispenser();\n\nif(dispenser.IsValid() == false){\n    // If the dispenser was not found, quit.\n    Application.Exit();\n}\n\n// Tells the dispenser to stop displaying glocks.\n// To find the item name of a weapon, right click copy the weapon in Q menu Weapons Tab.\ndispenser.HideItem(\"vguns_glockp80\");",
                            "name": "HideItem",
                            "returnType": "Unknown"
                        },
                        {
                            "desc": "Gets whether the Dispenser is valid.",
                            "example": "using Peripheral;\nusing Application;\n\nDispenser dispenser = Peripheral.GetConnectedDispenser();\n\nif(dispenser.IsValid() == false){\n    // If the dispenser was not connected to the terminal, quit.\n    Application.Exit();\n}",
                            "name": "IsValid",
                            "returnDesc": "True if the Dispenser is valid.",
                            "returnType": "bool"
                        }
                    ],
                    "name": "Dispenser"
                },
                {
                    "functions": [
                        {
                            "desc": "Gets the item amount.",
                            "name": "GetAmount",
                            "returnDesc": "The item amount.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the item name.",
                            "name": "GetName",
                            "returnDesc": "The item name.",
                            "returnType": "string"
                        }
                    ],
                    "name": "DispenserItem"
                },
                {
                    "functions": [
                        {
                            "desc": "Gets the number of devices connected to the router.",
                            "name": "GetDeviceCount",
                            "returnDesc": "The number of connected devices.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the PPID of a router.",
                            "name": "GetPPID",
                            "returnDesc": "The PPID of the router.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Returns whether the router is valid",
                            "name": "IsValid",
                            "returnDesc": "True if the router is valid",
                            "returnType": "bool"
                        }
                    ],
                    "name": "Router"
                },
                {
                    "functions": [
                        {
                            "desc": "Gets whether the Sniffer is valid.",
                            "name": "IsValid",
                            "returnDesc": "True if the Sniffer is valid.",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Scans for terminals in range of sniffer",
                            "name": "Scan",
                            "returnDesc": "An StringResult representing the success of the operation.",
                            "returnType": "StringResult"
                        }
                    ],
                    "name": "Sniffer"
                },
                {
                    "functions": [
                        {
                            "desc": "Gets the ID of this teleporter",
                            "name": "GetTeleporterID",
                            "returnDesc": "The ID of this teleporter",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets whether the Teleporter is valid.",
                            "name": "IsValid",
                            "returnDesc": "True if the Teleporter is valid.",
                            "returnType": "bool"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The ID of the teleporter to teleport to"
                            ],
                            "desc": "Activates the teleporter with the target teleporter ID",
                            "name": "Teleport",
                            "returnDesc": "StringResult representing the result of this operation",
                            "returnType": "StringResult"
                        }
                    ],
                    "name": "Teleporter"
                },
                {
                    "functions": [
                        {
                            "args": [],
                            "desc": "Gets the amount of bullets in the turret",
                            "name": "GetAmmo",
                            "returnDesc": "The amount of bullets in the turret",
                            "returnType": "number"
                        },
                        {
                            "args": [],
                            "desc": "Gets the turrets hostile target",
                            "name": "GetHostileTarget",
                            "returnDesc": "The hostile Player object being tracked",
                            "returnType": "Player"
                        },
                        {
                            "desc": "Gets the range of this turret (in inches)",
                            "name": "GetRange",
                            "returnDesc": "The range of this turret (in inches)",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the rounds per minute of this turrets weapon",
                            "name": "GetRPM",
                            "returnDesc": "The rounds per minute of this turret",
                            "returnType": "number"
                        },
                        {
                            "args": [],
                            "desc": "Gets the turrets current state",
                            "name": "GetState",
                            "returnDesc": "The turrets state",
                            "returnType": "string"
                        },
                        {
                            "args": [],
                            "desc": "Gets the turrets tracking (non-hostile) target",
                            "name": "GetTrackingTarget",
                            "returnDesc": "The Player object being tracked",
                            "returnType": "Player"
                        },
                        {
                            "args": [],
                            "desc": "Gets whether the turret has ammo or not",
                            "name": "HasAmmo",
                            "returnDesc": "True if the turret has ammo",
                            "returnType": "bool"
                        },
                        {
                            "args": [
                                "Player"
                            ],
                            "argsDesc": [
                                "The Player object to check"
                            ],
                            "desc": "Gets whether the turret is agro towards a player",
                            "name": "IsAgro",
                            "returnDesc": "True if the turret is agro towards the player",
                            "returnType": "bool"
                        },
                        {
                            "args": [
                                "Player"
                            ],
                            "argsDesc": [
                                "The Player object to make friendly"
                            ],
                            "desc": "Makes the player a friendly to this turret",
                            "name": "MakeFriendly",
                            "returnDesc": "True if the player was successfully made friendly",
                            "returnType": "bool"
                        },
                        {
                            "args": [
                                "Player"
                            ],
                            "argsDesc": [
                                "The Player object to make hostile"
                            ],
                            "desc": "Makes the player a hostile to this turret",
                            "name": "MakeHostile",
                            "returnDesc": "True if the player was successfully made hostile",
                            "returnType": "bool"
                        }
                    ],
                    "name": "Turret"
                },
                {
                    "functions": [
                        {
                            "desc": "Gets the amount of VentzCoin this miner has mined.",
                            "name": "GetAmountMined",
                            "returnDesc": "The amount of VentzCoin this miner has mined.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the core power of the CPU.",
                            "name": "GetCorePower",
                            "returnDesc": "The core power of the CPU.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the status of this VCMiner",
                            "name": "GetStatus",
                            "returnDesc": "The status of this VCMiner",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets the temperature of the VCMiner.",
                            "name": "GetTemperature",
                            "returnDesc": "The temperature of the VCMiner.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the VCMiner wallet.",
                            "name": "GetWallet",
                            "returnDesc": "The VCMiner wallet.",
                            "returnType": "string"
                        },
                        {
                            "argsDesc": [
                                "True if the miner has a cooler."
                            ],
                            "desc": "Gets whether the miner has a cooler.",
                            "name": "HasCooler",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Gets whether the VCMiner has a valid wallet set.",
                            "name": "HasValidWallet",
                            "returnDesc": "True if the VCMiner has a valid wallet set.",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Gets whether the VCMiner is mining.",
                            "name": "IsMining",
                            "returnDesc": "True if the VCMiner is mining.",
                            "returnType": "bool"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The core power to set ( 0 - 200 )."
                            ],
                            "desc": "Sets the core power of the CPU ( 0 - 200 ).",
                            "name": "SetCorePower",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The wallet address to set."
                            ],
                            "desc": "Sets the VCMiner wallet.",
                            "name": "SetWallet",
                            "returnDesc": "A StringResult representing the success/fail of the operation.",
                            "returnType": "StringResult"
                        },
                        {
                            "desc": "Starts the VCMiner.",
                            "name": "StartMining",
                            "returnDesc": "true if the miner started, false if it was invalid or already mining.",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Stops the VCMiner.",
                            "name": "StopMining",
                            "returnType": "Unknown"
                        }
                    ],
                    "name": "VCMiner"
                }
            ],
            "functions": [
                {
                    "args": [],
                    "desc": "Attempts to find a connected Dispenser peripheral",
                    "example": "using Peripheral;\nusing Application;\n\nDispenser dispenser = Peripheral.GetConnectedDispenser();\n\nif(dispenser.IsValid() == false){\n    // If the dispenser was not connected to the terminal, quit.\n    Application.Exit();\n}",
                    "name": "GetConnectedDispenser",
                    "returnDesc": "The Dispenser entity",
                    "returnType": "Dispenser"
                },
                {
                    "args": [],
                    "desc": "Attempts to find a connected Sniffer peripheral",
                    "example": "using Peripheral;\nusing Application;\n\nSniffer sniffer = Peripheral.GetConnectedSniffer();\n\nif(sniffer.IsValid() == false){\n    // If the sniffer was not connected to the terminal, quit.\n    Application.Exit();\n}",
                    "name": "GetConnectedSniffer",
                    "returnDesc": "The Sniffer entity",
                    "returnType": "Sniffer"
                },
                {
                    "args": [],
                    "desc": "Attempts to find a connected Teleporter peripheral",
                    "example": "using Peripheral;\nusing Application;\n\nTeleporter teleporter = Peripheral.GetConnectedTeleporter();\n\nif(teleporter.IsValid() == false){\n    // If the teleporter was not connected to the terminal, quit.\n    Application.Exit();\n}",
                    "name": "GetConnectedTeleporter",
                    "returnDesc": "The Teleporter entity",
                    "returnType": "Teleporter"
                },
                {
                    "args": [],
                    "desc": "Finds all connected VCMiner peripherals.",
                    "example": "using Peripheral;\nusing Console;\nusing Array;\nusing System;\n\n// Asks the user to input the wallet\nConsole.WriteLine(\"Enter VentzCoin wallet:\");\nstring wallet = Console.ReadLine();\n\n// Finds all VCMiners connected and tries to start them.\n\nVCMiner[] miners = Peripheral.GetConnectedVCMiners();\nnumber numMiners = Array.Length(miners);\nnumber minerIndex = 1;\n\nwhile(minerIndex <= numMiners){\n    VCMiner miner = miners[minerIndex];\n\n    // See VCMiner.SetWallet documentation for more insight.\n    StringResult result = miner.SetWallet(wallet);\n\n    if(result.GetResult() == true){\n        // The miner set wallet successfully.\n        Console.WriteLine(\"VCMiner wallet set.\");\n    }else{\n        // If the miner failed to set wallet, result string will contain the error reason.\n        Console.WriteLine(\"Error setting wallet: \"..result.GetString());\n    }\n\n    miner.StartMining();\n\n    // Move on to the next VCMiner\n    minerIndex = minerIndex + 1;\n}",
                    "name": "GetConnectedVCMiners",
                    "returnDesc": "An array of connected VCMiner peripherals.",
                    "returnType": "VCMiner[]"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The wallet address"
                    ],
                    "desc": "Sets the wallet address for all connected VCMiners",
                    "name": "SetAllVCMinerWallet",
                    "returnDesc": "The number of miners which successfully changed their wallet address",
                    "returnType": "number"
                },
                {
                    "args": [],
                    "desc": "Starts all connected VCMiners mining",
                    "name": "StartAllVCMiners",
                    "returnDesc": "The number of miners successfully started",
                    "returnType": "number"
                },
                {
                    "args": [],
                    "desc": "Stops all connected VCMiners mining",
                    "name": "StopAllVCMiners",
                    "returnType": "Unknown"
                },
                {
                    "args": [
                        "Player"
                    ],
                    "argsDesc": [
                        "The player"
                    ],
                    "desc": "Registers a player as friendly to all connected turrets",
                    "name": "TurretMakeFriendly",
                    "returnType": "Unknown"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The SteamID"
                    ],
                    "desc": "Registers a steamid as friendly to all connected turrets",
                    "name": "TurretMakeFriendlySteamID",
                    "returnType": "Unknown"
                },
                {
                    "args": [
                        "Player"
                    ],
                    "argsDesc": [
                        "The player"
                    ],
                    "desc": "Registers a player as hostile to all connected turrets",
                    "name": "TurretMakeHostile",
                    "returnType": "Unknown"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The SteamID"
                    ],
                    "desc": "Registers a steamid as hostile to all connected turrets",
                    "name": "TurretMakeHostileSteamID",
                    "returnType": "Unknown"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The text to display"
                    ],
                    "desc": "Sets the display text on all connected turrets",
                    "name": "TurretSetText",
                    "returnType": "Unknown"
                }
            ],
            "name": "Peripheral"
        },
        {
            "classes": [
                {
                    "functions": [
                        {
                            "args": [],
                            "desc": "Gets the player's armor",
                            "name": "GetArmor",
                            "returnDesc": "The player's armor",
                            "returnType": "number"
                        },
                        {
                            "args": [],
                            "desc": "Gets the player's health",
                            "name": "GetHealth",
                            "returnDesc": "The player's health",
                            "returnType": "number"
                        },
                        {
                            "args": [],
                            "desc": "Gets the player's DarkRP job name",
                            "name": "GetJob",
                            "returnDesc": "The player's DarkRP job name",
                            "returnType": "string"
                        },
                        {
                            "args": [],
                            "desc": "Gets the player's DarkRP job ID",
                            "name": "GetJobID",
                            "returnDesc": "The player's DarkRP job ID",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the players playermodel string",
                            "name": "GetModel",
                            "returnDesc": "The model string for the player's playermodel",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets the player's name",
                            "name": "GetName",
                            "returnDesc": "The player's name",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets the player's SteamID",
                            "name": "GetSteamID",
                            "returnDesc": "The player's SteamID",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets the player's SteamID64",
                            "name": "GetSteamID64",
                            "returnDesc": "The player's SteamID64",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets the player's wanted reason",
                            "name": "GetWantedReason",
                            "returnDesc": "The player's wanted reason",
                            "returnType": "string"
                        },
                        {
                            "args": [],
                            "desc": "Returns true if player has a gun license",
                            "name": "HasGunlicense",
                            "returnDesc": "True if the player has a gun license",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Returns whether the player is alive",
                            "name": "IsAlive",
                            "returnDesc": "True if the player is alive",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Returns whether the player is cp",
                            "name": "IsCP",
                            "returnDesc": "True if the player is cp",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Returns whether the player is valid",
                            "name": "IsValid",
                            "returnDesc": "True if the player is valid",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Returns whether the player is wanted",
                            "name": "IsWanted",
                            "returnDesc": "True if the player is wanted",
                            "returnType": "bool"
                        }
                    ],
                    "name": "Player"
                }
            ],
            "functions": [
                {
                    "args": [],
                    "desc": "Returns an array of all online Players",
                    "example": "using Player;\nusing Console;\nusing Array;\n\n// Finds all the players, and prints all their names.\n\nPlayer[] plys = Player.GetAll();\nnumber numPlys = Array.Length(plys);\n\nnumber i = 0;\nwhile(i < numPlys){\n    i = i + 1;\n\n    Player ply = plys[i];\n    Console.WriteLine(\"Player: \"..ply.GetName());\n}",
                    "name": "GetAll",
                    "returnDesc": "The array of Players",
                    "returnType": "Player[]"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The SteamID to search for"
                    ],
                    "desc": "Returns the Player with the given SteamID",
                    "example": "using Player;\nusing Console;\n\n// Finds a player with the SteamID STEAM_0:1:34409736, checks if they are online and shows their name.\n\nPlayer ply = Player.GetBySteamID(\"STEAM_0:1:34409736\");\n\nif(ply.IsValid()){\n    Console.WriteLine(\"Player online: \"..ply.GetName());\n}else{\n    Console.WriteLine(\"The player is not online :(\");\n}",
                    "name": "GetBySteamID",
                    "returnDesc": "The found Player",
                    "returnType": "Player"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The SteamID64 to convert"
                    ],
                    "desc": "Returns the SteamID representation of the SteamID64",
                    "example": "using Player;\nusing Console;\n\n// Prints the 32 bit version of the SteamID 76561198029085201\n\nvar steamid = Player.SteamIDFrom64(\"76561198029085201\");\nConsole.WriteLine(\"SteamID: \"..steamid);",
                    "name": "SteamIDFrom64",
                    "returnDesc": "The SteamID",
                    "returnType": "string"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The SteamID to convert"
                    ],
                    "desc": "Returns the SteamID64 representation of the SteamID",
                    "example": "using Player;\nusing Console;\n\n// Prints the 64 bit version of the SteamID STEAM_0:1:34409736\n\nvar steamid64 = Player.SteamIDTo64(\"STEAM_0:1:34409736\");\nConsole.WriteLine(\"64 bit SteamID: \"..steamid64);\n\n// SteamID54 is also used in steam account links\n// So we can create the link to someone's profile using them!\n\nstring profileLink = \"http://steamcommunity.com/profiles/\"..steamid64;",
                    "name": "SteamIDTo64",
                    "returnDesc": "The SteamID64",
                    "returnType": "string"
                }
            ],
            "name": "Player"
        },
        {
            "classes": [
                {
                    "functions": [
                        {
                            "desc": "Returns whether the specified secret exists",
                            "name": "Exists",
                            "returnDesc": "True if the secret exists",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Returns the name of this secret",
                            "name": "GetName",
                            "returnDesc": "The name of the encapsulated secret",
                            "returnType": "string"
                        }
                    ],
                    "name": "Secret"
                }
            ],
            "functions": [
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The name of the secret to retreive"
                    ],
                    "desc": "Returns the secret with the given name",
                    "example": "using Secrets;\nSecret discordRequestKey = Secrets.GetSecret(\"discord-api-key\");\n                ",
                    "name": "GetSecret",
                    "returnDesc": "The found Player",
                    "returnType": "Secret"
                }
            ],
            "name": "Secrets"
        },
        {
            "classes": [
                {
                    "functions": [
                        {
                            "desc": "Gets whether this server can execute MNScript.",
                            "name": "CanExecuteMNScript",
                            "returnDesc": "True if the server can execute MNScript.",
                            "returnType": "bool"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The remote directory to search."
                            ],
                            "desc": "Returns whether the remote directory exists.",
                            "name": "DirectoryExists",
                            "returnDesc": "True if directory exists.",
                            "returnType": "bool"
                        },
                        {
                            "args": [
                                "string",
                                "string"
                            ],
                            "argsDesc": [
                                "The remote directory to search.",
                                "The remote file to look for."
                            ],
                            "desc": "Returns whether the remote file exists in the directory.",
                            "name": "FileExists",
                            "returnDesc": "True if file exists in the directory.",
                            "returnType": "bool"
                        },
                        {
                            "args": [
                                "string",
                                "string"
                            ],
                            "argsDesc": [
                                "The remote directory to search.",
                                "The remote file to look for."
                            ],
                            "desc": "Returns the size of the remote file in bytes.",
                            "name": "FileSize",
                            "returnDesc": "The size of the file in bytes.",
                            "returnType": "number"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The directory to search."
                            ],
                            "desc": "Returns an array of files in the given directory.",
                            "name": "FindFiles",
                            "returnDesc": "An array of files found in the directory.",
                            "returnType": "string[]"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The remote directory to search."
                            ],
                            "desc": "Returns an array of folders in the given remote directory.",
                            "name": "FindFolders",
                            "returnDesc": "An array of folders found in the remote directory.",
                            "returnType": "string[]"
                        },
                        {
                            "desc": "Gets the clock speed of this server.",
                            "name": "GetClockSpeed",
                            "returnDesc": "The server's clock speed, affects MNScript execution speed.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the IPs connected via SSH to this server.",
                            "name": "GetConnectedIPs",
                            "returnDesc": "An array of IPs connected to this server via SSH.",
                            "returnType": "string[]"
                        },
                        {
                            "args": [],
                            "desc": "Returns the capacity of the server's disk in bytes.",
                            "name": "GetDiskCapacity",
                            "returnDesc": "The capacity of the server's disk in bytes.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the primary IP for this server.",
                            "name": "GetIP",
                            "returnDesc": "The primary IP for this server.",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets the list of IPs on this server.",
                            "name": "GetIPs",
                            "returnDesc": "The list of IPs on this server.",
                            "returnType": "string[]"
                        },
                        {
                            "desc": "Gets the MAC address for this server.",
                            "name": "GetMac",
                            "returnDesc": "The MAC address of this server.",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets the RAM of this server.",
                            "name": "GetMemory",
                            "returnDesc": "The server's RAM, affects MNScript memory limits.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the name assigned to this server in the Maxnet database.",
                            "name": "GetName",
                            "returnDesc": "The name assigned to this server in the Maxnet database.",
                            "returnType": "string"
                        },
                        {
                            "args": [],
                            "desc": "Returns the used capacity of the server's disk in bytes.",
                            "name": "GetUsedCapacity",
                            "returnDesc": "The used capacity of the server's disk in bytes.",
                            "returnType": "number"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "desc": "Gets whether the SteamID is authorized to use the server.",
                            "name": "IsSteamIDAuthorized",
                            "returnDesc": "True if the SteamID is authorized to use the server.",
                            "returnType": "bool"
                        }
                    ],
                    "name": "RemoteServer"
                }
            ],
            "functions": [
                {
                    "args": [
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The name of the secret",
                        "The value of the secret"
                    ],
                    "desc": "Adds or updates a secret on the remote server",
                    "name": "AddSecret",
                    "returnDesc": "A StringResult representing the success of the operation",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The IP address of the remote server."
                    ],
                    "desc": "Attempts to establish an SSH connection to the remote server.",
                    "name": "Connect",
                    "returnDesc": "A StringResult representing the success of the connection.",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "string",
                        "string"
                    ],
                    "desc": "Creates a folder in the remote server.",
                    "name": "CreateFolder",
                    "returnDesc": "A StringResult representing the success of the operation.",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "string",
                        "string"
                    ],
                    "desc": "Deletes a file from the remote server.",
                    "name": "DeleteFile",
                    "returnDesc": "A StringResult representing the success of the operation.",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "string"
                    ],
                    "desc": "Deletes a folder from the remote server.",
                    "name": "DeleteFolder",
                    "returnDesc": "A StringResult representing the success of the operation.",
                    "returnType": "StringResult"
                },
                {
                    "args": [],
                    "desc": "Attempts to disconnect an SSH connection.",
                    "name": "Disconnect",
                    "returnDesc": "A StringResult representing the success of the operation.",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "string",
                        "string",
                        "string"
                    ],
                    "desc": "Downloads a file from the remote server.",
                    "name": "Download",
                    "returnDesc": "A StringResult representing the success of the operation.",
                    "returnType": "StringResult"
                },
                {
                    "args": [],
                    "desc": "Gets a RemoteServer representing the connected server.",
                    "name": "GetConnectedServer",
                    "returnDesc": "A RemoteServer representing the connected server.",
                    "returnType": "RemoteServer"
                },
                {
                    "args": [],
                    "desc": "Gets all terminals connected to the current SSH server.",
                    "name": "GetConnectedTerminals",
                    "returnDesc": "An array of IPs connected to the current SSH server. (Empty array if not conncted to a server)",
                    "returnType": "string[]"
                },
                {
                    "args": [],
                    "desc": "Gets the IP connected to via SSH.",
                    "name": "GetConnectionIP",
                    "returnDesc": "The IP connected to via SSH. (N/A if no connection is present)",
                    "returnType": "string"
                },
                {
                    "args": [],
                    "desc": "Gets a list of all running MNScript processes on the remote server.",
                    "name": "GetRunningProcesses",
                    "returnDesc": "A list of all running MNScript processes on the remote server.",
                    "returnType": "Process[]"
                },
                {
                    "args": [],
                    "desc": "Gets an array of all secret names on stored on the SSH server.",
                    "name": "GetSecrets",
                    "returnDesc": "An array of strings containing all secret names stored on the SSH server, or a null object if not connected.",
                    "returnType": "string[]"
                },
                {
                    "args": [],
                    "desc": "Gets whether an active SSH connection is established.",
                    "name": "IsConnected",
                    "returnDesc": "True if an active SSH connection is established.",
                    "returnType": "bool"
                },
                {
                    "args": [
                        "string"
                    ],
                    "desc": "Gets whether a process with the given Id is running on the remote server.",
                    "name": "IsProcessRunning",
                    "returnDesc": "True if a process with the given Id is running on the remote server.",
                    "returnType": "bool"
                },
                {
                    "args": [
                        "string"
                    ],
                    "desc": "Gets the runtime of a process with the given Id.",
                    "name": "ProcessRuntime",
                    "returnDesc": "The runtime of a process with the given Id.",
                    "returnType": "number"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The name of the secret to remove"
                    ],
                    "desc": "Removes a secret from the remote server",
                    "name": "RemoveSecret",
                    "returnDesc": "A StringResult representing the success of the operation",
                    "returnType": "StringResult"
                },
                {
                    "args": [
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The remote directory containing the program.",
                        "The remote program file name."
                    ],
                    "desc": "Executes an MNScript .mscx file on the remote server.",
                    "example": "using System;\nusing Console;\n\nif(SSH.IsConnected()){\n    StringResult result = SSH.StartProcess(\"c/programs\", \"MyProgram.mscx\");\n\n    if(result.GetResult()){\n        Console.WriteLine(\"Remote process started\");\n    }else{\n        // If the program failed to start, the error will be in the result's string.\n        Console.WriteLine(\"Error: \"..result.GetString());\n    }\n}",
                    "name": "StartProcess",
                    "returnDesc": "A StringResult representing the success of the operation.",
                    "returnType": "StringResult"
                },
                {
                    "args": [],
                    "desc": "Closes all active MNScript processes on the remote server.",
                    "name": "StopAllProcesses",
                    "returnDesc": "The number of processes stopped.",
                    "returnType": "number"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The process identifier."
                    ],
                    "desc": "Stops an MNScript process with the given name on the remote server.",
                    "example": "using System;\n\nif(SSH.IsConnected()){\n    SSH.StopProcess(\"myProgramId\");\n}",
                    "name": "StopProcess",
                    "returnDesc": "True if the program was stopped",
                    "returnType": "bool"
                },
                {
                    "args": [
                        "string",
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The local directory of the file to upload.",
                        "The local file name.",
                        "The remote directory to upload to."
                    ],
                    "desc": "Uploads a file to the remote server.",
                    "name": "Upload",
                    "returnDesc": "A StringResult representing the success of the operation.",
                    "returnType": "StringResult"
                }
            ],
            "name": "SSH"
        },
        {
            "classes": [],
            "functions": [
                {
                    "args": [
                        "string",
                        "number"
                    ],
                    "argsDesc": [
                        "A single character to get the character code of.",
                        "The character of the string to get the byte of."
                    ],
                    "desc": "Returns the ASCII character code of the character provided.",
                    "name": "Byte",
                    "returnDesc": "Numerical byte",
                    "returnType": "number"
                },
                {
                    "args": [
                        "string",
                        "number",
                        "number"
                    ],
                    "argsDesc": [
                        "The string to get the chars from.",
                        "The first character of the string to get the byte of.",
                        "The last character of the string to get the byte of."
                    ],
                    "desc": "Returns the given string's characters in their numeric ASCII representation. < 8000 characters.",
                    "name": "Bytes",
                    "returnDesc": "Numerical bytes",
                    "returnType": "number[]"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The byte to create the string from."
                    ],
                    "desc": "Takes the given numerical byte and converts it to a string.",
                    "name": "Char",
                    "returnDesc": "The character from the byte.",
                    "returnType": "string"
                },
                {
                    "args": [
                        "string",
                        "number"
                    ],
                    "argsDesc": [
                        "The string",
                        "The index"
                    ],
                    "desc": "Returns a character at the index of the string",
                    "name": "CharAt",
                    "returnDesc": "The substring",
                    "returnType": "string"
                },
                {
                    "args": [
                        "number[]"
                    ],
                    "argsDesc": [
                        "The bytes to create the string from."
                    ],
                    "desc": "Takes the given numerical bytes and converts them to a string.",
                    "name": "Chars",
                    "returnDesc": "The processed string after replacement.",
                    "returnType": "string"
                },
                {
                    "args": [
                        "any[]",
                        "string"
                    ],
                    "argsDesc": [
                        "The array to you want to concatinate",
                        "The delimeter"
                    ],
                    "desc": "Concatinates an array using a delimeter",
                    "example": "// Predefines\nusing Console;\nusing String;\n\n// EXAMPLE 1 - Illustration of Array.Length\nstring[] sentence = new string[5];\n\nsentence[1] = \"Sometimes\";\nsentence[2] = \"I\";\nsentence[3] = \"dream\";\nsentence[4] = \"about\";\nsentence[5] = \"cheese\"; // CHEEEEEEEESE\n\n//Concatenate the array using a comma\n\nstring concat = String.Concat(sentence, \", \");\n\n//Print out the string\n\nConsole.WriteLine(concat);",
                    "name": "Concat",
                    "returnDesc": "The array as a string seperated using the delimeter",
                    "returnType": "string"
                },
                {
                    "args": [
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The string",
                        "The substring to look for"
                    ],
                    "desc": "Looks for a substring within the first string",
                    "name": "Contains",
                    "returnDesc": "True if the segment exists in the string",
                    "returnType": "bool"
                },
                {
                    "args": [
                        "string",
                        "number"
                    ],
                    "argsDesc": [
                        "The string",
                        "The number of characters to get"
                    ],
                    "desc": "Returns the n-th first characters of the string",
                    "name": "Left",
                    "returnDesc": "The n-th first characters",
                    "returnType": "string"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The string"
                    ],
                    "desc": "Returns the length of a string",
                    "name": "Length",
                    "returnDesc": "The length of the string",
                    "returnType": "number"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The string"
                    ],
                    "desc": "Returns the lower case copy of the string",
                    "name": "Lower",
                    "returnDesc": "The lower case copy",
                    "returnType": "string"
                },
                {
                    "args": [
                        "string",
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The string to process.",
                        "The character(s) to replace.",
                        "The string to replace the characters with."
                    ],
                    "desc": "Replaces the given character(s) with the replacement.",
                    "name": "Replace",
                    "returnDesc": "The processed string after replacement.",
                    "returnType": "string"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The string"
                    ],
                    "desc": "Returns the string in reverse",
                    "name": "Reverse",
                    "returnDesc": "The reverse string",
                    "returnType": "string"
                },
                {
                    "args": [
                        "string",
                        "number"
                    ],
                    "argsDesc": [
                        "The string",
                        "The number of characters to get"
                    ],
                    "desc": "Returns the n-th last characters of the string",
                    "name": "Right",
                    "returnDesc": "The n-th last characters",
                    "returnType": "string"
                },
                {
                    "args": [
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The string to split.",
                        "The split delimiter."
                    ],
                    "desc": "Returns an array of strings split by the given delimiter.",
                    "name": "Split",
                    "returnDesc": "The array of split pieces.",
                    "returnType": "string[]"
                },
                {
                    "args": [
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The string",
                        "The segment to look for"
                    ],
                    "desc": "Returns whether the first string begins with the second string",
                    "name": "StartsWith",
                    "returnDesc": "True if the first string starts with the second string",
                    "returnType": "bool"
                },
                {
                    "args": [
                        "string",
                        "number",
                        "number"
                    ],
                    "argsDesc": [
                        "The string",
                        "The start index",
                        "The end index"
                    ],
                    "desc": "Returns a substring of from the start to end index",
                    "name": "Sub",
                    "returnDesc": "The substring",
                    "returnType": "string"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The string"
                    ],
                    "desc": "Trims blank space from either side of the string",
                    "name": "Trim",
                    "returnDesc": "The trimmed string",
                    "returnType": "string"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The string"
                    ],
                    "desc": "Trims blank space from the left of the string",
                    "name": "TrimLeft",
                    "returnDesc": "The trimmed string",
                    "returnType": "string"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The string"
                    ],
                    "desc": "Trims blank space from the right of the string",
                    "name": "TrimRight",
                    "returnDesc": "The trimmed string",
                    "returnType": "string"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The string"
                    ],
                    "desc": "Returns the upper case copy of the string",
                    "name": "Upper",
                    "returnDesc": "The upper case copy",
                    "returnType": "string"
                }
            ],
            "name": "String"
        },
        {
            "classes": [
                {
                    "functions": [
                        {
                            "args": [],
                            "desc": "Docks the element to the bottom.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the bottom.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockBottom();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockBottom",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to fill.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates four panels docked to the top, left, right and bottom\nMNGuiPanel topPanel = Surface.CreatePanel(pnl);\ntopPanel.DockTop();\n\nMNGuiPanel leftPanel = Surface.CreatePanel(pnl);\nleftPanel.DockLeft();\n\nMNGuiPanel rightPanel = Surface.CreatePanel(pnl);\nrightPanel.DockRight();\n\nMNGuiPanel bottomPanel = Surface.CreatePanel(pnl);\nbottomPanel.DockBottom();\n\nColor red = new Color(200,100,100,255);\n\n// The filled panel will take up the remaining area in the center of the screen.\nMNGuiPanel filledPanel = Surface.CreatePanel(pnl);\nfilledPanel.DockFill();\nfilledPanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockFill",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the left.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the left.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockLeft();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockLeft",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the right.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the right.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockRight();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockRight",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the top.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the top.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockTop();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockTop",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Returns whether the UI element is enabled.",
                            "name": "GetEnabled",
                            "returnDesc": "True if the UI element is enabled.",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Returns whether the UI element is valid.",
                            "example": "using Surface;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\nMNGuiPanel panel = Surface.CreatePanel(pnl);\n\n// This will be true.\nbool valid1 = panel.IsValid();\n\npanel.Remove();\n\n// This will be false.\nbool valid2 = panel.IsValid();",
                            "name": "IsValid",
                            "returnDesc": "True if the UI element is valid.",
                            "returnType": "bool"
                        },
                        {
                            "args": [],
                            "desc": "Removes the UI element.",
                            "name": "Remove",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "Color"
                            ],
                            "argsDesc": [
                                "The new background color."
                            ],
                            "desc": "Sets the UI element background color.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the right.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockTop();\n\nColor red = new Color(200,100,100,255);\npanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetBackgroundColor",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number",
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The left margin.",
                                "The top margin.",
                                "The right margin.",
                                "The bottom margin."
                            ],
                            "desc": "Sets the UI element dock margin.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates four panels docked to the top, left, right and bottom\nMNGuiPanel topPanel = Surface.CreatePanel(pnl);\ntopPanel.DockTop();\n\nMNGuiPanel leftPanel = Surface.CreatePanel(pnl);\nleftPanel.DockLeft();\n\nMNGuiPanel rightPanel = Surface.CreatePanel(pnl);\nrightPanel.DockRight();\n\nMNGuiPanel bottomPanel = Surface.CreatePanel(pnl);\nbottomPanel.DockBottom();\n\nColor red = new Color(200,100,100,255);\n\n// The filled panel will take up the remaining area in the center of the screen.\nMNGuiPanel filledPanel = Surface.CreatePanel(pnl);\nfilledPanel.DockFill();\n\n// The dock margin will add a 15 pixel border around the entire middle panel.\nfilledPanel.SetDockMargin(15, 15, 15, 15);\nfilledPanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetDockMargin",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "bool"
                            ],
                            "desc": "Sets whether the UI element is enabled.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and then disables it.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetEnabled(false);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetEnabled",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new height."
                            ],
                            "desc": "Sets the height of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's height to 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetHeight(150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetHeight",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The new avatar player."
                            ],
                            "desc": "Sets the avatar's player.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates an image and fills the screen.\nMNGuiAvatarImage avatar = Surface.CreateAvatarImage(pnl);\navatar.DockFill();\navatar.SetPlayer(\"76561198089568050\");\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetPlayer",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new X position.",
                                "The new Y position."
                            ],
                            "desc": "Sets the position of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// DO NOT USE SETPOS UNLESS YOU HAVE TO.\n// USE DOCKING INSTEAD, OR ELSE YOUR UI WILL NEVER SCALE TO ALL SCREENS PROPERLY.\n\n// Creates a panel and offsets it by 10, 10 on x, y;\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetPos(10, 10);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetPos",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new roundedness."
                            ],
                            "desc": "Sets the roundedness.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's corners to be more rounded.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetRounded(5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetRounded",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new X position scaled.",
                                "The new Y position scaled."
                            ],
                            "desc": "Sets the position of the UI element using a percentage (0-1).",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in the center of the screen.\n// We must offset the position by half the panel size to position it centered,\n// otherwise it's corner will be in the center instead.\nMNGuiPanel centeredPanel = Surface.CreatePanel(pnl);\ncenteredPanel.SetSize(100, 100);\ncenteredPanel.SetPos(-50, -50);\ncenteredPanel.SetScalePos(0.5, 0.5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetScalePos",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new width scaled.",
                                "The new height scaled."
                            ],
                            "desc": "Sets the size of the UI element using a percentage (0-1).",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel which fills half the screen's width and height.\nMNGuiPanel centeredPanel = Surface.CreatePanel(pnl);\ncenteredPanel.SetScaleSize(0.5, 0.5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetScaleSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new width.",
                                "The new height."
                            ],
                            "desc": "Sets the width and height of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's size to 150, 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetSize(150, 150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new width."
                            ],
                            "desc": "Sets the width of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's width to 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetWidth(150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetWidth",
                            "returnType": "Unknown"
                        }
                    ],
                    "name": "MNGuiAvatarImage"
                },
                {
                    "functions": [
                        {
                            "args": [],
                            "desc": "Docks the element to the bottom.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the bottom.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockBottom();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockBottom",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to fill.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates four panels docked to the top, left, right and bottom\nMNGuiPanel topPanel = Surface.CreatePanel(pnl);\ntopPanel.DockTop();\n\nMNGuiPanel leftPanel = Surface.CreatePanel(pnl);\nleftPanel.DockLeft();\n\nMNGuiPanel rightPanel = Surface.CreatePanel(pnl);\nrightPanel.DockRight();\n\nMNGuiPanel bottomPanel = Surface.CreatePanel(pnl);\nbottomPanel.DockBottom();\n\nColor red = new Color(200,100,100,255);\n\n// The filled panel will take up the remaining area in the center of the screen.\nMNGuiPanel filledPanel = Surface.CreatePanel(pnl);\nfilledPanel.DockFill();\nfilledPanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockFill",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the left.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the left.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockLeft();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockLeft",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the right.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the right.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockRight();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockRight",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the top.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the top.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockTop();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockTop",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "argsDesc": [
                                "The button's data."
                            ],
                            "desc": "Gets the button data.",
                            "name": "GetData",
                            "returnType": "string"
                        },
                        {
                            "args": [],
                            "desc": "Returns whether the UI element is enabled.",
                            "name": "GetEnabled",
                            "returnDesc": "True if the UI element is enabled.",
                            "returnType": "bool"
                        },
                        {
                            "args": [],
                            "argsDesc": [
                                "The button's tag."
                            ],
                            "desc": "Gets the button tag.",
                            "name": "GetTag",
                            "returnType": "string"
                        },
                        {
                            "desc": "Returns whether the UI element is valid.",
                            "example": "using Surface;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\nMNGuiPanel panel = Surface.CreatePanel(pnl);\n\n// This will be true.\nbool valid1 = panel.IsValid();\n\npanel.Remove();\n\n// This will be false.\nbool valid2 = panel.IsValid();",
                            "name": "IsValid",
                            "returnDesc": "True if the UI element is valid.",
                            "returnType": "bool"
                        },
                        {
                            "args": [],
                            "desc": "Removes the UI element.",
                            "name": "Remove",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "Color"
                            ],
                            "argsDesc": [
                                "The new background color."
                            ],
                            "desc": "Sets the UI element background color.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the right.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockTop();\n\nColor red = new Color(200,100,100,255);\npanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetBackgroundColor",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The new data."
                            ],
                            "desc": "Sets the button data. This is to get some data in Surface_ButtonPressed event.",
                            "name": "SetData",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number",
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The left margin.",
                                "The top margin.",
                                "The right margin.",
                                "The bottom margin."
                            ],
                            "desc": "Sets the UI element dock margin.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates four panels docked to the top, left, right and bottom\nMNGuiPanel topPanel = Surface.CreatePanel(pnl);\ntopPanel.DockTop();\n\nMNGuiPanel leftPanel = Surface.CreatePanel(pnl);\nleftPanel.DockLeft();\n\nMNGuiPanel rightPanel = Surface.CreatePanel(pnl);\nrightPanel.DockRight();\n\nMNGuiPanel bottomPanel = Surface.CreatePanel(pnl);\nbottomPanel.DockBottom();\n\nColor red = new Color(200,100,100,255);\n\n// The filled panel will take up the remaining area in the center of the screen.\nMNGuiPanel filledPanel = Surface.CreatePanel(pnl);\nfilledPanel.DockFill();\n\n// The dock margin will add a 15 pixel border around the entire middle panel.\nfilledPanel.SetDockMargin(15, 15, 15, 15);\nfilledPanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetDockMargin",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "bool"
                            ],
                            "desc": "Sets whether the UI element is enabled.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and then disables it.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetEnabled(false);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetEnabled",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The new font."
                            ],
                            "desc": "Sets the label font.",
                            "example": "using Surface;\nusing System;\n\n// Valid fonts:\n// - default\n// - code_pro\n// - arial\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a button using Code Pro font.\nMNGuiButton button = Surface.CreateButton(pnl);\nbutton.DockFill();\nbutton.SetText(\"My Button!\");\nbutton.SetFont(\"code_pro\");\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetFont",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new font size."
                            ],
                            "desc": "Sets the button font size (10-100).",
                            "name": "SetFontSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new height."
                            ],
                            "desc": "Sets the height of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's height to 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetHeight(150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetHeight",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "Color"
                            ],
                            "argsDesc": [
                                "The new background hover color."
                            ],
                            "desc": "Sets the button background hover color.",
                            "name": "SetHoverColor",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new X position.",
                                "The new Y position."
                            ],
                            "desc": "Sets the position of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// DO NOT USE SETPOS UNLESS YOU HAVE TO.\n// USE DOCKING INSTEAD, OR ELSE YOUR UI WILL NEVER SCALE TO ALL SCREENS PROPERLY.\n\n// Creates a panel and offsets it by 10, 10 on x, y;\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetPos(10, 10);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetPos",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new roundedness."
                            ],
                            "desc": "Sets the roundedness.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's corners to be more rounded.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetRounded(5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetRounded",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new X position scaled.",
                                "The new Y position scaled."
                            ],
                            "desc": "Sets the position of the UI element using a percentage (0-1).",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in the center of the screen.\n// We must offset the position by half the panel size to position it centered,\n// otherwise it's corner will be in the center instead.\nMNGuiPanel centeredPanel = Surface.CreatePanel(pnl);\ncenteredPanel.SetSize(100, 100);\ncenteredPanel.SetPos(-50, -50);\ncenteredPanel.SetScalePos(0.5, 0.5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetScalePos",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new width scaled.",
                                "The new height scaled."
                            ],
                            "desc": "Sets the size of the UI element using a percentage (0-1).",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel which fills half the screen's width and height.\nMNGuiPanel centeredPanel = Surface.CreatePanel(pnl);\ncenteredPanel.SetScaleSize(0.5, 0.5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetScaleSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new width.",
                                "The new height."
                            ],
                            "desc": "Sets the width and height of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's size to 150, 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetSize(150, 150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The new tag."
                            ],
                            "desc": "Sets the button tag. This is to know which button was pressed in Surface_ButtonPressed event.",
                            "name": "SetTag",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The new text."
                            ],
                            "desc": "Sets the label text.",
                            "name": "SetText",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "Color"
                            ],
                            "argsDesc": [
                                "The new text color."
                            ],
                            "desc": "Sets the label text color.",
                            "name": "SetTextColor",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new width."
                            ],
                            "desc": "Sets the width of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's width to 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetWidth(150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetWidth",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Aligns the text center.",
                            "name": "TextAlignCenter",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Aligns the text left.",
                            "name": "TextAlignLeft",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Aligns the text right.",
                            "name": "TextAlignRight",
                            "returnType": "Unknown"
                        }
                    ],
                    "name": "MNGuiButton"
                },
                {
                    "functions": [
                        {
                            "args": [],
                            "desc": "Docks the element to the bottom.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the bottom.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockBottom();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockBottom",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to fill.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates four panels docked to the top, left, right and bottom\nMNGuiPanel topPanel = Surface.CreatePanel(pnl);\ntopPanel.DockTop();\n\nMNGuiPanel leftPanel = Surface.CreatePanel(pnl);\nleftPanel.DockLeft();\n\nMNGuiPanel rightPanel = Surface.CreatePanel(pnl);\nrightPanel.DockRight();\n\nMNGuiPanel bottomPanel = Surface.CreatePanel(pnl);\nbottomPanel.DockBottom();\n\nColor red = new Color(200,100,100,255);\n\n// The filled panel will take up the remaining area in the center of the screen.\nMNGuiPanel filledPanel = Surface.CreatePanel(pnl);\nfilledPanel.DockFill();\nfilledPanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockFill",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the left.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the left.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockLeft();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockLeft",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the right.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the right.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockRight();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockRight",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the top.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the top.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockTop();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockTop",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Returns the frame's banner panel.",
                            "name": "GetBanner",
                            "returnDesc": "The frame's banner panel.",
                            "returnType": "MNGuiPanel"
                        },
                        {
                            "args": [],
                            "desc": "Returns whether the UI element is enabled.",
                            "name": "GetEnabled",
                            "returnDesc": "True if the UI element is enabled.",
                            "returnType": "bool"
                        },
                        {
                            "args": [],
                            "desc": "Returns the frame's background panel.",
                            "name": "GetPanel",
                            "returnDesc": "The frame's background panel.",
                            "returnType": "MNGuiPanel"
                        },
                        {
                            "args": [],
                            "desc": "Returns the frame's title label.",
                            "name": "GetTitle",
                            "returnDesc": "The frame's title label.",
                            "returnType": "MNGuiLabel"
                        },
                        {
                            "desc": "Returns whether the UI element is valid.",
                            "example": "using Surface;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\nMNGuiPanel panel = Surface.CreatePanel(pnl);\n\n// This will be true.\nbool valid1 = panel.IsValid();\n\npanel.Remove();\n\n// This will be false.\nbool valid2 = panel.IsValid();",
                            "name": "IsValid",
                            "returnDesc": "True if the UI element is valid.",
                            "returnType": "bool"
                        },
                        {
                            "args": [],
                            "desc": "Makes the frame into a full-screen application. ONLY WORKS ON KIOSK TERMINALS I.E ATMs or kiosk screens.",
                            "name": "MakeKiosk",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Minimises the frame to the home screen.",
                            "name": "Minimise",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Removes the UI element.",
                            "name": "Remove",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "Color"
                            ],
                            "argsDesc": [
                                "The new background color."
                            ],
                            "desc": "Sets the UI element background color.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the right.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockTop();\n\nColor red = new Color(200,100,100,255);\npanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetBackgroundColor",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number",
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The left margin.",
                                "The top margin.",
                                "The right margin.",
                                "The bottom margin."
                            ],
                            "desc": "Sets the UI element dock margin.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates four panels docked to the top, left, right and bottom\nMNGuiPanel topPanel = Surface.CreatePanel(pnl);\ntopPanel.DockTop();\n\nMNGuiPanel leftPanel = Surface.CreatePanel(pnl);\nleftPanel.DockLeft();\n\nMNGuiPanel rightPanel = Surface.CreatePanel(pnl);\nrightPanel.DockRight();\n\nMNGuiPanel bottomPanel = Surface.CreatePanel(pnl);\nbottomPanel.DockBottom();\n\nColor red = new Color(200,100,100,255);\n\n// The filled panel will take up the remaining area in the center of the screen.\nMNGuiPanel filledPanel = Surface.CreatePanel(pnl);\nfilledPanel.DockFill();\n\n// The dock margin will add a 15 pixel border around the entire middle panel.\nfilledPanel.SetDockMargin(15, 15, 15, 15);\nfilledPanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetDockMargin",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "bool"
                            ],
                            "desc": "Sets whether the UI element is enabled.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and then disables it.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetEnabled(false);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetEnabled",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new height."
                            ],
                            "desc": "Sets the height of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's height to 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetHeight(150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetHeight",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new X position.",
                                "The new Y position."
                            ],
                            "desc": "Sets the position of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// DO NOT USE SETPOS UNLESS YOU HAVE TO.\n// USE DOCKING INSTEAD, OR ELSE YOUR UI WILL NEVER SCALE TO ALL SCREENS PROPERLY.\n\n// Creates a panel and offsets it by 10, 10 on x, y;\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetPos(10, 10);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetPos",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new roundedness."
                            ],
                            "desc": "Sets the roundedness.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's corners to be more rounded.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetRounded(5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetRounded",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new X position scaled.",
                                "The new Y position scaled."
                            ],
                            "desc": "Sets the position of the UI element using a percentage (0-1).",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in the center of the screen.\n// We must offset the position by half the panel size to position it centered,\n// otherwise it's corner will be in the center instead.\nMNGuiPanel centeredPanel = Surface.CreatePanel(pnl);\ncenteredPanel.SetSize(100, 100);\ncenteredPanel.SetPos(-50, -50);\ncenteredPanel.SetScalePos(0.5, 0.5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetScalePos",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new width scaled.",
                                "The new height scaled."
                            ],
                            "desc": "Sets the size of the UI element using a percentage (0-1).",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel which fills half the screen's width and height.\nMNGuiPanel centeredPanel = Surface.CreatePanel(pnl);\ncenteredPanel.SetScaleSize(0.5, 0.5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetScaleSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new width.",
                                "The new height."
                            ],
                            "desc": "Sets the width and height of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's size to 150, 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetSize(150, 150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "desc": "Sets the frame's title.",
                            "name": "SetTitle",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new width."
                            ],
                            "desc": "Sets the width of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's width to 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetWidth(150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetWidth",
                            "returnType": "Unknown"
                        }
                    ],
                    "name": "MNGuiFrame"
                },
                {
                    "functions": [
                        {
                            "args": [],
                            "desc": "Docks the element to the bottom.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the bottom.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockBottom();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockBottom",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to fill.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates four panels docked to the top, left, right and bottom\nMNGuiPanel topPanel = Surface.CreatePanel(pnl);\ntopPanel.DockTop();\n\nMNGuiPanel leftPanel = Surface.CreatePanel(pnl);\nleftPanel.DockLeft();\n\nMNGuiPanel rightPanel = Surface.CreatePanel(pnl);\nrightPanel.DockRight();\n\nMNGuiPanel bottomPanel = Surface.CreatePanel(pnl);\nbottomPanel.DockBottom();\n\nColor red = new Color(200,100,100,255);\n\n// The filled panel will take up the remaining area in the center of the screen.\nMNGuiPanel filledPanel = Surface.CreatePanel(pnl);\nfilledPanel.DockFill();\nfilledPanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockFill",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the left.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the left.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockLeft();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockLeft",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the right.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the right.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockRight();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockRight",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the top.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the top.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockTop();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockTop",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Returns whether the UI element is enabled.",
                            "name": "GetEnabled",
                            "returnDesc": "True if the UI element is enabled.",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Returns whether the UI element is valid.",
                            "example": "using Surface;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\nMNGuiPanel panel = Surface.CreatePanel(pnl);\n\n// This will be true.\nbool valid1 = panel.IsValid();\n\npanel.Remove();\n\n// This will be false.\nbool valid2 = panel.IsValid();",
                            "name": "IsValid",
                            "returnDesc": "True if the UI element is valid.",
                            "returnType": "bool"
                        },
                        {
                            "args": [],
                            "desc": "Removes the UI element.",
                            "name": "Remove",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "Color"
                            ],
                            "argsDesc": [
                                "The new background color."
                            ],
                            "desc": "Sets the UI element background color.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the right.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockTop();\n\nColor red = new Color(200,100,100,255);\npanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetBackgroundColor",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number",
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The left margin.",
                                "The top margin.",
                                "The right margin.",
                                "The bottom margin."
                            ],
                            "desc": "Sets the UI element dock margin.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates four panels docked to the top, left, right and bottom\nMNGuiPanel topPanel = Surface.CreatePanel(pnl);\ntopPanel.DockTop();\n\nMNGuiPanel leftPanel = Surface.CreatePanel(pnl);\nleftPanel.DockLeft();\n\nMNGuiPanel rightPanel = Surface.CreatePanel(pnl);\nrightPanel.DockRight();\n\nMNGuiPanel bottomPanel = Surface.CreatePanel(pnl);\nbottomPanel.DockBottom();\n\nColor red = new Color(200,100,100,255);\n\n// The filled panel will take up the remaining area in the center of the screen.\nMNGuiPanel filledPanel = Surface.CreatePanel(pnl);\nfilledPanel.DockFill();\n\n// The dock margin will add a 15 pixel border around the entire middle panel.\nfilledPanel.SetDockMargin(15, 15, 15, 15);\nfilledPanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetDockMargin",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "bool"
                            ],
                            "desc": "Sets whether the UI element is enabled.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and then disables it.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetEnabled(false);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetEnabled",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new height."
                            ],
                            "desc": "Sets the height of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's height to 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetHeight(150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetHeight",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new X position.",
                                "The new Y position."
                            ],
                            "desc": "Sets the position of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// DO NOT USE SETPOS UNLESS YOU HAVE TO.\n// USE DOCKING INSTEAD, OR ELSE YOUR UI WILL NEVER SCALE TO ALL SCREENS PROPERLY.\n\n// Creates a panel and offsets it by 10, 10 on x, y;\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetPos(10, 10);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetPos",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new roundedness."
                            ],
                            "desc": "Sets the roundedness.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's corners to be more rounded.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetRounded(5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetRounded",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new X position scaled.",
                                "The new Y position scaled."
                            ],
                            "desc": "Sets the position of the UI element using a percentage (0-1).",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in the center of the screen.\n// We must offset the position by half the panel size to position it centered,\n// otherwise it's corner will be in the center instead.\nMNGuiPanel centeredPanel = Surface.CreatePanel(pnl);\ncenteredPanel.SetSize(100, 100);\ncenteredPanel.SetPos(-50, -50);\ncenteredPanel.SetScalePos(0.5, 0.5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetScalePos",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new width scaled.",
                                "The new height scaled."
                            ],
                            "desc": "Sets the size of the UI element using a percentage (0-1).",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel which fills half the screen's width and height.\nMNGuiPanel centeredPanel = Surface.CreatePanel(pnl);\ncenteredPanel.SetScaleSize(0.5, 0.5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetScaleSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new width.",
                                "The new height."
                            ],
                            "desc": "Sets the width and height of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's size to 150, 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetSize(150, 150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The new image Url."
                            ],
                            "desc": "Sets the image Url. This should be a direct image link, E.G: https://i.imgur.com/jTJVvpa.jpeg",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates an image and fills the screen.\nMNGuiImage img = Surface.CreateImage(pnl);\nimg.DockFill();\nimg.SetUrl(\"https://i.imgur.com/jTJVvpa.jpeg\");\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetUrl",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new width."
                            ],
                            "desc": "Sets the width of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's width to 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetWidth(150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetWidth",
                            "returnType": "Unknown"
                        }
                    ],
                    "name": "MNGuiImage"
                },
                {
                    "functions": [
                        {
                            "args": [],
                            "desc": "Docks the element to the bottom.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the bottom.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockBottom();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockBottom",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to fill.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates four panels docked to the top, left, right and bottom\nMNGuiPanel topPanel = Surface.CreatePanel(pnl);\ntopPanel.DockTop();\n\nMNGuiPanel leftPanel = Surface.CreatePanel(pnl);\nleftPanel.DockLeft();\n\nMNGuiPanel rightPanel = Surface.CreatePanel(pnl);\nrightPanel.DockRight();\n\nMNGuiPanel bottomPanel = Surface.CreatePanel(pnl);\nbottomPanel.DockBottom();\n\nColor red = new Color(200,100,100,255);\n\n// The filled panel will take up the remaining area in the center of the screen.\nMNGuiPanel filledPanel = Surface.CreatePanel(pnl);\nfilledPanel.DockFill();\nfilledPanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockFill",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the left.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the left.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockLeft();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockLeft",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the right.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the right.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockRight();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockRight",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the top.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the top.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockTop();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockTop",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "argsDesc": [
                                "The button's data."
                            ],
                            "desc": "Gets the button data.",
                            "name": "GetData",
                            "returnType": "string"
                        },
                        {
                            "args": [],
                            "desc": "Returns whether the UI element is enabled.",
                            "name": "GetEnabled",
                            "returnDesc": "True if the UI element is enabled.",
                            "returnType": "bool"
                        },
                        {
                            "args": [],
                            "argsDesc": [
                                "The button's tag."
                            ],
                            "desc": "Gets the button tag.",
                            "name": "GetTag",
                            "returnType": "string"
                        },
                        {
                            "desc": "Returns whether the UI element is valid.",
                            "example": "using Surface;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\nMNGuiPanel panel = Surface.CreatePanel(pnl);\n\n// This will be true.\nbool valid1 = panel.IsValid();\n\npanel.Remove();\n\n// This will be false.\nbool valid2 = panel.IsValid();",
                            "name": "IsValid",
                            "returnDesc": "True if the UI element is valid.",
                            "returnType": "bool"
                        },
                        {
                            "args": [],
                            "desc": "Removes the UI element.",
                            "name": "Remove",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "Color"
                            ],
                            "argsDesc": [
                                "The new background color."
                            ],
                            "desc": "Sets the UI element background color.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the right.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockTop();\n\nColor red = new Color(200,100,100,255);\npanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetBackgroundColor",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The new data."
                            ],
                            "desc": "Sets the button data. This is to get some data in Surface_InputButtonPressed event.",
                            "name": "SetData",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number",
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The left margin.",
                                "The top margin.",
                                "The right margin.",
                                "The bottom margin."
                            ],
                            "desc": "Sets the UI element dock margin.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates four panels docked to the top, left, right and bottom\nMNGuiPanel topPanel = Surface.CreatePanel(pnl);\ntopPanel.DockTop();\n\nMNGuiPanel leftPanel = Surface.CreatePanel(pnl);\nleftPanel.DockLeft();\n\nMNGuiPanel rightPanel = Surface.CreatePanel(pnl);\nrightPanel.DockRight();\n\nMNGuiPanel bottomPanel = Surface.CreatePanel(pnl);\nbottomPanel.DockBottom();\n\nColor red = new Color(200,100,100,255);\n\n// The filled panel will take up the remaining area in the center of the screen.\nMNGuiPanel filledPanel = Surface.CreatePanel(pnl);\nfilledPanel.DockFill();\n\n// The dock margin will add a 15 pixel border around the entire middle panel.\nfilledPanel.SetDockMargin(15, 15, 15, 15);\nfilledPanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetDockMargin",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "bool"
                            ],
                            "desc": "Sets whether the UI element is enabled.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and then disables it.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetEnabled(false);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetEnabled",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The new font."
                            ],
                            "desc": "Sets the label font.",
                            "example": "using Surface;\nusing System;\n\n// Valid fonts:\n// - default\n// - code_pro\n// - arial\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a button using Code Pro font.\nMNGuiInputButton button = Surface.CreateInputButton(pnl);\nbutton.DockFill();\nbutton.SetText(\"My Button!\");\nbutton.SetFont(\"code_pro\");\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetFont",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new font size."
                            ],
                            "desc": "Sets the button font size (10-100).",
                            "name": "SetFontSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new height."
                            ],
                            "desc": "Sets the height of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's height to 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetHeight(150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetHeight",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "Color"
                            ],
                            "argsDesc": [
                                "The new background hover color."
                            ],
                            "desc": "Sets the button background hover color.",
                            "name": "SetHoverColor",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new X position.",
                                "The new Y position."
                            ],
                            "desc": "Sets the position of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// DO NOT USE SETPOS UNLESS YOU HAVE TO.\n// USE DOCKING INSTEAD, OR ELSE YOUR UI WILL NEVER SCALE TO ALL SCREENS PROPERLY.\n\n// Creates a panel and offsets it by 10, 10 on x, y;\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetPos(10, 10);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetPos",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new roundedness."
                            ],
                            "desc": "Sets the roundedness.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's corners to be more rounded.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetRounded(5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetRounded",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new X position scaled.",
                                "The new Y position scaled."
                            ],
                            "desc": "Sets the position of the UI element using a percentage (0-1).",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in the center of the screen.\n// We must offset the position by half the panel size to position it centered,\n// otherwise it's corner will be in the center instead.\nMNGuiPanel centeredPanel = Surface.CreatePanel(pnl);\ncenteredPanel.SetSize(100, 100);\ncenteredPanel.SetPos(-50, -50);\ncenteredPanel.SetScalePos(0.5, 0.5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetScalePos",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new width scaled.",
                                "The new height scaled."
                            ],
                            "desc": "Sets the size of the UI element using a percentage (0-1).",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel which fills half the screen's width and height.\nMNGuiPanel centeredPanel = Surface.CreatePanel(pnl);\ncenteredPanel.SetScaleSize(0.5, 0.5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetScaleSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new width.",
                                "The new height."
                            ],
                            "desc": "Sets the width and height of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's size to 150, 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetSize(150, 150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The new tag."
                            ],
                            "desc": "Sets the button tag. This is to know which button was pressed in Surface_InputButtonPressed event.",
                            "name": "SetTag",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The new text."
                            ],
                            "desc": "Sets the label text.",
                            "name": "SetText",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "Color"
                            ],
                            "argsDesc": [
                                "The new text color."
                            ],
                            "desc": "Sets the label text color.",
                            "name": "SetTextColor",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The new input box title."
                            ],
                            "desc": "Sets the text which appears on the input box when clicked.",
                            "name": "SetTitle",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new width."
                            ],
                            "desc": "Sets the width of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's width to 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetWidth(150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetWidth",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Aligns the text center.",
                            "name": "TextAlignCenter",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Aligns the text left.",
                            "name": "TextAlignLeft",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Aligns the text right.",
                            "name": "TextAlignRight",
                            "returnType": "Unknown"
                        }
                    ],
                    "name": "MNGuiInputButton"
                },
                {
                    "functions": [
                        {
                            "args": [],
                            "desc": "Docks the element to the bottom.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the bottom.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockBottom();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockBottom",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to fill.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates four panels docked to the top, left, right and bottom\nMNGuiPanel topPanel = Surface.CreatePanel(pnl);\ntopPanel.DockTop();\n\nMNGuiPanel leftPanel = Surface.CreatePanel(pnl);\nleftPanel.DockLeft();\n\nMNGuiPanel rightPanel = Surface.CreatePanel(pnl);\nrightPanel.DockRight();\n\nMNGuiPanel bottomPanel = Surface.CreatePanel(pnl);\nbottomPanel.DockBottom();\n\nColor red = new Color(200,100,100,255);\n\n// The filled panel will take up the remaining area in the center of the screen.\nMNGuiPanel filledPanel = Surface.CreatePanel(pnl);\nfilledPanel.DockFill();\nfilledPanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockFill",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the left.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the left.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockLeft();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockLeft",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the right.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the right.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockRight();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockRight",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the top.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the top.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockTop();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockTop",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Returns whether the UI element is enabled.",
                            "name": "GetEnabled",
                            "returnDesc": "True if the UI element is enabled.",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Returns whether the UI element is valid.",
                            "example": "using Surface;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\nMNGuiPanel panel = Surface.CreatePanel(pnl);\n\n// This will be true.\nbool valid1 = panel.IsValid();\n\npanel.Remove();\n\n// This will be false.\nbool valid2 = panel.IsValid();",
                            "name": "IsValid",
                            "returnDesc": "True if the UI element is valid.",
                            "returnType": "bool"
                        },
                        {
                            "args": [],
                            "desc": "Removes the UI element.",
                            "name": "Remove",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "Color"
                            ],
                            "argsDesc": [
                                "The new background color."
                            ],
                            "desc": "Sets the UI element background color.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the right.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockTop();\n\nColor red = new Color(200,100,100,255);\npanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetBackgroundColor",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number",
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The left margin.",
                                "The top margin.",
                                "The right margin.",
                                "The bottom margin."
                            ],
                            "desc": "Sets the UI element dock margin.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates four panels docked to the top, left, right and bottom\nMNGuiPanel topPanel = Surface.CreatePanel(pnl);\ntopPanel.DockTop();\n\nMNGuiPanel leftPanel = Surface.CreatePanel(pnl);\nleftPanel.DockLeft();\n\nMNGuiPanel rightPanel = Surface.CreatePanel(pnl);\nrightPanel.DockRight();\n\nMNGuiPanel bottomPanel = Surface.CreatePanel(pnl);\nbottomPanel.DockBottom();\n\nColor red = new Color(200,100,100,255);\n\n// The filled panel will take up the remaining area in the center of the screen.\nMNGuiPanel filledPanel = Surface.CreatePanel(pnl);\nfilledPanel.DockFill();\n\n// The dock margin will add a 15 pixel border around the entire middle panel.\nfilledPanel.SetDockMargin(15, 15, 15, 15);\nfilledPanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetDockMargin",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "bool"
                            ],
                            "desc": "Sets whether the UI element is enabled.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and then disables it.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetEnabled(false);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetEnabled",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The new font."
                            ],
                            "desc": "Sets the label font.",
                            "example": "using Surface;\nusing System;\n\n// Valid fonts:\n// - default\n// - code_pro\n// - arial\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a label using Code Pro font.\nMNGuiLabel label = Surface.CreateLabel(pnl);\nlabel.DockFill();\nlabel.SetText(\"Hello World!\");\nlabel.SetFont(\"code_pro\");\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetFont",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new font size."
                            ],
                            "desc": "Sets the label font size (10-100).",
                            "name": "SetFontSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new height."
                            ],
                            "desc": "Sets the height of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's height to 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetHeight(150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetHeight",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new X position.",
                                "The new Y position."
                            ],
                            "desc": "Sets the position of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// DO NOT USE SETPOS UNLESS YOU HAVE TO.\n// USE DOCKING INSTEAD, OR ELSE YOUR UI WILL NEVER SCALE TO ALL SCREENS PROPERLY.\n\n// Creates a panel and offsets it by 10, 10 on x, y;\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetPos(10, 10);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetPos",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new roundedness."
                            ],
                            "desc": "Sets the roundedness.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's corners to be more rounded.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetRounded(5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetRounded",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new X position scaled.",
                                "The new Y position scaled."
                            ],
                            "desc": "Sets the position of the UI element using a percentage (0-1).",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in the center of the screen.\n// We must offset the position by half the panel size to position it centered,\n// otherwise it's corner will be in the center instead.\nMNGuiPanel centeredPanel = Surface.CreatePanel(pnl);\ncenteredPanel.SetSize(100, 100);\ncenteredPanel.SetPos(-50, -50);\ncenteredPanel.SetScalePos(0.5, 0.5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetScalePos",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new width scaled.",
                                "The new height scaled."
                            ],
                            "desc": "Sets the size of the UI element using a percentage (0-1).",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel which fills half the screen's width and height.\nMNGuiPanel centeredPanel = Surface.CreatePanel(pnl);\ncenteredPanel.SetScaleSize(0.5, 0.5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetScaleSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new width.",
                                "The new height."
                            ],
                            "desc": "Sets the width and height of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's size to 150, 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetSize(150, 150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "string"
                            ],
                            "argsDesc": [
                                "The new text."
                            ],
                            "desc": "Sets the label text.",
                            "name": "SetText",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "Color"
                            ],
                            "argsDesc": [
                                "The new text color."
                            ],
                            "desc": "Sets the label text color.",
                            "name": "SetTextColor",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new width."
                            ],
                            "desc": "Sets the width of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's width to 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetWidth(150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetWidth",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Aligns the text center.",
                            "name": "TextAlignCenter",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Aligns the text left.",
                            "name": "TextAlignLeft",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Aligns the text right.",
                            "name": "TextAlignRight",
                            "returnType": "Unknown"
                        }
                    ],
                    "name": "MNGuiLabel"
                },
                {
                    "functions": [
                        {
                            "args": [],
                            "desc": "Docks the element to the bottom.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the bottom.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockBottom();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockBottom",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to fill.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates four panels docked to the top, left, right and bottom\nMNGuiPanel topPanel = Surface.CreatePanel(pnl);\ntopPanel.DockTop();\n\nMNGuiPanel leftPanel = Surface.CreatePanel(pnl);\nleftPanel.DockLeft();\n\nMNGuiPanel rightPanel = Surface.CreatePanel(pnl);\nrightPanel.DockRight();\n\nMNGuiPanel bottomPanel = Surface.CreatePanel(pnl);\nbottomPanel.DockBottom();\n\nColor red = new Color(200,100,100,255);\n\n// The filled panel will take up the remaining area in the center of the screen.\nMNGuiPanel filledPanel = Surface.CreatePanel(pnl);\nfilledPanel.DockFill();\nfilledPanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockFill",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the left.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the left.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockLeft();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockLeft",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the right.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the right.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockRight();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockRight",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the top.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the top.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockTop();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockTop",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Returns whether the UI element is enabled.",
                            "name": "GetEnabled",
                            "returnDesc": "True if the UI element is enabled.",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Returns whether the UI element is valid.",
                            "example": "using Surface;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\nMNGuiPanel panel = Surface.CreatePanel(pnl);\n\n// This will be true.\nbool valid1 = panel.IsValid();\n\npanel.Remove();\n\n// This will be false.\nbool valid2 = panel.IsValid();",
                            "name": "IsValid",
                            "returnDesc": "True if the UI element is valid.",
                            "returnType": "bool"
                        },
                        {
                            "args": [],
                            "desc": "Removes the UI element.",
                            "name": "Remove",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "Color"
                            ],
                            "argsDesc": [
                                "The new background color."
                            ],
                            "desc": "Sets the UI element background color.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the right.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockTop();\n\nColor red = new Color(200,100,100,255);\npanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetBackgroundColor",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number",
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The left margin.",
                                "The top margin.",
                                "The right margin.",
                                "The bottom margin."
                            ],
                            "desc": "Sets the UI element dock margin.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates four panels docked to the top, left, right and bottom\nMNGuiPanel topPanel = Surface.CreatePanel(pnl);\ntopPanel.DockTop();\n\nMNGuiPanel leftPanel = Surface.CreatePanel(pnl);\nleftPanel.DockLeft();\n\nMNGuiPanel rightPanel = Surface.CreatePanel(pnl);\nrightPanel.DockRight();\n\nMNGuiPanel bottomPanel = Surface.CreatePanel(pnl);\nbottomPanel.DockBottom();\n\nColor red = new Color(200,100,100,255);\n\n// The filled panel will take up the remaining area in the center of the screen.\nMNGuiPanel filledPanel = Surface.CreatePanel(pnl);\nfilledPanel.DockFill();\n\n// The dock margin will add a 15 pixel border around the entire middle panel.\nfilledPanel.SetDockMargin(15, 15, 15, 15);\nfilledPanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetDockMargin",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "bool"
                            ],
                            "desc": "Sets whether the UI element is enabled.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and then disables it.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetEnabled(false);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetEnabled",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new height."
                            ],
                            "desc": "Sets the height of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's height to 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetHeight(150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetHeight",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new X position.",
                                "The new Y position."
                            ],
                            "desc": "Sets the position of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// DO NOT USE SETPOS UNLESS YOU HAVE TO.\n// USE DOCKING INSTEAD, OR ELSE YOUR UI WILL NEVER SCALE TO ALL SCREENS PROPERLY.\n\n// Creates a panel and offsets it by 10, 10 on x, y;\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetPos(10, 10);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetPos",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new roundedness."
                            ],
                            "desc": "Sets the roundedness.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's corners to be more rounded.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetRounded(5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetRounded",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new X position scaled.",
                                "The new Y position scaled."
                            ],
                            "desc": "Sets the position of the UI element using a percentage (0-1).",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in the center of the screen.\n// We must offset the position by half the panel size to position it centered,\n// otherwise it's corner will be in the center instead.\nMNGuiPanel centeredPanel = Surface.CreatePanel(pnl);\ncenteredPanel.SetSize(100, 100);\ncenteredPanel.SetPos(-50, -50);\ncenteredPanel.SetScalePos(0.5, 0.5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetScalePos",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new width scaled.",
                                "The new height scaled."
                            ],
                            "desc": "Sets the size of the UI element using a percentage (0-1).",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel which fills half the screen's width and height.\nMNGuiPanel centeredPanel = Surface.CreatePanel(pnl);\ncenteredPanel.SetScaleSize(0.5, 0.5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetScaleSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new width.",
                                "The new height."
                            ],
                            "desc": "Sets the width and height of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's size to 150, 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetSize(150, 150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new width."
                            ],
                            "desc": "Sets the width of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's width to 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetWidth(150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetWidth",
                            "returnType": "Unknown"
                        }
                    ],
                    "name": "MNGuiLoadingPanel"
                },
                {
                    "functions": [
                        {
                            "args": [],
                            "desc": "Docks the element to the bottom.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the bottom.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockBottom();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockBottom",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to fill.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates four panels docked to the top, left, right and bottom\nMNGuiPanel topPanel = Surface.CreatePanel(pnl);\ntopPanel.DockTop();\n\nMNGuiPanel leftPanel = Surface.CreatePanel(pnl);\nleftPanel.DockLeft();\n\nMNGuiPanel rightPanel = Surface.CreatePanel(pnl);\nrightPanel.DockRight();\n\nMNGuiPanel bottomPanel = Surface.CreatePanel(pnl);\nbottomPanel.DockBottom();\n\nColor red = new Color(200,100,100,255);\n\n// The filled panel will take up the remaining area in the center of the screen.\nMNGuiPanel filledPanel = Surface.CreatePanel(pnl);\nfilledPanel.DockFill();\nfilledPanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockFill",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the left.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the left.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockLeft();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockLeft",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the right.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the right.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockRight();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockRight",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Docks the element to the top.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the top.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockTop();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "DockTop",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [],
                            "desc": "Returns whether the UI element is enabled.",
                            "name": "GetEnabled",
                            "returnDesc": "True if the UI element is enabled.",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Returns whether the UI element is valid.",
                            "example": "using Surface;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\nMNGuiPanel panel = Surface.CreatePanel(pnl);\n\n// This will be true.\nbool valid1 = panel.IsValid();\n\npanel.Remove();\n\n// This will be false.\nbool valid2 = panel.IsValid();",
                            "name": "IsValid",
                            "returnDesc": "True if the UI element is valid.",
                            "returnType": "bool"
                        },
                        {
                            "args": [],
                            "desc": "Removes the UI element.",
                            "name": "Remove",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "Color"
                            ],
                            "argsDesc": [
                                "The new background color."
                            ],
                            "desc": "Sets the UI element background color.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and docks it to the right.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockTop();\n\nColor red = new Color(200,100,100,255);\npanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetBackgroundColor",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number",
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The left margin.",
                                "The top margin.",
                                "The right margin.",
                                "The bottom margin."
                            ],
                            "desc": "Sets the UI element dock margin.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates four panels docked to the top, left, right and bottom\nMNGuiPanel topPanel = Surface.CreatePanel(pnl);\ntopPanel.DockTop();\n\nMNGuiPanel leftPanel = Surface.CreatePanel(pnl);\nleftPanel.DockLeft();\n\nMNGuiPanel rightPanel = Surface.CreatePanel(pnl);\nrightPanel.DockRight();\n\nMNGuiPanel bottomPanel = Surface.CreatePanel(pnl);\nbottomPanel.DockBottom();\n\nColor red = new Color(200,100,100,255);\n\n// The filled panel will take up the remaining area in the center of the screen.\nMNGuiPanel filledPanel = Surface.CreatePanel(pnl);\nfilledPanel.DockFill();\n\n// The dock margin will add a 15 pixel border around the entire middle panel.\nfilledPanel.SetDockMargin(15, 15, 15, 15);\nfilledPanel.SetBackgroundColor(red);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetDockMargin",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "bool"
                            ],
                            "desc": "Sets whether the UI element is enabled.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and then disables it.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetEnabled(false);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetEnabled",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new height."
                            ],
                            "desc": "Sets the height of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's height to 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetHeight(150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetHeight",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new X position.",
                                "The new Y position."
                            ],
                            "desc": "Sets the position of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// DO NOT USE SETPOS UNLESS YOU HAVE TO.\n// USE DOCKING INSTEAD, OR ELSE YOUR UI WILL NEVER SCALE TO ALL SCREENS PROPERLY.\n\n// Creates a panel and offsets it by 10, 10 on x, y;\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetPos(10, 10);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetPos",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new roundedness."
                            ],
                            "desc": "Sets the roundedness.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's corners to be more rounded.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetRounded(5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetRounded",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new X position scaled.",
                                "The new Y position scaled."
                            ],
                            "desc": "Sets the position of the UI element using a percentage (0-1).",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in the center of the screen.\n// We must offset the position by half the panel size to position it centered,\n// otherwise it's corner will be in the center instead.\nMNGuiPanel centeredPanel = Surface.CreatePanel(pnl);\ncenteredPanel.SetSize(100, 100);\ncenteredPanel.SetPos(-50, -50);\ncenteredPanel.SetScalePos(0.5, 0.5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetScalePos",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new width scaled.",
                                "The new height scaled."
                            ],
                            "desc": "Sets the size of the UI element using a percentage (0-1).",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel which fills half the screen's width and height.\nMNGuiPanel centeredPanel = Surface.CreatePanel(pnl);\ncenteredPanel.SetScaleSize(0.5, 0.5);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetScaleSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number",
                                "number"
                            ],
                            "argsDesc": [
                                "The new width.",
                                "The new height."
                            ],
                            "desc": "Sets the width and height of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's size to 150, 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetSize(150, 150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetSize",
                            "returnType": "Unknown"
                        },
                        {
                            "args": [
                                "number"
                            ],
                            "argsDesc": [
                                "The new width."
                            ],
                            "desc": "Sets the width of the UI element.",
                            "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel in and sets it's width to 150.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.SetWidth(150);\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                            "name": "SetWidth",
                            "returnType": "Unknown"
                        }
                    ],
                    "name": "MNGuiPanel"
                }
            ],
            "functions": [
                {
                    "args": [],
                    "desc": "Creates an application frame for this program. Previous frames are also removed.",
                    "example": "using Surface;\nusing System;\n\n// Creates the application frame.\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                    "name": "CreateApplicationFrame",
                    "returnDesc": "The MNGuiFrame which was created.",
                    "returnType": "MNGuiFrame"
                },
                {
                    "args": [],
                    "desc": "Creates an application frame for this program and immediately sets it to be a kiosk frame. ONLY WORKS ON KIOSK TERMINALS I.E ATMs or kiosk screens.",
                    "example": "using Surface;\nusing System;\n\n// Creates the application frame.\n\nMNGuiFrame frame = Surface.CreateApplicationFrameAsKiosk();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                    "name": "CreateApplicationFrameAsKiosk",
                    "returnDesc": "The MNGuiFrame which was created.",
                    "returnType": "MNGuiFrame"
                },
                {
                    "args": [
                        "MNGuiPanel"
                    ],
                    "argsDesc": [
                        "The parent UI element to create the new image under."
                    ],
                    "desc": "Creates an avatar image on the specified UI element.",
                    "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates an avatar and fills the screen.\nMNGuiAvatarImage avatar = Surface.CreateAvatarImage(pnl);\navatar.DockFill();\navatar.SetPlayer(\"76561198089568050\");\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                    "name": "CreateAvatarImage",
                    "returnDesc": "The new MNGuiAvatarImage.",
                    "returnType": "MNGuiAvatarImage"
                },
                {
                    "args": [
                        "MNGuiPanel"
                    ],
                    "argsDesc": [
                        "The parent UI element to create the new button under."
                    ],
                    "desc": "Creates a button on the specified UI element.",
                    "name": "CreateButton",
                    "returnDesc": "The new MNGuiButton.",
                    "returnType": "MNGuiButton"
                },
                {
                    "args": [
                        "MNGuiPanel"
                    ],
                    "argsDesc": [
                        "The parent UI element to create the new image under."
                    ],
                    "desc": "Creates an image on the specified UI element.",
                    "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates an image and fills the screen.\nMNGuiImage img = Surface.CreateImage(pnl);\nimg.DockFill();\nimg.SetUrl(\"https://i.imgur.com/jTJVvpa.jpeg\");\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                    "name": "CreateImage",
                    "returnDesc": "The new MNGuiImage.",
                    "returnType": "MNGuiImage"
                },
                {
                    "args": [
                        "MNGuiPanel"
                    ],
                    "argsDesc": [
                        "The parent UI element to create the new input button under."
                    ],
                    "desc": "Creates an input button on the specified UI element.",
                    "name": "CreateInputButton",
                    "returnDesc": "The new MNGuiInputButton.",
                    "returnType": "MNGuiInputButton"
                },
                {
                    "args": [
                        "MNGuiPanel"
                    ],
                    "argsDesc": [
                        "The parent UI element to create the new label under."
                    ],
                    "desc": "Creates a label on the specified UI element.",
                    "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel and fills the screen with it.\nMNGuiLabel label = Surface.CreateLabel(pnl);\nlabel.DockFill();\nlabel.SetText(\"Hello World!\");\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                    "name": "CreateLabel",
                    "returnDesc": "The new MNGuiLabel.",
                    "returnType": "MNGuiLabel"
                },
                {
                    "args": [
                        "MNGuiPanel"
                    ],
                    "argsDesc": [
                        "The parent UI element to create the new loading panel under."
                    ],
                    "desc": "Creates a loading panel on the specified UI element.",
                    "name": "CreateLoadingPanel",
                    "returnDesc": "The new MNGuiLoadingPanel.",
                    "returnType": "MNGuiLoadingPanel"
                },
                {
                    "args": [
                        "MNGuiPanel"
                    ],
                    "argsDesc": [
                        "The parent UI element to create the new panel under."
                    ],
                    "desc": "Creates a panel on the specified UI element.",
                    "example": "using Surface;\nusing System;\n\nMNGuiFrame frame = Surface.CreateApplicationFrame();\nMNGuiPanel pnl = frame.GetPanel();\n\n// Creates a panel and fills the screen with it.\nMNGuiPanel panel = Surface.CreatePanel(pnl);\npanel.DockFill();\n\n// Update to add the new UI to the screen.\nSurface.Update();\n\n// Keep the program alive so the UI stays.\nwhile(true){\n    System.Sleep(1);\n}",
                    "name": "CreatePanel",
                    "returnDesc": "The new MNGuiPanel.",
                    "returnType": "MNGuiPanel"
                },
                {
                    "args": [
                        "number"
                    ],
                    "desc": "Returns a number from 0 - Screen Height.",
                    "example": "using Surface;\n\n// These values will be returned for the monitor which the application is currently on.\n// This means if the application is not open, or opens on a different monitor with a different size,\n// the values will no longer be accurate.\n// See event 'Surface_ApplicationScreenChanged' to reload your UI when the application is shown on a new screen.\n\nnumber screenHeight = Surface.ScreenScaleHeight(1);\nnumber halfScreenHeight = Surface.ScreenScaleHeight(0.5);",
                    "name": "ScreenScaleHeight",
                    "returnDesc": "A number from 0 - Screen Height interpolated using the input.",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number"
                    ],
                    "desc": "Returns a number from 0 - Screen Width.",
                    "example": "using Surface;\n\n// These values will be returned for the monitor which the application is currently on.\n// This means if the application is not open, or opens on a different monitor with a different size,\n// the values will no longer be accurate.\n// See event 'Surface_ApplicationScreenChanged' to reload your UI when the application is shown on a new screen.\n\nnumber screenWidth = Surface.ScreenScaleWidth(1);\nnumber halfScreenWidth = Surface.ScreenScaleWidth(0.5);",
                    "name": "ScreenScaleWidth",
                    "returnDesc": "A number from 0 - Screen Width interpolated using the input.",
                    "returnType": "number"
                },
                {
                    "args": [],
                    "desc": "Updates the UI and pushes all changes to the screen.",
                    "name": "Update",
                    "returnDesc": "True if the UI was successfully Updated.",
                    "returnType": "bool"
                },
                {
                    "args": [],
                    "desc": "Returns the current number of pending UI updates which have not yet been processed.\nOnly approximately 1 UI update can be processed each second, calling Surface.Update too often can cause this queue to grow large.",
                    "name": "UpdateQueueLength",
                    "returnDesc": "The number of pending UI updated.",
                    "returnType": "number"
                }
            ],
            "name": "Surface"
        },
        {
            "classes": [
                {
                    "functions": [
                        {
                            "desc": "Gets the alpha value.",
                            "name": "GetAlpha",
                            "returnDesc": "The alpha value.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the blue value.",
                            "name": "GetBlue",
                            "returnDesc": "The blue value.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the green value.",
                            "name": "GetGreen",
                            "returnDesc": "The green value.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the red value.",
                            "name": "GetRed",
                            "returnDesc": "The red value.",
                            "returnType": "number"
                        }
                    ],
                    "name": "Color"
                },
                {
                    "functions": [
                        {
                            "desc": "Gets the process Id.",
                            "name": "GetProcessId",
                            "returnDesc": "The process Id.",
                            "returnType": "number"
                        },
                        {
                            "desc": "Gets the directory which the program file exists in.",
                            "name": "GetProgramDirectory",
                            "returnDesc": "The directory which the program file exists in. Or an empty string if not applicable.",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets the file name of the program.",
                            "name": "GetProgramFilename",
                            "returnDesc": "The name of the file which the program was launched from. Or an empty string if not applicable.",
                            "returnType": "string"
                        },
                        {
                            "desc": "Gets whether the program has admin privilege.",
                            "name": "HasAdminPrivilege",
                            "returnDesc": "True if the program has admin privilege.",
                            "returnType": "bool"
                        }
                    ],
                    "name": "Process"
                },
                {
                    "functions": [
                        {
                            "desc": "Gets the boolean result",
                            "name": "GetResult",
                            "returnType": "bool"
                        },
                        {
                            "desc": "Gets the string result",
                            "name": "GetString",
                            "returnType": "string"
                        }
                    ],
                    "name": "StringResult"
                }
            ],
            "functions": [
                {
                    "args": [],
                    "desc": "Gets the computer's clock speed.",
                    "example": "using System;\n                \nnumber myClockSpeed = System.ClockSpeed();",
                    "name": "ClockSpeed",
                    "returnDesc": "The computer's instructions per second rate",
                    "returnType": "number"
                },
                {
                    "args": [],
                    "desc": "Returns the IP of the terminal",
                    "example": "using System;\nusing Console;\n\nstring ip = System.GetIP();\nConsole.WriteLine(\"The terminal IP is: \"..ip);",
                    "name": "GetIP",
                    "returnDesc": "The IP",
                    "returnType": "string"
                },
                {
                    "args": [],
                    "desc": "Returns the number of peripherals connected (directly or indirectly) to the terminal",
                    "name": "GetPeripheralCount",
                    "returnDesc": "The number of connected peripherals",
                    "returnType": "number"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The peripheral type"
                    ],
                    "desc": "Returns the number of connected peripherals with the given type (directly or indirectly)",
                    "name": "GetPeripheralTypeCount",
                    "returnDesc": "The number of peripherals found with the given type",
                    "returnType": "number"
                },
                {
                    "args": [],
                    "desc": "Gets a list of all running MNScript processes.",
                    "name": "GetRunningProcesses",
                    "returnDesc": "A list of all running MNScript processes.",
                    "returnType": "Process[]"
                },
                {
                    "args": [],
                    "desc": "Returns the Player using the terminal",
                    "example": "using System;\nusing Player;\nusing Console;\n\nPlayer ply = System.GetUser();\nif(ply.IsValid()){\n    Console.WriteLine(\"The player using the computer is: \"..ply.GetName());\n}",
                    "name": "GetUser",
                    "returnDesc": "The Player object",
                    "returnType": "Player"
                },
                {
                    "args": [],
                    "desc": "Returns the username logged in to the terminal",
                    "example": "using System;\nusing Console;\n\nstring username = System.GetUserName();\nConsole.WriteLine(\"The logged in user is: \"..username);",
                    "name": "GetUserName",
                    "returnDesc": "The logged in username",
                    "returnType": "string"
                },
                {
                    "args": [],
                    "desc": "Returns the SteamID for the account logged in to the terminal",
                    "example": "using System;\nusing Console;\n\nstring steamid = System.GetUserSteamID();\nConsole.WriteLine(\"The logged in user SteamID: \"..steamid);",
                    "name": "GetUserSteamID",
                    "returnDesc": "The logged in user's SteamID",
                    "returnType": "string"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The peripheral type"
                    ],
                    "desc": "Returns whether a peripheral with the given type is connected to the terminal",
                    "name": "HasPeripheral",
                    "returnDesc": "Whether a peripheral with the given type was found",
                    "returnType": "bool"
                },
                {
                    "args": [],
                    "desc": "Returns whether the system is a kiosk.",
                    "example": "using System;\nusing Console;\n\n// If you're running on a kiosk, certain things such as making a kiosk frame will not work.\nbool isKiosk = System.IsKiosk();\n\nif(isKiosk){\n    Console.WriteLine(\"This is a kiosk!\");\n}",
                    "name": "IsKiosk",
                    "returnDesc": "True if the system is a kiosk.",
                    "returnType": "bool"
                },
                {
                    "args": [],
                    "argsDesc": [],
                    "desc": "Returns whether the terminal is locked or not.",
                    "example": "using System;\nusing Console;\n\n//Prints whether the terminal is locked or not.\nConsole.WriteLine(\"Terminal Locked: \"..System.IsLocked());",
                    "name": "IsLocked",
                    "returnType": "bool"
                },
                {
                    "args": [
                        "string"
                    ],
                    "desc": "Gets whether a process with the given Id is running.",
                    "name": "IsProcessRunning",
                    "returnDesc": "True if a process with the given Id is running.",
                    "returnType": "bool"
                },
                {
                    "args": [],
                    "desc": "Returns whether the system is a server.",
                    "example": "using System;\n\n// If you're running on a server, certain things such as UI will cause your program to crash.\nbool isServer = System.IsServer();\n\nfunction CreateUI(){\n    // UI stuff here.\n}\n\nif(isServer){\n    // UI only works on terminals, so we can use IsServer to prevent our programs creating UI on servers.\n    CreateUI();\n}",
                    "name": "IsServer",
                    "returnDesc": "True if the system is a server.",
                    "returnType": "bool"
                },
                {
                    "args": [],
                    "argsDesc": [],
                    "desc": "Locks the terminal.",
                    "example": "using System;\n\nSystem.Lock();",
                    "name": "Lock",
                    "returnType": "Unknown"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The URL to the webpage to load"
                    ],
                    "desc": "Opens the web browser and loads the given URL",
                    "example": "using System;\n\nSystem.OpenWebpage(\"mn.cgpd.gov\");",
                    "name": "OpenWebpage",
                    "returnType": "Unknown"
                },
                {
                    "args": [
                        "string"
                    ],
                    "desc": "Gets the runtime of a process with the given Id.",
                    "name": "ProcessRuntime",
                    "returnDesc": "The runtime of a process with the given Id.",
                    "returnType": "number"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The console command (arguments split by spaces)"
                    ],
                    "desc": "Runs a console command",
                    "example": "using System;\n\nSystem.RunCommand(\"shutdown\"); // F in chat",
                    "name": "RunCommand",
                    "returnType": "Unknown"
                },
                {
                    "args": [],
                    "desc": "Shuts down the terminal",
                    "example": "using System;\n\n// Shuts down the computer.\nSystem.Shutdown();",
                    "name": "Shutdown",
                    "returnType": "Unknown"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The time in seconds to sleep"
                    ],
                    "desc": "Pauses the program for the given time",
                    "example": "using System;\n                \nSystem.Sleep(1); // Pauses the program for 1 second",
                    "name": "Sleep",
                    "returnType": "Unknown"
                },
                {
                    "args": [
                        "string",
                        "string"
                    ],
                    "argsDesc": [
                        "The directory containing the program.",
                        "The program file name."
                    ],
                    "desc": "Executes a MNScript .mscx file",
                    "example": "using System;\n\nSystem.StartProcess(\"r/documents\", \"MyProgram.mscx\");",
                    "name": "StartProcess",
                    "returnDesc": "True if the program was successfully started.",
                    "returnType": "bool"
                },
                {
                    "args": [],
                    "desc": "Closes all active MNScript processes.",
                    "name": "StopAllProcesses",
                    "returnDesc": "The number of processes stopped.",
                    "returnType": "number"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The process identifier."
                    ],
                    "desc": "Stops an MNScript process with the given name.",
                    "example": "using System;\n                    \nSystem.StopProcess(\"myProgramId\");",
                    "name": "StopProcess",
                    "returnDesc": "True if the program was stopped",
                    "returnType": "bool"
                },
                {
                    "args": [],
                    "desc": "Returns a highly accurate time since start up",
                    "example": "using System;\nusing Console;\nusing Util;\n                \nnumber time = System.SysTime();\nConsole.WriteLine(\"It has been \"..Util.ToString(time)..\" seconds since the server started!\");",
                    "name": "SysTime",
                    "returnDesc": "The time since server start up",
                    "returnType": "number"
                },
                {
                    "args": [],
                    "desc": "Returns the current system Unix time",
                    "example": "using System;\nusing Console;\nusing Util;\n\nnumber time = System.Time();\nConsole.WriteLine(\"It has been \"..time..\" seconds since 1970!\");",
                    "name": "Time",
                    "returnDesc": "The current system Unix time",
                    "returnType": "number"
                }
            ],
            "name": "System"
        },
        {
            "classes": [],
            "functions": [
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The string to calculate the checksum of"
                    ],
                    "desc": "Generates the CRC Checksum of the specified string.",
                    "name": "CRC",
                    "returnDesc": "The unsigned 32 bit checksum",
                    "returnType": "number"
                },
                {
                    "args": [
                        "number",
                        "string"
                    ],
                    "argsDesc": [
                        "The time to format",
                        "The format pattern."
                    ],
                    "desc": "Returns a formatted date.",
                    "example": "using System;\nusing Console;\nusing Util;\n\nnumber time = System.Time();\n\n// Formats [day/month/year - hour/minute/second]\nstring formattedTime = Util.Date(time, \"%d/%m/%Y - %H:%M:%S\");\n\nConsole.WriteLine(\"The date is: \"..formattedTime);\n\n// Known formats that work on all platforms:\n\n// Format   Description                 Example of the output\n// %a       Abbreviated weekday name    Wed\n// %A       Full weekday name           Wednesday\n// %b       Abbreviated month name      Sep\n// %B       Full month name             September\n// %c       Date and time               09/16/98 23:48:10\n// %d       Day of the month [01-31]    16\n// %H       Hour, 24-hour clock [00-23] 23\n// %I       Hour, 12-hour clock [01-12] 11\n// %j       Day of the year [001-365]   259\n// %m       Month [01-12]               09\n// %M       Minute [00-59]              48\n// %p       Either am or pm             pm\n// %S       Second [00-60]              10\n// %w       Weekday [0-6 = Sunday-Saturday]\t3\n// %W       Week of the year [00-53]    37\n// %x       Date                        09/16/98\n// %X       Time                        24:48:10\n// %y       Two-digit year [00-99]      98\n// %Y       Full year                   1998\n// %z       Timezone                    -0300\n// %%       A percent sign              %",
                    "name": "Date",
                    "returnDesc": "The formatted date.",
                    "returnType": "string"
                },
                {
                    "args": [
                        "number"
                    ],
                    "argsDesc": [
                        "The number to format"
                    ],
                    "desc": "Returns a formatted string for money",
                    "example": "using DarkRP;\n\n// Converts the number 100000 to the string \"£100,000\"\n\nstring formattedMoney = DarkRP.FormatMoney(100000);",
                    "name": "FormatMoney",
                    "returnDesc": "The formatted string",
                    "returnType": "string"
                },
                {
                    "args": [
                        "any"
                    ],
                    "argsDesc": [
                        "The variable to check."
                    ],
                    "desc": "Returns whether the variable is null.",
                    "name": "IsNull",
                    "returnDesc": "True if the variable is null.",
                    "returnType": "bool"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The string to convert"
                    ],
                    "desc": "Converts a string to a number",
                    "name": "ToNumber",
                    "returnDesc": "The converted number, or -1 if conversion failed",
                    "returnType": "number"
                },
                {
                    "args": [
                        "any"
                    ],
                    "argsDesc": [
                        "The value to convert"
                    ],
                    "desc": "Converts any input value to its string representation",
                    "name": "ToString",
                    "returnDesc": "The string representation of the value",
                    "returnType": "string"
                }
            ],
            "name": "Util"
        },
        {
            "classes": [
                {
                    "functions": [
                        {
                            "args": [],
                            "desc": "Gets the market cap of VentzCoin for this record",
                            "name": "GetMarketCap",
                            "returnDesc": "The VentzCoin market cap for this record",
                            "returnType": "number"
                        },
                        {
                            "args": [],
                            "desc": "Gets the supply of VentzCoin for this record",
                            "name": "GetSupply",
                            "returnDesc": "The VentzCoin supply for this record",
                            "returnType": "number"
                        },
                        {
                            "args": [],
                            "desc": "Gets the value of VentzCoin for this record",
                            "name": "GetValue",
                            "returnDesc": "The VentzCoin value for this record",
                            "returnType": "number"
                        }
                    ],
                    "name": "VentzCoinRecord"
                }
            ],
            "functions": [
                {
                    "args": [],
                    "desc": "Gets the VentzCoin market cap",
                    "example": "using Console;\nusing VentzCoin;\nusing Util;\n\n// Prints the current market cap of VentzCoin to the console.\n\nnumber mcap = VentzCoin.GetMarketCap();\nConsole.WriteLine(\"VC Market Cap: \"..mcap);",
                    "name": "GetMarketCap",
                    "returnDesc": "The VentzCoin market cap",
                    "returnType": "number"
                },
                {
                    "args": [],
                    "desc": "Gets the VentzCoin history for the past day.",
                    "example": "using Console;\nusing VentzCoin;\nusing Util;\nusing Array;\n\n// Prints the value of VentzCoin for each hour of the past day.\n\nVentzCoinRecord[] records = VentzCoin.GetRecordsDay();\nnumber numRecords = Array.Length(records);\nnumber recordIndex = 1;\n\nwhile(recordIndex <= numRecords){\n    VentzCoinRecord record = records[recordIndex];\n    \n    Console.WriteLine(\"Record \"..recordIndex..\": \"..record.GetValue());\n    recordIndex = recordIndex + 1;\n}",
                    "name": "GetRecordsDay",
                    "returnDesc": "24 records for each hour of the past day of VentzCoin",
                    "returnType": "VentzCoinRecord[]"
                },
                {
                    "args": [],
                    "desc": "Gets the VentzCoin history for the past hour.",
                    "example": "using Console;\nusing VentzCoin;\nusing Util;\nusing Array;\n\n// Prints the value of VentzCoin for each minute of the past hour.\n\nVentzCoinRecord[] records = VentzCoin.GetRecordsHour();\nnumber numRecords = Array.Length(records);\nnumber recordIndex = 1;\n\nwhile(recordIndex <= numRecords){\n    VentzCoinRecord record = records[recordIndex];\n    \n    Console.WriteLine(\"Record \"..recordIndex..\": \"..record.GetValue());\n    recordIndex = recordIndex + 1;\n}",
                    "name": "GetRecordsHour",
                    "returnDesc": "60 records for each minute of the past hour of VentzCoin",
                    "returnType": "VentzCoinRecord[]"
                },
                {
                    "args": [],
                    "desc": "Gets the VentzCoin history for the past minute.",
                    "example": "using Console;\nusing VentzCoin;\nusing Util;\nusing Array;\n\n// Prints the value of VentzCoin for each second of the past minute.\n\nVentzCoinRecord[] records = VentzCoin.GetRecordsMinute();\nnumber numRecords = Array.Length(records);\nnumber recordIndex = 1;\n\nwhile(recordIndex <= numRecords){\n    VentzCoinRecord record = records[recordIndex];\n    \n    Console.WriteLine(\"Record \"..recordIndex..\": \"..record.GetValue());\n    recordIndex = recordIndex + 1;\n}",
                    "name": "GetRecordsMinute",
                    "returnDesc": "60 records for each second of the past minute of VentzCoin",
                    "returnType": "VentzCoinRecord[]"
                },
                {
                    "args": [],
                    "desc": "Gets the VentzCoin history for the past month.",
                    "example": "using Console;\nusing VentzCoin;\nusing Util;\nusing Array;\n\n// Prints the value of VentzCoin for each day of the past month.\n\nVentzCoinRecord[] records = VentzCoin.GetRecordsMonth();\nnumber numRecords = Array.Length(records);\nnumber recordIndex = 1;\n\nwhile(recordIndex <= numRecords){\n    VentzCoinRecord record = records[recordIndex];\n    \n    Console.WriteLine(\"Record \"..recordIndex..\": \"..record.GetValue());\n    recordIndex = recordIndex + 1;\n}",
                    "name": "GetRecordsMonth",
                    "returnDesc": "30 records for each day of the past month of VentzCoin",
                    "returnType": "VentzCoinRecord[]"
                },
                {
                    "args": [],
                    "desc": "Gets the amount of VentzCoin in circulation",
                    "example": "using Console;\nusing VentzCoin;\nusing Util;\n\n// Prints the current supply of VentzCoin to the console.\n\nnumber supply = VentzCoin.GetSupply();\nConsole.WriteLine(\"VC Supply: \"..supply);",
                    "name": "GetSupply",
                    "returnDesc": "The number of VentzCoin in circulation",
                    "returnType": "number"
                },
                {
                    "args": [],
                    "desc": "Gets the current £ value of VentzCoin",
                    "example": "using Console;\nusing VentzCoin;\nusing Util;\n\n// Prints the current value of VentzCoin to the console.\n\nnumber value = VentzCoin.GetValue();\nConsole.WriteLine(\"VC Value: \"..value);",
                    "name": "GetValue",
                    "returnDesc": "The £ value of VentzCoin",
                    "returnType": "number"
                },
                {
                    "args": [
                        "string"
                    ],
                    "argsDesc": [
                        "The wallet to search for."
                    ],
                    "desc": "Gets the VentzCoin balance for a wallet. This only works for wallets owned by online players!",
                    "name": "GetWalletBalance",
                    "returnDesc": "The balance stored in the VentzCoin wallet.",
                    "returnType": "number"
                }
            ],
            "name": "VentzCoin"
        },
        {
            "classes": [
                {
                    "functions": [
                        {
                            "args": [
                                "Secret",
                                "string"
                            ],
                            "argsDesc": [
                                "The secret containing the IFTTT webhook auth key",
                                "The Event name assigned to IFTTT webhook."
                            ],
                            "desc": "Posts a request to IFTTT webhook service.",
                            "example": "using System;\nusing Web;\nusing Secrets;\n\n// Example key goto https://ifttt.com/maker_webhooks/settings to get your key.\n// Event is the name created when making your applet.\n\n// You need to make sure the secret is set beforehand with 'secret add ifttt-key <YOUR_KEY_HERE>'\n// Your webhook shoud look something like \"QdjsakdkAFHkjfh78AJmL\"\nSecret secret = Secrets.GetSecret(\"ifttt-key\");\n\nstring event = \"music\";\n\n// Creates a IFTTT, adds some fields and posts it to your webhook\nIFTTT hook = new IFTTT();\n\nhook.Post(secret, event);",
                            "name": "Post",
                            "returnType": "StringResult"
                        }
                    ],
                    "name": "IFTTT"
                },
                {
                    "functions": [
                        {
                            "args": [
                                "string",
                                "string"
                            ],
                            "argsDesc": [
                                "Username or if multiples pipe delimited",
                                "The message to send to  Telegram."
                            ],
                            "desc": "Posts message to Telegram.",
                            "example": "using System;\nusing Web;\n\n// Messages will only go to authorised accounts.\n// https://api2.callmebot.com/txt/login.php  login and authorise via Telegram\n// Or\n// Search for user @CallMeBot_txtbot and send the message \"/start\"\n\n\nstring users = \"relman\"; // if sending to multiple people use | , e.g. \"relz|onariz\"\nstring message = \"You are being raided!!\";\n\n// Creates a Telegram, adds some fields and posts it to your webhook\nTelegram hook = new Telegram();\n\nhook.PostTelegram(users, message);",
                            "name": "PostTelegram",
                            "returnType": "StringResult"
                        }
                    ],
                    "name": "Telegram"
                },
                {
                    "functions": [
                        {
                            "args": [
                                "Secret",
                                "Secret",
                                "string"
                            ],
                            "argsDesc": [
                                "The secret containing the CallMeBot auth key",
                                "The secret containing your WhatsApp Phone number",
                                "The message to send to your WhatsApp."
                            ],
                            "desc": "Posts message to your WhatsApp.",
                            "example": "using System;\nusing Web;\nusing Secrets;\n\n//1. Add the phone number +34 644 31 95 65 into your Phone Contacts. (Name it it as you wish)\n//2. Send this message \"I allow callmebot to send me messages\" to the new Contact created (using WhatsApp of course)\n//3. Wait until you receive the message \"API Activated for your phone number. Your APIKEY is 123123\" from the bot.\n//   Note: If you don't receive the ApiKey in 2 minutes, please try again after 24hs.\n// You need to make sure the secret is set beforehand with 'secret add whatsapp-key <YOUR_KEY_HERE>'\n// You need to make sure the secret is set beforehand with 'secret add whatsapp-number <YOUR_NUMBER_HERE>' with country code e.g. +44\n// Your webhook shoud look something like \"12341234\"\n// Your phone number shoud look something like \"+447221123123\"\n\nSecret secretKey = Secrets.GetSecret(\"whatsapp-key\");\nSecret secretNumber = Secrets.GetSecret(\"whatsapp-number\");\nstring message = \"You are being raided!!\";\n\n// Creates a WhatsApp, adds some fields and posts it to your webhook\nWhatsApp hook = new WhatsApp();\n\nhook.PostWhatsApp(secretKey, secretNumber, message);",
                            "name": "PostWhatsApp",
                            "returnType": "StringResult"
                        }
                    ],
                    "name": "WhatsApp"
                }
            ],
            "functions": [],
            "name": "Web"
        }
    ]
}